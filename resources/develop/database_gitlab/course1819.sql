PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE strands
               (mod_code TEXT,
                strand TEXT,
                FOREIGN KEY (mod_code) REFERENCES "_alter0_modules"(mod_code));
INSERT INTO strands VALUES('CS2900','AI');
INSERT INTO strands VALUES('CS2910','AI');
INSERT INTO strands VALUES('CS3822','AI');
INSERT INTO strands VALUES('CS3920','AI');
INSERT INTO strands VALUES('CS3930','AI');
INSERT INTO strands VALUES('CS3940','AI');
INSERT INTO strands VALUES('CS3945','AI');
INSERT INTO strands VALUES('CS4200','AI');
INSERT INTO strands VALUES('CS4950','AI');
INSERT INTO strands VALUES('CS4100','AI');
INSERT INTO strands VALUES('CS4250','AI');
INSERT INTO strands VALUES('IY3501','IS');
INSERT INTO strands VALUES('IY3606','IS');
INSERT INTO strands VALUES('IY3609','IS');
INSERT INTO strands VALUES('IY3612','IS');
INSERT INTO strands VALUES('IY3660','IS');
INSERT INTO strands VALUES('IY3840','IS');
INSERT INTO strands VALUES('IY3480','IS');
INSERT INTO strands VALUES('IY4501','IS');
INSERT INTO strands VALUES('IY4523','IS');
INSERT INTO strands VALUES('IY4606','IS');
INSERT INTO strands VALUES('IY4609','IS');
INSERT INTO strands VALUES('IY4612','IS');
INSERT INTO strands VALUES('IY4610','IS');
INSERT INTO strands VALUES('CS3003','SE');
INSERT INTO strands VALUES('CS3480','SE');
INSERT INTO strands VALUES('CS3846','SE');
INSERT INTO strands VALUES('CS3510','SE');
INSERT INTO strands VALUES('CS4980','AI');
INSERT INTO strands VALUES('CS4990','AI');
INSERT INTO strands VALUES('CS3910','SE');
INSERT INTO strands VALUES('CS4910','SE');
INSERT INTO strands VALUES('CS4915','SE');
INSERT INTO strands VALUES('CS4563','SE');
CREATE TABLE associated_awards
               (ucas_code1 TEXT,
                ucas_code2 TEXT,
                FOREIGN KEY (ucas_code1) REFERENCES "_alter0_programmes"(ucas_code),
                FOREIGN KEY (ucas_code2) REFERENCES "_alter0_programmes"(ucas_code));
INSERT INTO associated_awards VALUES('G400','G402');
INSERT INTO associated_awards VALUES('G4G7','G4G8');
INSERT INTO associated_awards VALUES('G403','G404');
INSERT INTO associated_awards VALUES('GG47','GG74');
INSERT INTO associated_awards VALUES('G500','G502');
INSERT INTO associated_awards VALUES('G406','G407');
INSERT INTO associated_awards VALUES('G461','G463');
INSERT INTO associated_awards VALUES('G462','G464');
CREATE TABLE programmes (
    "ucas_code" TEXT,
    "prog_code" TEXT,
    "hecos_code" TEXT,
    "title" TEXT,
    "level" TEXT,
    "yini" BOOLEAN,
    "accreditation" TEXT,
    "involved_depts" TEXT,
    "options_text" TEXT,
    "progression_text" TEXT,
    "aims" TEXT,
    "outcomes" TEXT,
    "costs" TEXT,
    "fheq_level" TEXT,
    "status" TEXT,
    "duration" INTEGER
, "specialisation" INTEGER);
INSERT INTO programmes VALUES('G400','1067','','BSc Computer Science','BSC',0,replace('British Computer Society (BCS), and European Quality Assurance Network for Informatics Education (EQANIE).\nTo comply with British Computer Society and EQANIE accreditation requirements students must successfully complete the degree programme and pass the final year project.','\n',char(10)),'N/A',replace('In the <b>second year</b> you will take two further non-project CS2xxx or IY2xxx elective courses.\nIn the <b>final year</b> you will take two further non-project CS3xxx or IY3xxx elective courses.','\n',char(10)),'For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.',replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nto develop, in a flexible and progressive structure, students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education, including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills.','\n',char(10)),replace('knowledge and understanding of the essential facts, concepts, principles and theories relating to computing and computer applications (K);\nunderstanding of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\nunderstanding of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S);*\nproblem identification, analysis and solution using critical assessment and reasoned argument (S);*\ntaking responsibility for own learning and developing habits of reflection on that learning (S);*\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S);*\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S); *\ninformation handling and retrieval (including the use of libraries and computer technology) (S);*\nability to work autonomously, and to demonstrate time management and organisational skills (S);*','\n',char(10)),'There are no single associated costs greater than £50 per item on this degree programme.','4-6','ACTIVE',3,0);
INSERT INTO programmes VALUES('G4G7','1059','','BSc Computer Science (Artificial Intelligence)','BSC',0,replace('British Computer Society (BCS), and European Quality Assurance Network for Informatics Education (EQANIE).\nTo comply with British Computer Society and EQANIE accreditation requirements students must successfully complete the degree programme and pass the final year project.','\n',char(10)),'N/A',replace('In the <b>second year</b> you will take two further non-project CS2XXX elective courses from the Artificial Intelligence (AI) strand.\nIn the <b>third year</b> you will take six further non-project CS3XXX or IY3XXX elective courses, of which at least two must be from the Artificial Intelligence (AI) strand.','\n',char(10)),'For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.',replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nto develop, in a flexible and progressive structure, students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education, including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills.','\n',char(10)),replace('knowledge and understanding of the essential facts, concepts, principles and theories relating to computing and computer applications (K);\nunderstanding of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\nunderstanding of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S);*\nproblem identification, analysis and solution using critical assessment and reasoned argument (S);*\ntaking responsibility for own learning and developing habits of reflection on that learning (S);*\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S);*\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S); *\ninformation handling and retrieval (including the use of libraries and computer technology) (S);*\nability to work autonomously, and to demonstrate time management and organisational skills (S);*','\n',char(10)),'There are no single associated costs greater than £50 per item on this degree programme.','4-6','ACTIVE',3,1);
INSERT INTO programmes VALUES('G407','2675','','BSc Computer Science (Information Security)','BSC',0,replace('GCHQ, British Computer Society (BCS), and European Quality Assurance Network for Informatics Education (EQANIE).\nTo comply with British Computer Society and EQANIE accreditation requirements students must successfully complete the degree programme and pass the final year project.\nGCHQ provisionally certified programme - certification is only given if the student meets all degree programme conditions (e.g. takes, and where appropriate passes, the mandatory course units) as per the programme specification.','\n',char(10)),'N/A',replace('In the <b>second year</b> you take one further non-project CS2XXX or IY2XXX elective course.\nIn the <b>third year</b> you will take one further non-project IY3XXX elective course and two further CS3XXX or IY3XXX elective courses.','\n',char(10)),'For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.',replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nto develop, in a flexible and progressive structure, students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education, including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills.','\n',char(10)),replace('knowledge and understanding of the essential facts, concepts, principles and theories relating to computing and computer applications (K);\nunderstanding of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\nunderstanding of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\nan appreciation of the fundamental aspects of cyber security (K);\nan ability to identify and apply appropriate security controls (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S);*\nproblem identification, analysis and solution using critical assessment and reasoned argument (S);*\ntaking responsibility for own learning and developing habits of reflection on that learning (S);*\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S);*\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S); *\ninformation handling and retrieval (including the use of libraries and computer technology) (S);*\nability to work autonomously, and to demonstrate time management and organisational skills (S);*','\n',char(10)),'There are no single associated costs greater than £50 per item on this degree programme.','4-6','ACTIVE',3,1);
INSERT INTO programmes VALUES('G464','2843','','BSc Computer Science (Software Engineering)','BSC',0,replace('British Computer Society (BCS), and European Quality Assurance Network for Informatics Education (EQANIE).\nTo comply with British Computer Society and EQANIE accreditation requirements students must successfully complete the degree programme and pass the final year project.','\n',char(10)),'N/A',replace('In the <b>second year</b> you take one further non-project CS2XXX or IY2XXX elective course.\nIn the <b>third year</b> you will take four further CS3XXX or IY3XXX elective courses, of which at least two must be from the Software Engineering (SE) strand.','\n',char(10)),'For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.',replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nto develop, in a flexible and progressive structure, students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education, including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills.\nto produce graduates who can work effectively within teams;\nto produce graduates who understand how business value can be delivered to their customers through the software they develop.','\n',char(10)),replace('knowledge and understanding of the essential facts, concepts, principles and theories relating to computing and computer applications (K);\nunderstanding of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\nunderstanding of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\nan understanding of the principles of Software Engineering and the importance of good design (K);\nan understanding of how to work within a team in developing a significant software system (K);\nan understanding of the principles of information security and its context in Computer Science (K);\nan understanding of how to work within a small software company and deliver software within required user specifications (K);\nan understanding of how to provide appropriately costed software which delivers value to a customer (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S);*\nproblem identification, analysis and solution using critical assessment and reasoned argument (S);*\ntaking responsibility for own learning and developing habits of reflection on that learning (S);*\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S);*\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S); *\ninformation handling and retrieval (including the use of libraries and computer technology) (S);*\nability to work autonomously, and to demonstrate time management and organisational skills (S);*\nmanage small projects (S)','\n',char(10)),'There are no single associated costs greater than £50 per item on this degree programme.','4-6','ACTIVE',3,1);
INSERT INTO programmes VALUES('GG41','1069','','BSc Computer Science and Mathematics','BSC',0,'None','Department of Mathematics',replace('<b>Year 2 – Computer Science</b>\nIn addition to the mandatory courses you must choose one further non-project CS2XXX or IY2XXX course\n<b>Year 2 – Mathematics</b>\nYou must choose 30 credits of Mathematics courses (see Mathematics handbook for options)\n<b>Year 3- Computer Science</b>\nYou must choose <b>either</b> CS3821 <b>or</b> CS3810\n<b>Plus</b>\nTwo or three further non-project CS or IY elective courses – to a total of 60 credits of Computer Science, excluding CS3490 and CS3870.\n<b>Year 3 – Mathematics</b>You must choose 60 credits of Mathematics courses (see Mathematics handbook for options).','\n',char(10)),replace('For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.\n<b>Year in Industry</b> - A year out in industry (CS3001) may be taken between second and final year.\nStudents on degree programmes with Year in Industry need to fulfil the requirements set out in the departmental Year in Industry Handbook in order to progress to the placement and be eligible for the degree title.','\n',char(10)),replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nto develop, in a flexible and progressive structure, students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education, including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills.','\n',char(10)),replace('knowledge and understanding of the essential facts, concepts, principles and theories relating to computing and computer applications (K);\nunderstanding of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\nunderstanding of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S);*\nproblem identification, analysis and solution using critical assessment and reasoned argument (S);*\ntaking responsibility for own learning and developing habits of reflection on that learning (S);*\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S);*\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S); *\ninformation handling and retrieval (including the use of libraries and computer technology) (S);*\nability to work autonomously, and to demonstrate time management and organisational skills (S);*','\n',char(10)),'There are no single associated costs greater than £50 per item on this degree programme.','4-6','ACTIVE',3,0);
INSERT INTO programmes VALUES('G4N2','1062','','BSc Computer Science with Management','BSC',0,'None','N/A',replace('<b>Year 1 - Management</b>\nYou must choose two out of MN1205, MN1305, MN1405 and MN1705 (one per term)\n<b>Year 2 – Computer Science</b>\nIn addition to the mandatory courses you must choose one further non-project CS2XXX or IY2XXX course\n<b>Year 2 – Management</b>\nYou must choose two out of MN2205, MN2305, MN2405, MN2705 (one per term)\n<b>Year 3- Computer Science</b>\nYou must choose <b>either</b> CS3821 <b>or</b> CS3810\n<b>Plus</b>\nfour or five further non-project CS3XXX or IY3XXX elective courses-to a total of 90 credits of Computer Science.\n<b>Year 3 – Management</b>\nYou must choose 30 credits of Management courses (see Management handbook for options)','\n',char(10)),replace('For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.\n<b>Year in Industry</b> - A year out in industry (CS3001) may be taken between second and final year.\nStudents on degree programmes with Year in Industry need to fulfil the requirements set out in the departmental Year in Industry Handbook in order to progress to the placement and be eligible for the degree title.','\n',char(10)),replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nto develop, in a flexible and progressive structure, students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education, including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills.','\n',char(10)),replace('knowledge and understanding of the essential facts, concepts, principles and theories relating to computing and computer applications (K);\nunderstanding of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\nunderstanding of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S);*\nproblem identification, analysis and solution using critical assessment and reasoned argument (S);*\ntaking responsibility for own learning and developing habits of reflection on that learning (S);*\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S);*\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S); *\ninformation handling and retrieval (including the use of libraries and computer technology) (S);*\nability to work autonomously, and to demonstrate time management and organisational skills (S);*','\n',char(10)),'There are no single associated costs greater than £50 per item on this degree programme.','4-6','DEFUNCT',3,0);
INSERT INTO programmes VALUES('G403','2686','','MSci Computer Science','MSCI',0,replace('British Computer Society (BCS), and European Quality Assurance Network for Informatics Education (EQANIE).\nTo comply with British Computer Society and EQANIE accreditation requirements students must successfully complete the degree programme and pass the final year project.','\n',char(10)),'N/A',replace('In the <b>second year</b> you take two further non-project CS2XXX or IY2XXX elective courses.\nIn the <b>third year</b> you will take eight non-project CS3XXX or IY3XXX elective courses.\nIn the <b>final year</b> you will take four further non-project CS4XXX or IY4XXX elective courses.','\n',char(10)),'For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.',replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop a mastery of computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nin a flexible and progressive structure, to develop students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an advanced understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education,  including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills;\nto develop an advanced understanding of knowledge and current awareness of current problems and/or new insights in the area of computing science research.','\n',char(10)),replace('an advanced knowledge and understanding of the facts, concepts, principles and theories relating to computing and computer applications (K);\nmastery of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\na command of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S*);\nproblem identification, analysis and solution using critical assessment and reasoned argument (S*);\ntaking responsibility for own learning and developing habits of reflection on that learning (S*);\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S*);\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S*);\ninformation handling and retrieval (including the use of libraries and computer technology) (S*);\nability to work autonomously, and to demonstrate time management and organisational skills (S*).','\n',char(10)),'There are no single associated costs greater than £50 per item on this degree programme.','4-7','ACTIVE',4,0);
INSERT INTO programmes VALUES('G402','2327','','BSc Computer Science with a Year in Industry','BSC',1,replace('British Computer Society (BCS), and European Quality Assurance Network for Informatics Education (EQANIE).\nTo comply with British Computer Society and EQANIE accreditation requirements students must successfully complete the degree programme and pass the final year project.','\n',char(10)),'N/A',replace('In the <b>second year</b> you will take two further non-project CS2xxx or IY2xxx elective courses.\nIn the <b>final year</b> you will take two further non-project CS3xxx or IY3xxx elective courses.','\n',char(10)),replace('For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.\n<b>Year in Industry</b>\nStudents taking an industrial year take additional course CS3001 and thus have 150 credits in their final year.\nStudents on degree programmes with Year in Industry need to fulfil the requirements set out in the departmental Year in Industry Handbook in order to progress to the placement and be eligible for the degree title.','\n',char(10)),replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nto develop, in a flexible and progressive structure, students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education, including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills.','\n',char(10)),replace('knowledge and understanding of the essential facts, concepts, principles and theories relating to computing and computer applications (K);\nunderstanding of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\nunderstanding of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\nappreciation of the importance of computing and information technology for commerce and industry and an understanding of expected industry changes and the effects they will have (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S);*\nproblem identification, analysis and solution using critical assessment and reasoned argument (S);*\ntaking responsibility for own learning and developing habits of reflection on that learning (S);*\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S);*\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S); *\ninformation handling and retrieval (including the use of libraries and computer technology) (S);*\nability to work autonomously, and to demonstrate time management and organisational skills (S);*\nability to apply knowledge and skills in computing to large-scale practical applications (S);','\n',char(10)),replace('There are no single associated costs greater than £50 per item on this degree programme.\nHowever, costs incurred by students while on a Year in Industry/Business vary depending on the nature and location of the placement. For further information please contact our Student Fees Office.','\n',char(10)),'4-6','ACTIVE',4,0);
INSERT INTO programmes VALUES('G404','2687','','MSci Computer Science with a Year in Industry','MSCI',1,replace('British Computer Society (BCS), and European Quality Assurance Network for Informatics Education (EQANIE).\nTo comply with British Computer Society and EQANIE accreditation requirements students must successfully complete the degree programme and pass the final year project.','\n',char(10)),'N/A',replace('In the <b>second year</b> you take two further non-project CS2XXX or IY2XXX elective courses.\nIn the <b>third year</b> you will take eight non-project CS3XXX or IY3XXX elective courses.\nIn the <b>final year</b> you will take four further non-project CS4XXX or IY4XXX elective courses.','\n',char(10)),replace('For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.\n<b>Year in Industry</b>\nStudents taking an industrial year take additional course CS4001 and thus have 150 credits in their final year.\nStudents on degree programmes with Year in Industry need to fulfil the requirements set out in the departmental Year in Industry Handbook in order to progress to the placement and be eligible for the degree title.','\n',char(10)),replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop a mastery of computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nin a flexible and progressive structure, to develop students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an advanced understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education,  including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills;\nto develop an advanced understanding of knowledge and current awareness of current problems and/or new insights in the area of computing science research.','\n',char(10)),replace('an advanced knowledge and understanding of the facts, concepts, principles and theories relating to computing and computer applications (K);\nmastery of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\na command of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\nappreciation of the importance of computing and information technology for commerce and industry and an understanding of expected industry changes and the effects they will have (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S*);\nproblem identification, analysis and solution using critical assessment and reasoned argument (S*);\ntaking responsibility for own learning and developing habits of reflection on that learning (S*);\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S*);\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S*);\ninformation handling and retrieval (including the use of libraries and computer technology) (S*);\nability to work autonomously, and to demonstrate time management and organisational skills (S*).\nability to apply knowledge and skills in computing to large-scale practical applications (S);','\n',char(10)),replace('There are no single associated costs greater than £50 per item on this degree programme.\nHowever, costs incurred by students while on a Year in Industry/Business vary depending on the nature and location of the placement. For further information please contact our Student Fees Office.','\n',char(10)),'4-7','ACTIVE',5,0);
INSERT INTO programmes VALUES('GG47','2673','','MSci Computer Science (Artificial Intelligence)','MSCI',0,replace('British Computer Society (BCS), and European Quality Assurance Network for Informatics Education (EQANIE).\nTo comply with British Computer Society and EQANIE accreditation requirements students must successfully complete the degree programme and pass the final year project.','\n',char(10)),'N/A',replace('In the <b>second year</b> you will take two further non-project CS2XXX elective courses from the Artificial Intelligence (AI) strand.\nIn the <b>third year</b> you will take eight non-project CS3XXX or IY3XXX elective courses, of which at least two must be from the Artificial Intelligence (AI) strand.\nIn the <b>final year</b> you will take four further non-project CS4XXX or IY4XXX elective courses, of which at least two must be from the Artificial Intelligence (AI) strand.','\n',char(10)),'For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.',replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop a mastery of computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nin a flexible and progressive structure, to develop students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an advanced understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education,  including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills;\nto develop an advanced understanding of knowledge and current awareness of current problems and/or new insights in the area of computing science research.','\n',char(10)),replace('an advanced knowledge and understanding of the facts, concepts, principles and theories relating to computing and computer applications (K);\nmastery of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\na command of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S*);\nproblem identification, analysis and solution using critical assessment and reasoned argument (S*);\ntaking responsibility for own learning and developing habits of reflection on that learning (S*);\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S*);\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S*);\ninformation handling and retrieval (including the use of libraries and computer technology) (S*);\nability to work autonomously, and to demonstrate time management and organisational skills (S*).','\n',char(10)),'There are no single associated costs greater than £50 per item on this degree programme.','4-7','ACTIVE',4,1);
INSERT INTO programmes VALUES('G4G8','2446','','BSc Computer Science (Artificial Intelligence) with a Year in Industry','BSC',1,replace('British Computer Society (BCS), and European Quality Assurance Network for Informatics Education (EQANIE).\nTo comply with British Computer Society and EQANIE accreditation requirements students must successfully complete the degree programme and pass the final year project.','\n',char(10)),'N/A',replace('In the <b>second year</b> you will take two further non-project CS2XXX elective courses from the Artificial Intelligence (AI) strand.\nIn the <b>third year</b> you will take six further non-project CS3XXX or IY3XXX elective courses, of which at least two must be from the Artificial Intelligence (AI) strand.','\n',char(10)),replace('For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.\n<b>Year in Industry</b>\nStudents taking an industrial year take additional course CS3001 and thus have 150 credits in their final year.\nStudents on degree programmes with Year in Industry need to fulfil the requirements set out in the departmental Year in Industry Handbook in order to progress to the placement and be eligible for the degree title.','\n',char(10)),replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nto develop, in a flexible and progressive structure, students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education, including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills.','\n',char(10)),replace('knowledge and understanding of the essential facts, concepts, principles and theories relating to computing and computer applications (K);\nunderstanding of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\nunderstanding of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\nappreciation of the importance of computing and information technology for commerce and industry and an understanding of expected industry changes and the effects they will have (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S);*\nproblem identification, analysis and solution using critical assessment and reasoned argument (S);*\ntaking responsibility for own learning and developing habits of reflection on that learning (S);*\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S);*\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S); *\ninformation handling and retrieval (including the use of libraries and computer technology) (S);*\nability to work autonomously, and to demonstrate time management and organisational skills (S);*\nability to apply knowledge and skills in computing to large-scale practical applications (S);','\n',char(10)),replace('There are no single associated costs greater than £50 per item on this degree programme.\nHowever, costs incurred by students while on a Year in Industry/Business vary depending on the nature and location of the placement. For further information please contact our Student Fees Office.','\n',char(10)),'4-6','ACTIVE',4,1);
INSERT INTO programmes VALUES('GG74','2674','','MSci Computer Science (Artificial Intelligence) with a Year in Industry','MSCI',1,replace('British Computer Society (BCS), and European Quality Assurance Network for Informatics Education (EQANIE).\nTo comply with British Computer Society and EQANIE accreditation requirements students must successfully complete the degree programme and pass the final year project.','\n',char(10)),'N/A',replace('In the <b>second year</b> you will take two further non-project CS2XXX elective courses from the Artificial Intelligence (AI) strand.\nIn the <b>third year</b> you will take eight non-project CS3XXX or IY3XXX elective courses, of which at least two must be from the Artificial Intelligence (AI) strand.\nIn the <b>final year</b> you will take four further non-project CS4XXX or IY4XXX elective courses, of which at least two must be from the Artificial Intelligence (AI) strand.','\n',char(10)),replace('For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.\n<b>Year in Industry</b>\nStudents taking an industrial year take additional course CS4001 and thus have 150 credits in their final year.\nStudents on degree programmes with Year in Industry need to fulfil the requirements set out in the departmental Year in Industry Handbook in order to progress to the placement and be eligible for the degree title.','\n',char(10)),replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop a mastery of computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nin a flexible and progressive structure, to develop students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an advanced understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education,  including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills;\nto develop an advanced understanding of knowledge and current awareness of current problems and/or new insights in the area of computing science research.','\n',char(10)),replace('an advanced knowledge and understanding of the facts, concepts, principles and theories relating to computing and computer applications (K);\nmastery of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\na command of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\nappreciation of the importance of computing and information technology for commerce and industry and an understanding of expected industry changes and the effects they will have (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S*);\nproblem identification, analysis and solution using critical assessment and reasoned argument (S*);\ntaking responsibility for own learning and developing habits of reflection on that learning (S*);\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S*);\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S*);\ninformation handling and retrieval (including the use of libraries and computer technology) (S*);\nability to work autonomously, and to demonstrate time management and organisational skills (S*).\nability to apply knowledge and skills in computing to large-scale practical applications (S);','\n',char(10)),replace('There are no single associated costs greater than £50 per item on this degree programme.\nHowever, costs incurred by students while on a Year in Industry/Business vary depending on the nature and location of the placement. For further information please contact our Student Fees Office.','\n',char(10)),'4-7','ACTIVE',5,1);
INSERT INTO programmes VALUES('G500','2677','','MSci Computer Science (Information Security)','MSCI',0,replace('GCHQ, British Computer Society (BCS), and European Quality Assurance Network for Informatics Education (EQANIE).\nTo comply with British Computer Society and EQANIE accreditation requirements students must successfully complete the degree programme and pass the final year project.\nGCHQ provisionally certified programme - certification is only given if the student meets all degree programme conditions (e.g. takes, and where appropriate passes, the mandatory course units) as per the programme specification.','\n',char(10)),'N/A',replace('In the <b>second year</b> you take one further non-project CS2XXX or IY2XXX elective course.\nIn the <b>third year</b> you will take six further non-project CS3XXX or IY3XXX elective courses, with a maximum of two from the Information Security (IS) strand.\nIn the <b>final year</b> you will take one further non-project CS4XXX or IY4XXX elective course.','\n',char(10)),'For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.',replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop a mastery of computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nin a flexible and progressive structure, to develop students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an advanced understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education,  including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills;\nto develop an advanced understanding of knowledge and current awareness of current problems and/or new insights in the area of computing science research.','\n',char(10)),replace('an advanced knowledge and understanding of the facts, concepts, principles and theories relating to computing and computer applications (K);\nmastery of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\na command of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\na command of the fundamental aspects of cyber security (K);\na mastery of the identification and appropriate application of security controls (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S*);\nproblem identification, analysis and solution using critical assessment and reasoned argument (S*);\ntaking responsibility for own learning and developing habits of reflection on that learning (S*);\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S*);\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S*);\ninformation handling and retrieval (including the use of libraries and computer technology) (S*);\nability to work autonomously, and to demonstrate time management and organisational skills (S*).','\n',char(10)),'There are no single associated costs greater than £50 per item on this degree programme.','4-7','ACTIVE',4,1);
INSERT INTO programmes VALUES('G406','2676','','BSc Computer Science (Information Security) with a Year in Industry','BSC',1,replace('GCHQ, British Computer Society (BCS), and European Quality Assurance Network for Informatics Education (EQANIE).\nTo comply with British Computer Society and EQANIE accreditation requirements students must successfully complete the degree programme and pass the final year project.\nGCHQ provisionally certified programme - certification is only given if the student meets all degree programme conditions (e.g. takes, and where appropriate passes, the mandatory course units) as per the programme specification.','\n',char(10)),'N/A',replace('In the <b>second year</b> you take one further non-project CS2XXX or IY2XXX elective course.\nIn the <b>third year</b> you will take one further non-project IY3XXX elective course and two further CS3XXX or IY3XXX elective courses.','\n',char(10)),replace('For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.\n<b>Year in Industry</b>\nStudents taking an industrial year take additional course CS3001 and thus have 150 credits in their final year.\nStudents on degree programmes with Year in Industry need to fulfil the requirements set out in the departmental Year in Industry Handbook in order to progress to the placement and be eligible for the degree title.','\n',char(10)),replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nto develop, in a flexible and progressive structure, students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education, including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills.','\n',char(10)),replace('knowledge and understanding of the essential facts, concepts, principles and theories relating to computing and computer applications (K);\nunderstanding of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\nunderstanding of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\nan appreciation of the fundamental aspects of cyber security (K);\nan ability to identify and apply appropriate security controls (K);\nappreciation of the importance of computing and information technology for commerce and industry and an understanding of expected industry changes and the effects they will have (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S);*\nproblem identification, analysis and solution using critical assessment and reasoned argument (S);*\ntaking responsibility for own learning and developing habits of reflection on that learning (S);*\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S);*\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S); *\ninformation handling and retrieval (including the use of libraries and computer technology) (S);*\nability to work autonomously, and to demonstrate time management and organisational skills (S);*\nability to apply knowledge and skills in computing to large-scale practical applications (S);','\n',char(10)),replace('There are no single associated costs greater than £50 per item on this degree programme.\nHowever, costs incurred by students while on a Year in Industry/Business vary depending on the nature and location of the placement. For further information please contact our Student Fees Office.','\n',char(10)),'4-6','ACTIVE',4,1);
INSERT INTO programmes VALUES('G502','2678','','MSci Computer Science (Information Security) with a Year in Industry','MSCI',1,replace('GCHQ, British Computer Society (BCS), and European Quality Assurance Network for Informatics Education (EQANIE).\nTo comply with British Computer Society and EQANIE accreditation requirements students must successfully complete the degree programme and pass the final year project.\nGCHQ provisionally certified programme - certification is only given if the student meets all degree programme conditions (e.g. takes, and where appropriate passes, the mandatory course units) as per the programme specification.','\n',char(10)),'N/A',replace('In the <b>second year</b> you take one further non-project CS2XXX or IY2XXX elective course.\nIn the <b>third year</b> you will take six further non-project CS3XXX or IY3XXX elective courses, with a maximum of two from the Information Security (IS) strand.\nIn the <b>final year</b> you will take one further non-project CS4XXX or IY4XXX elective course.','\n',char(10)),replace('For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.\n<b>Year in Industry</b>\nStudents taking an industrial year take additional course CS4001 and thus have 150 credits in their final year.\nStudents on degree programmes with Year in Industry need to fulfil the requirements set out in the departmental Year in Industry Handbook in order to progress to the placement and be eligible for the degree title.','\n',char(10)),replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop a mastery of computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nin a flexible and progressive structure, to develop students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an advanced understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education,  including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills;\nto develop an advanced understanding of knowledge and current awareness of current problems and/or new insights in the area of computing science research.','\n',char(10)),replace('an advanced knowledge and understanding of the facts, concepts, principles and theories relating to computing and computer applications (K);\nmastery of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\na command of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\na command of the fundamental aspects of cyber security (K);\na mastery of the identification and appropriate application of security controls (K);\nappreciation of the importance of computing and information technology for commerce and industry and an understanding of expected industry changes and the effects they will have (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S*);\nproblem identification, analysis and solution using critical assessment and reasoned argument (S*);\ntaking responsibility for own learning and developing habits of reflection on that learning (S*);\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S*);\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S*);\ninformation handling and retrieval (including the use of libraries and computer technology) (S*);\nability to work autonomously, and to demonstrate time management and organisational skills (S*).\nability to apply knowledge and skills in computing to large-scale practical applications (S);','\n',char(10)),replace('There are no single associated costs greater than £50 per item on this degree programme.\nHowever, costs incurred by students while on a Year in Industry/Business vary depending on the nature and location of the placement. For further information please contact our Student Fees Office.','\n',char(10)),'4-7','ACTIVE',5,1);
INSERT INTO programmes VALUES('G461','2845','','MSci Computer Science (Software Engineering)','MSCI',0,replace('British Computer Society (BCS), and European Quality Assurance Network for Informatics Education (EQANIE).\nTo comply with British Computer Society and EQANIE accreditation requirements students must successfully complete the degree programme and pass the final year project.','\n',char(10)),'N/A',replace('In the <b>second year</b> you take one further non-project CS2XXX or IY2XXX elective course.\nIn the <b>third year</b> you will take four further non-project CS3XXX or IY3XXX elective courses, of which at least two must be from the Software Engineering (SE) strand.\nIn the <b>final year</b> you will take four further non-project CS4XXX or IY4XXX elective courses.','\n',char(10)),'For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.',replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop a mastery of computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nin a flexible and progressive structure, to develop students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an advanced understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education,  including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills;\nto develop an advanced understanding of knowledge and current awareness of current problems and/or new insights in the area of computing science research.\nto produce graduates who can work effectively within teams;\nto produce graduates who understand how business value can be delivered to their customers through the software they develop.\nto produce graduates who can understand and work within a small company;','\n',char(10)),replace('an advanced knowledge and understanding of the facts, concepts, principles and theories relating to computing and computer applications (K);\nmastery of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\na command of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\nan advanced understanding of the principles of Software Engineering and the importance of good design (K);\nan advanced understanding of how to work within a team in developing a significant software system (K);\nan understanding of the principles of information security and its context in Computer Science (K);\na mastery of how to work within a small software company and deliver software within required user specifications (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S*);\nproblem identification, analysis and solution using critical assessment and reasoned argument (S*);\ntaking responsibility for own learning and developing habits of reflection on that learning (S*);\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S*);\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S*);\ninformation handling and retrieval (including the use of libraries and computer technology) (S*);\nability to work autonomously, and to demonstrate time management and organisational skills (S*).\nan ability to apply the practical and analytical skills present in the programme as a whole (K);\nshow awareness of wider customer contexts and the identification of problems that such contexts might deliver (K);\nexhibit the ability to work co-operatively to deliver a significant piece of work (K);\nexhibit critical self evaluation of the process (K);\nmanage small projects (S)','\n',char(10)),'There are no single associated costs greater than £50 per item on this degree programme.','4-7','ACTIVE',4,1);
INSERT INTO programmes VALUES('G462','2844','','BSc Computer Science (Software Engineering) with a Year in Industry','BSC',1,replace('British Computer Society (BCS), and European Quality Assurance Network for Informatics Education (EQANIE).\nTo comply with British Computer Society and EQANIE accreditation requirements students must successfully complete the degree programme and pass the final year project.','\n',char(10)),'N/A',replace('In the <b>second year</b> you take one further non-project CS2XXX or IY2XXX elective course.\nIn the <b>third year</b> you will take four further CS3XXX or IY3XXX elective courses, of which at least two must be from the Software Engineering (SE) strand.','\n',char(10)),replace('For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.\n<b>Year in Industry</b>\nStudents taking an industrial year take additional course CS3001 and thus have 150 credits in their final year.\nStudents on degree programmes with Year in Industry need to fulfil the requirements set out in the departmental Year in Industry Handbook in order to progress to the placement and be eligible for the degree title.','\n',char(10)),replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nto develop, in a flexible and progressive structure, students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education, including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills.\nto produce graduates who can work effectively within teams;\nto produce graduates who understand how business value can be delivered to their customers through the software they develop.','\n',char(10)),replace('knowledge and understanding of the essential facts, concepts, principles and theories relating to computing and computer applications (K);\nunderstanding of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\nunderstanding of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\nan understanding of the principles of Software Engineering and the importance of good design (K);\nan understanding of how to work within a team in developing a significant software system (K);\nan understanding of the principles of information security and its context in Computer Science (K);\nan understanding of how to work within a small software company and deliver software within required user specifications (K);\nan understanding of how to provide appropriately costed software which delivers value to a customer (K);\nappreciation of the importance of computing and information technology for commerce and industry and an understanding of expected industry changes and the effects they will have (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S);*\nproblem identification, analysis and solution using critical assessment and reasoned argument (S);*\ntaking responsibility for own learning and developing habits of reflection on that learning (S);*\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S);*\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S); *\ninformation handling and retrieval (including the use of libraries and computer technology) (S);*\nability to work autonomously, and to demonstrate time management and organisational skills (S);*\nmanage small projects (S)\nability to apply knowledge and skills in computing to large-scale practical applications (S);','\n',char(10)),replace('There are no single associated costs greater than £50 per item on this degree programme.\nHowever, costs incurred by students while on a Year in Industry/Business vary depending on the nature and location of the placement. For further information please contact our Student Fees Office.','\n',char(10)),'4-6','ACTIVE',4,1);
INSERT INTO programmes VALUES('G463','2846','','MSci Computer Science (Software Engineering) with a Year in Industry','MSCI',1,replace('British Computer Society (BCS), and European Quality Assurance Network for Informatics Education (EQANIE).\nTo comply with British Computer Society and EQANIE accreditation requirements students must successfully complete the degree programme and pass the final year project.','\n',char(10)),'N/A',replace('In the <b>second year</b> you take one further non-project CS2XXX or IY2XXX elective course.\nIn the <b>third year</b> you will take four further non-project CS3XXX or IY3XXX elective courses, of which at least two must be from the Software Engineering (SE) strand.\nIn the <b>final year</b> you will take four further non-project CS4XXX or IY4XXX elective courses.','\n',char(10)),replace('For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.\n<b>Year in Industry</b>\nStudents taking an industrial year take additional course CS4001 and thus have 150 credits in their final year.\nStudents on degree programmes with Year in Industry need to fulfil the requirements set out in the departmental Year in Industry Handbook in order to progress to the placement and be eligible for the degree title.','\n',char(10)),replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment or for a research career in Computer Science and related areas;\nto develop a mastery of computing-related cognitive abilities and skills as described in the QAA Computer Science benchmark statement;\nin a flexible and progressive structure, to develop students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an advanced understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education,  including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills;\nto develop an advanced understanding of knowledge and current awareness of current problems and/or new insights in the area of computing science research.\nto produce graduates who can work effectively within teams;\nto produce graduates who understand how business value can be delivered to their customers through the software they develop.\nto produce graduates who can understand and work within a small company;','\n',char(10)),replace('an advanced knowledge and understanding of the facts, concepts, principles and theories relating to computing and computer applications (K);\nmastery of the implications of recent research in Computer Science, artificial intelligence and related fields, and how such research results can be incorporated into computer-based systems (K);\na command of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context (K);\nknowledge of how computers are programmed and used; advanced programming; software engineering and team work for developing a significant software system; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers (K);\ndepending on their programme of studies, students may also gain a knowledge of the following key practical application technologies: operating systems; graphics; robotics, bioinformatics, information security, applied artificial intelligence and human-computer interfaces; theoretical foundations of algorithms and programming (K);\nan advanced understanding of the principles of Software Engineering and the importance of good design (K);\nan advanced understanding of how to work within a team in developing a significant software system (K);\nan understanding of the principles of information security and its context in Computer Science (K);\na mastery of how to work within a small software company and deliver software within required user specifications (K);\nappreciation of the importance of computing and information technology for commerce and industry and an understanding of expected industry changes and the effects they will have (K);\nability to deploy appropriate theory, practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, embedded systems, distributed systems and web-based systems) to meet given requirements under practical constraints (S);\nemploy the research skills needed to investigate a defined topic under supervision, through an extended individual project (S);\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams (S*);\nproblem identification, analysis and solution using critical assessment and reasoned argument (S*);\ntaking responsibility for own learning and developing habits of reflection on that learning (S*);\nskills in written communication, project documentation, verbal presentation; numeracy and computation (S*);\nuse of information technology (including spreadsheets, databases, word processing, email and WWW) (S*);\ninformation handling and retrieval (including the use of libraries and computer technology) (S*);\nability to work autonomously, and to demonstrate time management and organisational skills (S*).\nan ability to apply the practical and analytical skills present in the programme as a whole (K);\nshow awareness of wider customer contexts and the identification of problems that such contexts might deliver (K);\nexhibit the ability to work co-operatively to deliver a significant piece of work (K);\nexhibit critical self evaluation of the process (K);\nmanage small projects (S)\nability to apply knowledge and skills in computing to large-scale practical applications (S);','\n',char(10)),replace('There are no single associated costs greater than £50 per item on this degree programme.\nHowever, costs incurred by students while on a Year in Industry/Business vary depending on the nature and location of the placement. For further information please contact our Student Fees Office.','\n',char(10)),'4-7','ACTIVE',5,1);
INSERT INTO programmes VALUES('comptech','','','BSc Computing Technologies','BSC',0,'None','N/A',replace('In the <b>second year</b> you will choose one 15 credit elective.  This will normally be from another department.  Approval will be required.\nIn the <b>third year</b> you will choose two 15 credit electives which will normally include CS3003 IT Project Management and/or IY3501 Security Management.  A full list will be confirmed with the department during the course choices process.','\n',char(10)),replace('For further information on the progression and award requirements for your degree, please refer to Royal Holloway’s Academic Regulations. As part of your degree programme you may also be required to complete a course to develop your academic writing skills. This course does not carry credit but passing it is a requirement to progress to the next year of study.\nCS3824 Project in Computing Technologies must be passed in order to qualify for the award.','\n',char(10)),replace('to produce graduates with the ability to engage in the lifelong learning and with the skills required for a professional career in a computer-based environment;\nto develop computing-related cognitive abilities and skills as described in the QAA Computing benchmark statement;\nto develop, in a flexible and progressive structure, students’ knowledge and understanding of essential facts and theory, with the ability to use this knowledge to devise, cost, specify, design, implement, test, document and critically evaluate computer-based systems;\nto develop an understanding of professional and ethical issues involved in the deployment of computer technology;\nto produce graduates who can work effectively within teams;\nto produce graduates with a range of personal attributes relevant to the world beyond higher education,  including information retrieval and use, numeracy, the ability to devise and present logical arguments to inform and support actions, and organisational skills;\nto produce graduates who understand how business value can be delivered.','\n',char(10)),replace('knowledge and understanding of the essential facts, concepts, principles and theories relating to computing and computer applications;(K)\nan understanding of the professional, moral and ethical aspects of the use of computer-based systems, and ability to recognise any risks or safety aspects in a given context;(K)\nknowledge of how computers are programmed and used; the fundamental technologies used for artificial intelligence; the functioning of the Internet and the World Wide Web; the main concepts of database technology and design; background theory necessary for a deeper understanding of computing and computers;(K)\nan understanding of the principles of Software Engineering and the importance of good design;(K)\nan understanding of how to work within a team in developing a significant software system;(K)\nan understanding of the principles of information security and its context in Computing Technologies;(K)\nan understanding of how to provide value to a customer;(K)\nability to deploy appropriate practices and tools for the modelling, specification, design, implementation and evaluation of computer-based systems (including stand-alone computer systems, information systems, distributed systems and web-based systems) to meet given requirements under practical constraints;(S)\ninterpersonal skills, including the ability to work as a member of a development team, recognising/respecting the viewpoints of others, recognising the different roles within a team and the different ways of organising teams;(S)*\nproblem identification, analysis and solution using critical assessment and reasoned argument;(S)*\ntaking responsibility for own learning and developing habits of reflection on that learning;(S)*\nskills in written communication, project documentation, verbal presentation; numeracy and computation(S)*\nuse of information technology (including spreadsheets, databases, word processing, email and WWW);(S)*\ninformation handling and retrieval (including the use of libraries and computer technology);(S)*\nability to work autonomously, and to demonstrate time management and organisational skills;(S)*\nmanage small projects;(S)','\n',char(10)),'There are no single associated costs greater than £50 per item on this degree programme.','4-6','ACTIVE',3,0);
CREATE TABLE modules (
    "mod_code" TEXT,
    "hecos_code" TEXT,
    "title" TEXT,
    "year" INTEGER,
    "department" TEXT,
    "contact_hours" INTEGER,
    "exams" INTEGER,
    "practical" INTEGER,
    "coursework" INTEGER,
    "credits" INTEGER,
    "prerequisites" TEXT,
    "summary" TEXT,
    "outcomes" TEXT,
    "methods" TEXT,
    "bibliography" TEXT,
    "formative" TEXT,
    "summative" TEXT,
    "exam_format" TEXT,
    "status" TEXT,
    "project" BOOLEAN
, "lab_hours" INTEGER);
INSERT INTO modules VALUES('CS1811','','Object Oriented Programming I',1,'CS',24,90,0,10,15,'None','This course teaches programming and object-orientation concepts. Students will learn about program basics (variables, types, scope, lifetimes),  control flow (if-constructs, for-loops, while-loops), data structures (strings, sets, lists, trees), objects (classes and inheritance), exceptions (throwing and catching) and file I/O (streams, file reading and writing).',replace('By the end of this course a student should be able to:<ul><li>solve basic programming tasks</li>\n<li>understand and use basic object-oriented concepts</li>\n<li>demonstrate familiarity with core elements of the Java API</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by laboratory classes. Normally 3 hours of lectures and 2 hours of laboratory classes per week.',replace('<ul><li>Herbert Schildt: Java: a Beginner’s Guide, 4th Edition, McGraw-Hill, 2007, ISBN 0072263849</li>\n<li>Cay S. Horstmann: Big Java, 4th Edition, Wiley, 2010, ISBN 987-0-470-55309-1</li>\n</ul>','\n',char(10)),'A zero weighted test for which marks will be returned. Verbal feedback in laboratory sessions. Students must pass the laboratory exercises component to pass the course.','90% invigilated, closed book 1.5 hours exam and 10% coursework.<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 1 1/2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,2);
INSERT INTO modules VALUES('CS1812','','Object Oriented Programming II',1,'CS',22,90,0,10,15,'CS1811','This course teaches programming and object-orientation concepts, building on what is taught in CS1811. Students will reinforce their knowledge about program basics (e.g. variables, types, scope, lifetimes), algorithms (e.g. recursion, searching, sorting), data structures (e.g. sets, lists, trees), objects (e.g. classes, dynamic dispatch, interface, inheritance, generics), exceptions and I/O (e.g. streams, file reading, writing and copying). Furthermore, the course also teaches fundamentals of coding best practices.',replace('By the end of this course a student should be able to:<ul><li>demonstrate an ability to implement basic algorithms and data structures</li>\n<li>understand and use object-oriented concepts</li>\n<li>appreciate the need for program documentation, testing, readability and modifiability</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by laboratory classes. Normally 2 hours of lectures and 3 hours of laboratory classes per week.',replace('<ul><li>Herbert Schildt: Java: a Beginner’s Guide, 4th Edition, McGraw-Hill, 2007, ISBN 0072263849</li>\n<li>Cay S. Horstmann: Big Java, 4th Edition, Wiley, 2010, ISBN 987-0-470-55309-1</li>\n</ul>','\n',char(10)),'Verbal feedback in laboratory sessions. Students must pass the laboratory exercises component to pass the course.','90% invigilated, closed book 1.5 hours exam and 10% coursework.<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 1 1/2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,2);
INSERT INTO modules VALUES('CS1813','','Software Development',1,'CS',42,60,0,40,15,'CS1811',replace('This course teaches programming and object-orientation concepts, building on what is taught in CS1811. Students will reinforce their knowledge about program basics (e.g. variables, types, scope, lifetimes), algorithms (e.g. recursion, searching, sorting), data structures (e.g. sets, lists, trees), objects (e.g. classes, dynamic dispatch, interface, inheritance, generics), exceptions and I/O (e.g. streams, file reading, writing and copying). Furthermore, the course also teaches fundamentals of coding best practices.<br />\nIn addition, students learn software development best practices, how to perform small scale software development from a specification, and details about the testing process and software evaluation.','\n',char(10)),replace('By the end of this course a student should be able to:<ul><li>demonstrate an ability to implement basic algorithms and data structures</li>\n<li>understand and use object-oriented concepts</li>\n<li>appreciate the need for program documentation, testing, readability and modifiability</li>\n<li>develop a simple application based on a design specification</li>\n<li>create a test plan, execute it, and identify faults in an application</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by laboratory classes. Normally 2 hours of lectures and 2 hours of laboratory classes per week.',replace('<ul><li>Herbert Schildt: Java: a Beginner’s Guide, 4th Edition, McGraw-Hill, 2007, ISBN 0072263849</li>\n<li>Cay S. Horstmann: Big Java, 4th Edition, Wiley, 2010, ISBN 987-0-470-55309-1</li>\n</ul>','\n',char(10)),'Verbal feedback in laboratory sessions.','60% invigilated, closed book exam. 40% coursework<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 1 1/2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,2);
INSERT INTO modules VALUES('CS1821','','Programming Fundamentals',1,'CS',66,0,0,100,30,'None','Students in this course will apply programming concepts from the the very basic (variables, control flow, loops, methods) up to advanced concepts (event driven programming, embedded programming) and best practices. The course will follow a blended learning model incorporating lectures, practical exercises, project work and online assessment. ',replace('1. program independently to solve a given problem. \n\n2. know how to write an individual technical report.. \n\n3. know how to present a project, both at a practical demonstration and in a formal short presentation. \n\n4. have been introduced to a programming environment for a particular event driven or embedded domain such as microprocessor coding, robotics coding, game development or interactive web development. \n\n5. work in a group on an I.T. project. ','\n',char(10)),replace('11 weekly lectures = 11 hours\n15 weekly laboratory classes = 15 hours\n20 twice-weekly practical classes = 40 hours','\n',char(10)),replace('Cay S. Horstmann: Big Java, 4th Edition, Wiley, 2010, ISBN 987-0-470-55309-1 \n\nhttps://inventwithpython.com/ \n\nIan Millington – Artificial Intelligence for Games  \n\nDavid Eberly – Game Physics \n\nChrister Ericsson – Real Time Collision Detection \n\nJ. Kelly: LEGO Mindstorms NXT-G Programming Guide, Technology in Action Press, 2007, ISBN 10: 1590598717 \n\nBrian Bagnell: Maximum Lego NXT: Building Robots with Java Brains, Variant Press 2007, ISBN 10: 097386491 \n\n ','\n',char(10)),'55 laboratory checkpoints (mandatory formative assessment)',replace('Team project 40%\nIndividual assignments 60%\n\nDetails of coursework submission deadlines will be published on the department website at the start of term','\n',char(10)),'','ACTIVE',0,3);
INSERT INTO modules VALUES('CS1822','','Programming Laboratory',1,'CS',66,0,0,100,30,'None','Students in this course will apply programming concepts from the the very basic (variables, control flow, loops, methods) up to advanced concepts (event driven programming, embedded programming) and best practices. The course will follow a blended learning model incorporating lectures, practical exercises, project work and online assessment. ',replace('1. program independently to solve a given problem. \n\n2. know how to write an individual technical report.. \n\n3. know how to present a project, both at a practical demonstration and in a formal short presentation. \n\n4. have been introduced to a programming environment for a particular event driven or embedded domain such as microprocessor coding, robotics coding, game development or interactive web development. \n\n5. work in a group on a programming project. ','\n',char(10)),replace('11 weekly lectures = 11 hours\n15 weekly laboratory classes = 15 hours\n20 twice-weekly practical classes = 40 hours','\n',char(10)),replace('Cay S. Horstmann: Big Java, 4th Edition, Wiley, 2010, ISBN 987-0-470-55309-1 \n\nhttps://inventwithpython.com/ \n\nIan Millington – Artificial Intelligence for Games  \n\nDavid Eberly – Game Physics \n\nChrister Ericsson – Real Time Collision Detection \n\nJ. Kelly: LEGO Mindstorms NXT-G Programming Guide, Technology in Action Press, 2007, ISBN 10: 1590598717 \n\nBrian Bagnell: Maximum Lego NXT: Building Robots with Java Brains, Variant Press 2007, ISBN 10: 097386491 \n\n ','\n',char(10)),'55 laboratory checkpoints (mandatory formative assessment)',replace('Team project 40%\nIndividual assignments 60%\n\nDetails of coursework submission deadlines will be published on the department website at the start of term','\n',char(10)),'','ACTIVE',0,3);
INSERT INTO modules VALUES('CS1840','','Internet Services',1,'CS',40,90,0,10,15,'None','The course introduces the basics of how the Internet works and its key protocols. With that foundation, it then addresses the technologies used for web development, including scripting languages and their potential. Web Services and related technologies are also introduced as well as the basics of network security.',replace('By the end of this course a student should be able to:<ul><li>understand the basics of how the Internet works</li>\n<li>understand key Internet protocols</li>\n<li>carry out web development tasks involving current web technologies</li>\n<li>use scripting languages to add dynamic aspects to web sites/applications</li>\n<li>understand the fundamentals of Web Services and network security</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by laboratory classes, guided independent study. Up to 3 hours of lectures and laboratory classes per week<br />',replace('<ul><li>J.F. Kurose and K.W. Ross: Computer Networking: A Top-Down Approach , Pearson, 6th edition, international edition, 2013  </li>\n</ul>','\n',char(10)),'Verbal feedback on progress will be given during the weekly laboratory sessions','10% coursework <br />90%     Invigilated, closed book.   1.5hours  exam.<br /><br />Details of coursework submission deadlines will be published on the course webside at the start of term<br />',replace('Time allowed: 1 1/2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,1);
INSERT INTO modules VALUES('CS1860','','Mathematical Structures',1,'CS',38,90,0,10,15,'None','The aim of this module is to provide (1) insights and skills in rigor and formal reasoning in a way that allows reasoning about behaviour, correctness and performance in a programming environment; and (2) basic knowledge of the formal structures for program data representation. The course content includes: structures such as sets, relations, functions and cardinality; recursion and proof by induction; graphs; basic probability and statistics.',replace('By the end of this course a student should be able to:<ul><li>reason about sets, relations, functions and cardinality</li>\n<li>reason about recursive definitions and prove results by induction</li>\n<li>represent problems and reason about them using graphs</li>\n<li>understand basic probability and statistics suitable for use in studying artificial intelligence and information security\n</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by small group tutorials.Normally 3 hours of lectures per week.<br />',replace('<ul><li>Rosen: Discrete Mathematics And Its Applications, McGraw Hill, 2006, ISBN 0071244743</li>\n<li>Ross and Wright: Discrete Mathematics, Prentice Hall, 2003, ISBN 0130652474</li>\n<li>D. Velleman, “How To Prove It”, Cambridge University Press, 2006</li>\n</ul>','\n',char(10)),'Individual discussion of non-assessed tutorial exercises and discussion of assessed worksheets in small group tutorials.','90% invigilated, closed book     1.5hrs<br />10% coursework<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 1 1/2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,0);
INSERT INTO modules VALUES('CS1870','','Machine Fundamentals',1,'CS',38,100,0,0,15,'None','To explain the theory and use of logic in the description, specification and behaviour of machine processes.<br /><br />To provide insights and skills for dealing with large and infinite objects in a way that allows them to be implemented in a programming environment.<br />',replace('By the end of this course a student should be able to:<ul><li>use formal logic to design, reason about and minimise switching circuits</li>\n<li>write basic programs in assembly language</li>\n<li>understand binary representations of signed and unsigned integers</li>\n<li>write regular expressions to describe sets and build deterministic automata to recognise these sets</li>\n<li>use automata to design and reason about sequential flow systems</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by laboratory classes and group tutorials.Normally 3 hours of lectures and laboratory classes per week.<br /><br /><br />',replace('<ul><li>Rosen: Discrete Mathematics And Its Applications, McGraw Hill, 2006, ISBN 0071244743</li>\n<li>Brookshear: Computer Science An Overview, Addison-Wesley, 2007, ISBN 0321524039</li>\n</ul>','\n',char(10)),'Individual discussion of non-assessed tutorial exercises and discussion of assessed worksheets in small group tutorials.','90% invigilated, closed book     1.5hrs10% coursework<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 1 1/2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,0);
INSERT INTO modules VALUES('CS1890','','Software Design',1,'CS',34,40,0,60,15,'None','The course addresses concepts required for performing software design activities. Core course content aims at interpreting requirements, identifying software components, documenting software design and understanding the various stages of software development, as well as techniques with a focus on software design.',replace('<ul><li>Identify common software requirements and how these map to software components.  They will be able to recognise how these requirements have been discharged in existing systems and critique their effectiveness.</li>\n<li>Understand several techniques and notations that make it possible to document software design.  They will understand that Software Engineering supports communication of design ideas and this will allow them to see how Software Engineering is a team activity.</li>\n<li>Understand the importance of the several activities of a professional software engineer.  This will include techniques from agile software development, but will focus on requirements acquisition and software design.</li>\n<li>Apply several techniques to design software based on user requirements.  They will be able to judge the appropriateness of designs produced using these techniques, both formally and informally.</li>\n<li>Analyse and critique the design of existing software.  This will include the User Experience of software as a measure of its fitness for purpose.</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by laboratory classes. Normally 3-4 hours of lectures and laboratory classes per week. <br />',replace('<ul><li>Shari Pfleeger and Joanne Atlee, Software Engineering: Theory and Practice, Prentice Hall, 4th edition, 2010.</li>\n<li>Martin Fowler, UML distilled: a brief guide to the standard object modelling language, Addison-Wesley, 3rd edition, 2004.</li>\n</ul>','\n',char(10)),'Oral feedback during lab sessions.','40% Invigilated closed book 1.5 hours exam and 60% coursework (several pieces including group and individual work)<br /><br />Details of coursework submission deadlines will be published on the course website at the start of term',replace('Time allowed: 1 1/2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,2);
INSERT INTO modules VALUES('CS2800','','Software Engineering',2,'CS',33,60,0,40,15,'CS1811; CS1812 or CS1813','Introducing software Engineering tools and techniques through practical experience of design and development that enable each individual programmer to contribute effective, working, documented code, as part of a team, in a timely fashion.',replace('By the end of this course a student should be able to:<ul><li>understand the software engineering techniques and managerial discipline required to work as part of a team</li>\n<li>understand and use basic object-oriented concepts</li>\n<li>appreciate the need for program documentation, testing, readability and modifiability</li>\n<li>use appropriate tools to support software development: Version control, programming standards, a modern IDE,</li>\n<li>be able to use test driven development to deliver a small scale project.</li>\n</ul>','\n',char(10)),'Lecture based delivery with class exercises and worksheets. Use of structured practice sessions.Up to 4 hours of lectures per week.',replace('<ul><li>Cary S. Horstmann: Object Oriented Design And Patterns, 2nd Edition, Wiley, 2005, ISBN 978 0471744870</li>\n<li>E. Freeman, E. Freeman: B. Bates and K. Sierra, Head First Design Patterns, O’Reilly, 2004, ISBN 978 0596007126</li>\n</ul>','\n',char(10)),'Feedback will be given based on questions on the Moodle forum and any common mistakes made in coursework.','60% invigilated, closed book   2 hours<br />40% coursework<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,0);
INSERT INTO modules VALUES('CS2810','','Team Project',2,'CS',40,0,0,100,15,'CS1811; CS1812 or CS1813; CS2800',replace('This course aims to assist students in appreciating the role of the computer professional through the practical experience of developing medium scale software as part of a team.<br />\nCourse content:<br />\nThe software lifecycle, including: software development, planning and documentation.<br />\nTeam development, communication, managing risks and conflicts. <br />\nPractical experience of standard industrial software engineering. <br />Agile project management, use of version control in a team, IDEs, etc.<br />\nA medium scale agile software development project, conducted by teams of students.','\n',char(10)),replace('By the end of this course a student should be able to:<ul><li>work in a team to produce a substantial product using software engineering techniques</li>\n<li>apply managerial discipline and a professional attitude.</li>\n<li>understand why project cost and effort is hard to estimate and why project quality is hard to prescribe</li>\n<li>design software following an agile process</li>\n</ul>','\n',char(10)),'Up to 4 hours of sessions per week.<br />',replace('<ul><li>Richard Whitehead: Leading a Software Development Team, Addison Wesley, 2001 ISBN 10: 0201675269</li>\n<li>Cay S. Horstmann: Big Java,4th Edition, Wiley, 2010, ISBN 978 0470553091</li>\n<li>Ken Schwaber: Agile Software Development with Scrum.  Pearson Prentice Hall 2002.    ISBN 978 0132074896</li>\n</ul>','\n',char(10)),'Verbal feedback will be provided during the team meetings. Written feedback based on team deliverables.','100% coursework.<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term.','','ACTIVE',0,0);
INSERT INTO modules VALUES('CS2815','','Small Enterprise Team Project',2,'CS',40,0,0,100,15,'CS1813; CS2800',replace('This course aims to assist students in appreciating the role of the computer professional through the practical experience of developing medium scale software as part of a team.<br /> \nCourse content:<br />\nThe software lifecycle, including: software development, planning and documentation.<br />\nTeam development, communication, managing risks and conflicts. <br />\nPractical experience of standard industrial software engineering. <br />Agile project management, use of version control in a team, IDEs, etc.<br />\nA medium scale agile software development project, conducted by teams of students.<br />\nMeetings with an external customer to determine the requirements for a product.','\n',char(10)),replace('By the end of this course a student should be able to:<ul><li>work in a team to produce a substantial product using software engineering techniques</li>\n<li>apply managerial discipline and a professional attitude.</li>\n<li>understand why project cost and effort is hard to estimate and why project quality is hard to prescribe.</li>\n<li>design software following an agile process</li>\n<li>understand an external customer''s requirements for a software product</li>\n</ul>','\n',char(10)),'Student led team work and meetings with the team supervisor and the client.<br />Up to 4 hours of sessions per week.<br />',replace('<ul><li>Richard Whitehead: Leading a Software Development Team, Addison Wesley, 2001 ISBN 10: 0201675269</li>\n<li>Cay S. Horstmann: Big Java,4th Edition, Wiley, 2010, ISBN 978 0470553091</li>\n<li>Ken Schwaber: Agile Software Development with Scrum.  Pearson Prentice Hall 2002.    ISBN 978 0132074896</li>\n</ul>','\n',char(10)),'Verbal feedback will be provided during the team meetings. Written feedback based on team deliverables.','100% coursework.<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term.','','ACTIVE',0,0);
INSERT INTO modules VALUES('CS2850','','Operating Systems',2,'CS',44,80,0,20,15,'CS1811; CS1812 or CS1813',replace('This course aims to introduce students to the principles of the function and architecture of operating systems, and also to give an understanding of how programs operate at system level. Course content includes: <br />\nIntroductory topics: role of an operating system, computer architecture<br />\nProcesses and threads: process management and scheduling, inter-process comunication, concurrency<br />\nMemory: partitioning, swapping and paging, caching, virtual memory, page replacement algorithms<br />\nFile systems: implementation and maintenance<br />\nUNIX shell: starting programs, input and output streams, pipes, filters, utilities<br />\nSystem-level programming: memory handling, processes, threads, synchronisation, I/O','\n',char(10)),replace('By the end of this course a student should be able to:<ul><li>demonstrate an understanding of the principles of computer operating systems</li>\n<li>evaluate the theory and practice of existing operating systems</li>\n<li>demonstrate a working understanding of program execution, memory hierarchy, and the implementation of data structures</li>\n<li>understand system-level programming aspects such as memory management, interrupts, sockets and basic threading in C</li>\n<li>write simple shell scripts</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by practical sessions. Normally 4 hours of lectures and laboratory classes per week.<br /><br />',replace('<ul><li>Andrew Tanenbaum, Herbert Bos: Modern Operating Systems, Pearson Education Limited, 4th edition, 2015.</li>\n<li>Randal E. Bryant and David R. O’Hallaron, Computer Systems: A Programmer''s Perspective (3rd edition) Pearson, 2015, ISBN 978-0134092669</li>\n<li>W. R. Stevens, S. A. Rago:  Advanced Programming in the UNIX Environment, Addison-Wesley Professional 2005 (2nd Edition)</li>\n<li>Brian W. Kernighan, Dennis M Ritchie: The C programming language, Englewood Cliffs, N. J., Prentice Hall 2nd ed. c1988</li>\n</ul>','\n',char(10)),'Written grades will be given for the assessed assignments.','80% invigilated, closed book  2 hours<br />20% coursework<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term.',replace('Time allowed: 2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,2);
INSERT INTO modules VALUES('CS2855','','Databases',2,'CS',44,70,0,30,15,'CS1811; CS1812 or CS1813',replace('To provide the basic concepts of database technology.<br />\nTo describe the need for database integrity and robustness.<br />\nTo demonstrate the use of a modern database system in a web-based environment.','\n',char(10)),replace('<ul><li>explain the issues involved in database design and the theory of the relational view of data</li>\n<li>describe the crucial issues concerning database integrity and recovery from failure</li>\n<li>write SQL queries</li>\n<li>be familiar with the steps for the design and implementation of a database, from the user specifications to the final design</li>\n<li>implement an interface to an SQL database using an API</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by laboratory classes, guided independent study. Up to 4 hours of lectures and laboratory classes per week<br />',replace('<ul><li>Database Systems Concepts (6th edition) A. Silbertschatz, H.F. Korth, S. Sudarshan McGraw Hill, 2011</li>\n<li>C.J. Date: An Introduction To Database Systems, 8th edition, Addison Wesley, 2003, ISBN 0321197844</li>\n<li>P. Rob and C. Coronel: Database Systems: Design, Implementation, And Management, Course Technology Inc, 2002, ISBN 061906269X</li>\n<li>R. Elmasri and S. Navathe: Fundamentals Of Database Systems, 3rd edition, Addison Wesley, 2000, ISBN 0805317554</li>\n<li>D.M. Kroenke: Database Processing, Prentice Hall, 1997, ISBN 0137378424</li>\n</ul>','\n',char(10)),'Verbal feedback on progress will be given during the weekly laboratory sessions','30% coursework. <br />70%     Invigilated, closed book exam.  <br /><br />Details of coursework submission deadlines will be published on the course webside at the start of term<br />',replace('Time allowed: 2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,2);
INSERT INTO modules VALUES('CS2860','','Algorithms and Complexity',2,'CS',33,90,0,10,15,'CS1811; CS1812 or CS1813; CS1860',replace('The main aim of the course is to teach the design of algorithms and data structures from the point of view of time and space complexity. This includes covering sorting and search algorithms, and graphs. The course content includes the following:<br />\nComplexity: counting, big-O notation, best-case, worst-case and average-case analysis. <br />\nBasic algorithms, sorting and searching part: implementation and analysis of linear search, binary search, and basic sorting algorithms, especially insertion sort, selection sort, merge sort, quick sort, heap sort.<br />\nData structures: binary search trees, balanced binary search trees, hash tables, (binary) heaps.<br />\nAbstract datatypes: Sets, maps, priority queues.<br />\nBasic algorithms, graph algorithms part: adjacency matrix and adjacency list representations; algorithms for connectivity, shortest paths, and spanning trees.','\n',char(10)),replace('By the end of this course a student should be able to:<ul><li>understand and reason about alternative data structure representations, and their use in programs</li>\n<li>implement and reason about alternative implementations for basic algorithms, including graph algorithms</li>\n<li>calculate the complexity of basic algorithms, including graph algorithms</li>\n</ul>','\n',char(10)),'Lecture based delivery.<br />Normally 3 hours of sessions per week.<br />',replace('<ul><li>T.H. Cormen, C.E. Leiserson, R.L. Rivest and C. Stein: Introduction To Algorithms, 3rd Edition, MIT Press, Cambridge MA, 2009, ISBN 0262533058</li>\n<li>R. Sedgewick and K. Wayne: Algorithms, 4th edition, Addison-Wesley Professional 2011, ISBN 032157351X</li>\n<li>S. Skiena: The Algorithm Design Manual, 2nd edition, Springer 2010, ISBN 1849967202</li>\n<li>K. Mehlhorn and P. Sanders: Algorithms and Data Structures: The Basic Toolbox. Springer 2008.<br />\nAvailable at http://www.mpi-inf.mpg.de/~mehlhorn/Toolbox.html</li>\n</ul>','\n',char(10)),'Verbal feedback will be given during the laboratory sessions and feedback provided during lectures.','90% Exam<br />10% Coursework<br /><br />Details of coursework submission deadlines will be published on the course website at the start of term',replace('Time allowed: 2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,0);
INSERT INTO modules VALUES('IY2760','','Introduction to Information Security',2,'CS',33,80,0,20,15,'',replace(' Introduction:  What is security (covering notions of Confidentiality, Integrity, and Availability)?  Security threats and risks.  Security management (ISO/IEC 17799).  Data Protection legislation.\n\nElements of cryptography:  Ciphers (DES/AES).  Message Authentication codes (MACs).  Public key ciphers and digital signatures (RSA).\n\nIdentity verification: use and storage of conventional passwords. Dynamic password schemes. Biometric techniques. Use of tokens (dumb and intelligent), including the use of secure elements such as smart cards and trusted execution environments (TEEs)\n\nAccess control:  Access Control Lists, capabilities, security labels (MAC and DAC), and role-based access control.\n\nCASE STUDY I: electronic payments (EMV). Examine the overall security functionality provided by widely utilised Europay-Mastercard-VISA (EMV) standard.\n\nNetwork security concepts: the concepts of security services and security mechanisms (as in ISO 7498-2) firewalls.\n\nComputer security: viruses, spyware, restricting access.\n\nAuthentication and key distribution: The importance and relatedness of the concepts of key management and entity authentication in a network. Objectives of an entity authentication protocol. Some fundamental protocols (e.g. Kerberos). Using authentication protocols for key distribution, and other approaches to key establishment (including public key certificates and X.509).\n\nCyber Physical security, Examine the security provisions, strengths and weaknesses of existing multi-application smart card platforms and operating systems along with the security of embedded systems and tokens.\n\nCASE STUDY II:  Chip migration for financial institutions. Examine the relevant information security, business, design, architectural and other factors that may influence the adoption of chip card technology by financial institutions.','\n',char(10)),replace('On successful completion of this course, students will be able to:<ul><li>Identify, through the case studies how information security may be influenced by real world design and implementation decisions.</li>\n<li>Appreciate the different cryptographic algorithms, their use, advantages and disadvantages</li>\n<li>Apply the above identified cryptographic primitives in the review and evaluation of cryptographic protocols.</li>\n<li>Identify, through the case studies how information security may be influenced by real world design and implantation decisions.</li>\n<li>Appreciate the rational decisions in the design of a number tokens and secure elements</li>\n</ul>','\n',char(10)),'33 hours of lectures. The coursework is designed to allow students to apply their knowledge to applications with which they are familiar.',replace('<ul><li>The main recommended text for this course is:</li>\n<li>D. Gollmann, Computer Security, John Wiley &amp; Sons, 2005 (2nd edition).</li>\n<li>Useful background:</li>\n<li>C.P. Pfleeger and S. L. Pfleeger, Security in Computing, Prentice Hall, 2006 (4th edition).</li>\n<li>D. Saloman: Elements of Computer Security, Springer 2010</li>\n<li>K. Martin: Everyday Crytography, Oxford University Press 2012</li>\n</ul>','\n',char(10)),'In class verbal feedback.','80% invigilated, closed book  2 hours exam. 20% coursework.<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,0);
INSERT INTO modules VALUES('CS2900','','Multi-dimensional Data Processing',2,'CS',-1,70,0,30,15,'CS1830; CS1860; cannot be taken with MT1820','During this course the student will be introduced to a progression of topics in Linear Algebra, starting from an introduction to vectors and matrices, moving  to Singular Value Decomposition, the solution of linear equations and least squares, and then to eigenvalues and eigenvectors. The emphasis of this course will be computational, and a strong focus will be the Computer Science applications of the theoretical concepts covered.',replace('By the end of this course a student should be able to:<ul><li>Demonstrate an understanding of how to carry out vector operations such as dot product, length etc. on vectors in arbitrary dimensions. Demonstrate an understanding of the geometrical interpretation of vectors in 2 and 3 dimensions, and its applications in computer graphics.</li>\n<li>Demonstrate an understanding of linear transformations and their representation as matrices, of the application of matrices to vectors, and of matrix operations and their interpretation in 2, 3 and higher dimensions.</li>\n<li>Apply concepts  such as  matrix rank, transpose, upper and lower diagonal matrices, orthogonality, trace and symmetry.</li>\n<li>Demonstrate an understanding of Singular Value Decomposition, its numerical stability, and its relationship to the invertibility of a matrix.</li>\n<li>Demonstrate an understanding of the properties of eigenvalues and eigenvectors, and their construction for a given matrix.</li>\n<li>Throughout all the topics, demonstrate an understanding of the application of theoretical concepts and results in various areas of Computer Science.</li>\n</ul>','\n',char(10)),'Lecture based delivery supported by laboratory sessions.<br />Normally 3 hours of sessions per week.<br />',replace('<ul><li>Linear Algebra, A Modern Introduction, 4th Edition, David Poole, ISBN-13 978-1-285-46324-7</li>\n<li>Schaum''s outlines Linear Algebra, Lipschutz and Lipson, McGraw Hill, ISBN-978-0-07-154353-8</li>\n</ul>','\n',char(10)),'Verbal feedback will be given during the laboratory sessions.','70% Exam<br />30% Coursework<br /><br />Details of coursework submission deadlines will be published on the course website at the start of term',replace('Time allowed: 2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,1);
INSERT INTO modules VALUES('CS2910','','Artificial Intelligence',2,'CS',34,70,0,30,15,'None',replace('Artificial Intelligence (AI) is usually defined as the science of making computers do things that require intelligence when done by humans. AI has had some success in limited, or simplified, domains. However,  more recently, successes with developments of AI systems such as game playing and robotics have regenerated optimism concerning the attainment of human-level intelligence in a variety of domains despite the profound difficulty of the problem.<br />\nThe aim of this course  is to introduce students to the basic principles, methods and techniques of AI to provide the foundations for more advanced courses in this area. The course will start by providing an overview of the approaches in the field by referring to the wider historical context in which the AI vision was set and will further motivate the content to be taught by presenting existing and potential applications. After the overview, the course will deliver a series of topics from first principles, including  the role of first-order logic for knowledge representation, computational  reasoning and problem solving systems, the use of search as a capability for exploring alternative solutions, and how AI systems  use knowledge to plan and learn from first principles.<br />\nUpon completion of the course, students should be able to develop intelligent systems by assembling capabilities to concrete computational problems; understand the role of knowledge representation, problem solving, and learning in intelligent-system engineering; and appreciate the role of problem solving, in wide applications that require a basic understanding of human intelligence from a computational perspective.','\n',char(10)),replace('By the end of this course a student should be able to:<ul><li>Use computational logic to model domains and reasoning tasks of an intelligent system</li>\n<li>Understand the role of knowldege representation, problem solving and learning in building domain independent and domain dependent AI capabilities</li>\n<li>Explain conceptual and computational trade-offs between the expressiveness of different representations and capabilities</li>\n<li>Demonstrate how to develop and combine AI capabilities in a suitable programming language</li>\n</ul>','\n',char(10)),'Lecture based delivery supported by laboratory sessions.<br />Normally 2 hours of lectures per week for eleven weeks and 2 hours of labs for six weeks.<br />',replace('<ul><li>Russell and Norvig. Artificial Intelligence: A Modern Approach. 3rd Edition.</li>\n<li>Ivan Bratko. Prolog Programming for Artificial Intelligence 3rd Edition.</li>\n</ul>','\n',char(10)),'Verbal feedback will be given during the laboratory sessions.','70% Exam<br />30% Coursework<br /><br />Details of coursework submission deadlines will be published on the course website at the start of term',replace('Time allowed: 2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,2);
INSERT INTO modules VALUES('IY2840','','Computer and Network Security',2,'CS',33,70,0,30,15,'CS2850','This course is intended to provide a detailed exposition of computer and network security, which will build on knowledge acquired on previous computer science courses.',replace('<ul><li>Identify and exploit the software vulnerabilities that can be introduced into programs through language features and poor programming practice</li>\n<li>Discuss the countermeasures that can mitigate the exploitation of such software vulnerabilities</li>\n<li>Introduce (briefly) malicious software (malware) as a typical consequence of a successful software exploitation</li>\n<li>Provide pointers to/discuss academic and /or industry research-oriented publications on the subject</li>\n</ul>','\n',char(10)),'Lecture based delivery,  guided independent study. Normally 3 hours of lectures per week.',replace('<ul><li>Hacking: The art of exploitation, 2nd edition, Jon Erickson</li>\n</ul>','\n',char(10)),'Verbal feedback will be provided during laboratory sessions.','70% invigilated, closed book  2 hours exam<br /><br />30% coursework.<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,0);
INSERT INTO modules VALUES('CS3001','','Year in Industry',3,'CS',6,0,0,100,30,'','','','','','','','','ACTIVE',0,0);
INSERT INTO modules VALUES('CS3003','','IT Project Management',3,'CS',-1,50,0,50,15,'CS2810 or CS2815',replace('This course aims to assist students in appreciating the complexity of IT projects, and give insight of how these can be managed. <br/>\nCourse content:<br/>\nProject Management (PM) Fundamentals: fundamental definitions and terminology (e.g. Business Case, Project Constraints/Triangle, Portfolios and Programs Vs Projects, inter-alia); Main phases of IT Projects, with emphasis on the basics of requirements elicitation/analysis methods; Unique characteristics of IT projects/products in comparison to other domains; Agile Software Development vis-a-vis “traditional” IT Project Management.<br/>\nBudgeting and Estimation aspects: Investment Appraisal methods (TCO, ROI, NPV); CAPEX/OPEX costs and depreciation; Estimation approaches/methods; Models of S/W acquisition/licensing and common cost elements in IT projects; Basics of Procurement and Contracts Management.<br/>\nProject Organization: Project Governance Structure; Stakeholders Analysis; Role of Project Manager; Best-practices in projects’ organization.<br/>\nBasic Processes of a Project, from initiation to closing, with references to relevant industry standards and frameworks, such as PMI, ISO 21500 and Prince2.<br/>\nProject Planning: main activities and deliverables, with emphasis on techniques and tools such as Breakdown Structures, Network Analysis and Gantt charts; Project Management toolset demo/short lab.<br/>\nProject Monitoring, Control and Implementation Processes: main activities and deliverables, with emphasis on Change Management.<br/>\nFundamentals of Team Management: notion of Team and Team Building (e.g. Tuckman Model); Leadership Styles; Fundamental concepts and best-practices in Project and Team Communications, Decision-making, Conflict resolution, Negotiation, Goal-setting, Time and Meetings management; Important principles and rules of thumb in managing software development teams.<br/>\nProject Risk Management: fundamental concepts and terminology, the risk management process and related artifacts (e.g. risk register); Risk management in IT projects.<br/>\nProject Quality: main concepts, tasks and deliverables on project and product quality aspects; IT systems quality factors and key-metrics; Fundamental aspects of IT Testing; Introduction to ISO Quality Management Systems and quality improvement.<br/>\n The IT Project Manager Skills, Profession and Code of Ethics: introduction and outline of relevant topics.\n','\n',char(10)),replace('By the end of this course a student should be able to:<ul><li>Apply basic project planning techniques</li>\n<li>Demonstrate an understanding of steps needed to build and maintain effective development teams</li>\n<li>Explain the procedures needed to monitor, control and report upon an IT development project</li>\n<li>Discuss and where appropriate apply the principles of project risk management</li>\n<li>Explain the ways in which appropriate quality attributes of the products of an IT development project can be assessed and assured</li>\n</ul>','\n',char(10)),'Lecture based delivery, guided independent study. Normally 3 hours of lectures per week.',replace('<ul><li>Field, Mike and Keller, Laurie, Project Management Open University, International Thomson Press, 1998, ISBN: 1861522746</li>\n<li>Hughes, Bob and Cotterell, Mike, Software Project Management, McGraw-Hill (4th Ed), 2005, ISBN: 0077109899</li>\n</ul>','\n',char(10)),'Verbal feedback during lectures. Written feedback from mandatory assessment','50% Invigilated, closed book exam. 50% coursework.',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,0);
INSERT INTO modules VALUES('CS3110','','Bioinformatics',3,'CS',-1,90,0,10,15,'None','To introduce the main approaches currently in use in bioinformatics, with special emphasis on the analysis of DNA and protein sequences emerging from genome sequencing projects and genome-wide experimental assays.',replace('By the end of this course a student should be able to:<br /><ul><li>assess the main approaches currently in use in bioinformatics;</li>\n<li>demonstrate an understanding of the analysis of DNA and protein sequences.</li>\n</ul>','\n',char(10)),'Lecture based delivery. Normally 3 hours of lectures per week.',replace('<ul><li>Understanding Bioinformatics Marketa Zvalebil, Jeremy O. Baum Garland Science, 2007</li>\n<li>R.Durbin, S.Eddy, A.Krogh, and G.Mitchinson: Biological sequence analysis, Cambridge University Press, 1998 : ISBN-10: 0521629713</li>\n<li>R.Duda,P.Hart,D.Stork: Pattern classification, John Wiley &amp; Sons, 2001:ISBN-10: 0471056693</li>\n<li>B.Levin: Genes VIII, Prentice Hall, 2004: ISBN-10: 0131239244</li>\n<li>A.M.Lesk: Introduction to Bioinformatics, Oxford University Press, 2005: ISBN-10: 0199277877</li>\n</ul>','\n',char(10)),'Lectures in which students work through exercises getting verbal feedback.','90% Invigilated, closed book    2 hours<br />10% Coursework<br /><br />Details of coursework submission deadlines will be published on the course website at the start of term',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,0);
INSERT INTO modules VALUES('CS3220','','Digital Audio and Applications',3,'CS',-1,60,0,40,15,'CS2800','Digital audio has many applications, ranging from music production to audio enhancement, or from noise cancellation in mobile phones to automatic music generations for games. These applications share common features that will be covered in this course. Starting with the fundamentals of sound (nature, transmission, volume), students will then learn how to convert sound to and from the digital domain. Once in the digital domain, audio can be manipulated using algorithms from Digital Signal Processing. The course covers some basic DSP algorithms, engaging the students both in audio analysis (amplitude, frequency, pan, etc.) and audio synthesis (additive , FM, etc.). By the end of this course, students should be able to write simple applications that analyse, manipulate and generate sound. ',replace('By the end of this course a student should be able to:<ul><li>explain digital audio and  the fundamentals of AD/DA conversion</li>\n<li>use Fourier analysis to synthesize and transform sounds in the frequency domain</li>\n<li>demonstrate an understanding lossy and losseless compression algorithms</li>\n<li>explain the basics of digital signal processing (post-processing and effects)</li>\n<li>develop applications of digital audio (music production, noise cancellation, audio enhancement, automatic music generation)</li>\n<li>acquire a basic knowledge of sound perception and psychoacoustics</li>\n</ul>','\n',char(10)),'Up to 4 hours of lectures and laboratory classes per week.',replace('<ul><li>Musimathics, volumes 1 &amp; 2, Gareth Loy, The MIT press, 2011</li>\n</ul>','\n',char(10)),'Verbal feedback during laboratory sessions.','60% invigilated, closed book  2 hours<br />40% coursework<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,4);
INSERT INTO modules VALUES('CS3470','','Compilers and Code Generation',3,'CS',-1,85,0,20,15,'CS1811; CS1812 or CS1813; CS1870','To describe how to construct and implement interpreters and compilers for modern processors',replace('By the end of this course a student should be able to:<ul><li>explain the role and structure of a compiler and the standard stages of compilation</li>\n<li>to build a DFA based lexical analyser for a set of tokens specified using regular expressions</li>\n<li>Advanced students should be able to construct regular expressions, which define specified set of strings</li>\n<li>use grammars to define context free languages and to build parsers for them</li>\n<li>describe syntax directed translators and use them to construct intermediate code</li>\n<li>describe various types of error detection and recovery </li>\n<li>generate three address code from source code.</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by small group tutorials.Normally 3 hours of lectures per week',replace('<ul><li>Aho, Lam, Sethi, Ullman: Compilers: Principles, Techniques, and Tools, Addison Wesley, 2006 ISBN: 10: 0321486811</li>\n<li>J. Tremblay and P.G. Sorenson: The theory and practice of compiler writing, McGraw Hill, 1985,  ISBN 0-07-065161-2</li>\n<li>N. Wirth: Algorithms + Data Structures = Programs, Prentice Hall, 1976.</li>\n</ul>','\n',char(10)),'Return of coursework grades and comments, in-class discussion of coursework solutions','80% invigilated, closed book  2 hours<br />20% coursework<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,0);
INSERT INTO modules VALUES('CS3490','','Computational Optimisation',3,'CS',-1,90,0,10,15,'CS2860',replace('This course will provide students with advanced understanding of fundamental models of computational optimisation (CO) and important algorithms for solving CO problems; enable students to analyse CO algorithms using theoretical and computational methods; and discuss and compare available software packages for solving CO problems.\n\nCourse content:\n\nLinear programming (LP) model. Formulating problems as LP problems.\n\nGraphical solution. Simplex method.\n\nDuality in LP. Decomposition of LP problems. LP software.\n\nInteger Programming (IP). IP models. Branch-and-Bound algorithm.\n\nCO problems. Polynomial-time algorithms. Greedy-type algorithms. Construction heuristics and local search for the TSP.\n\nTheoretical and computational analysis of heuristics and meta-heuristics.','\n',char(10)),replace('By the end of this course a student should be able to:<ul><li>demonstrate an understanding of the basic models of computational optimisation</li>\n<li>apply the basic algorithms for solving computational optimisation problems</li>\n<li>evaluate theoretical and computational methods of analysing computational optimisation algorithms</li>\n<li>use enhanced algorithmic and mathematical skills.</li>\n</ul>','\n',char(10)),'Lecture based delivery.Normally 3 hours of lectures per week plus independent guided study',replace('<ul><li>M.W. Carter and C.C. Price: Operations Research: A practical Introduction, CRC, 2001 (001.424 CAR): ISBN-10: 0849322561</li>\n<li>Z. Michalewicz and D.B. Fogel: How to Solve It: Modern Heuristics, Springer, 2000: ISBN-10: 3540224947</li>\n<li>F. Glover and M. Laguna: Tabu Search, Kluwer, 1997: ISBN-10: 079239965X</li>\n<li>J. Bang-Jensen and G. Gutin: Digraphs: Theory, Algorithms and Applications, Springer, 2000: ISBN-10: 1852336110</li>\n</ul>','\n',char(10)),' ','10% coursework and 90% exam<br />0% coursework<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term ',replace('Time allowed: 2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,0);
INSERT INTO modules VALUES('CS3821','','Full Unit Project',3,'CS',10,0,0,100,30,'','','','','','','','','ACTIVE',1,0);
INSERT INTO modules VALUES('CS3822','','Full Unit Project in Artificial Intelligence',3,'CS',10,0,0,100,30,'','','','','','','','','ACTIVE',1,0);
INSERT INTO modules VALUES('CS3846','','Human-Computer Interaction',3,'CS',44,40,0,60,15,'CS1840 or CS2841','This course introduces human-computer interaction aspects and challenges, and addresses the approaches that can be used to create interfaces matching users'' needs and expectations.',replace('By the end of this course a student should be able to:<ul><li>demonstrate an understanding of what HCI is, its principles, challenges, and teamwork development aspects</li>\n<li>build prototypes using different media and technologies</li>\n<li>evaluate the usability and suitability of user interfaces</li>\n<li>undertake HCI tests, namely Web experiments</li>\n<li>explain how perception and cognition influence HCI</li>\n</ul>','\n',char(10)),'Up to 4 hours of lectures and laboratory classes per week<br />',replace('<ul><li>Alan Dix et al, Human Computer Interaction. 2003.</li>\n<li>Yvonne Rogers et al, Interaction Design: Beyond Human Computer Interaction. 2011.</li>\n<li>Jakob Nielsen, Prioritizing Web usability. 2006.</li>\n<li>Don Norman, The Design of Everyday Things: Revised and Expanded Edition. 2013.</li>\n<li>Eric Freeman. Head First HTML5 Programming. 2011.</li>\n<li>Jon Duckett, JavaScript and jQuery: Interactive Front-End Web Development. 2014.</li>\n</ul>','\n',char(10)),'Verbal feedback on progress will be given during the weekly laboratory sessions','60% coursework.<br />40%     Invigilated, closed book.   2 hours  exam.<br /><br />Details of coursework submission deadlines will be published on the course webside at the start of term<br />',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,4);
INSERT INTO modules VALUES('IY3501','','Security Management',3,'CS',33,100,0,0,15,'',replace('This course will explain the need for effective security management, identify the problems associated with security management, and consider the ways in which various organisations solve these problems. \nThe list of topics may vary slightly to reflect developments in the subject but typically will include: \nWhat is security and is it necessary? \nSecurity management approaches – an overview\nThe role of standards in information security management \nInternal Control, Audit and Security. \nThe role of risk in information security management\nInformation Security, Governance and the Law. \nCase studies in information security management ','\n',char(10)),replace('By the end of the course students should be able to:<ol><li>evaluate security management requirements</li><li>analyse critically alternative security management strategies and methods</li><li>propose effective methods for responding to security management problems</li><li>compare and critically evaluate different approaches to security management</li></ol>\n\n','\n',char(10)),'Lecture based delivery, normally 3 hours per week.',replace('Andy Taylor (ed.), David Alexander, Amanda Finch and David Sutton, Information Security Management Principles, 2nd edition, BCS, 2013.\n\nSteve Purser, A Practical Guide to Managing Information Security, Artech House, 2004.\nISO/IEC 27000 series standards.','\n',char(10)),'Coursework (one per week) (1000 words) - written feedback','Examination - 100% - 2 hours','','ACTIVE',0,0);
INSERT INTO modules VALUES('CS3510','','Functional Programming and Applications',3,'CS',-1,80,0,20,15,'','This course introduces the principles of functional programming (FP). Functional programming has become more and more popular in recent years because it promotes code that’s safe, concise, and elegant, and makes it easier to write parallel code for parallel computing.  You will also study how FP may be combined with other programming paradigms (eg, OOP) in languages such as Scala, a language that fuses FP and OOP in a practical package for applications.',replace('<ul><li>Understand the basic principles of functional programming; its basic ideas, foundations, advantages as compared with imperative programming paradigm</li>\n<li>Master the fundamental programming concepts such as recursion, abstraction, higher-order functions and data types</li>\n<li>Grasp skills in developing elegant, efficient, correct, and reusable programs, using the key features in functional programming languages</li>\n<li> Understand the advantages and disadvantages of different programming paradigms as compared to each other and, on the basis of this, the basic ideas of combining different programming styles in a uniform paradigm</li>\n<li> Understand the basic foundational principles of functional programming and some of the advanced issues such as genericity, polymorphism and typing in functional programming</li> </ul>','\n',char(10)),'Normally 3 hrs per week of lectures and practicals.',replace('<ul><li>M. Odersky, L. Spoon and B. Venners.  Programming in Scala. 2nd ed. Dec 2010.</li>\n<li>S. Thompson. Haskell: The Craft of Functional Programming. 3rd ed. 2012.</li>\n<li>C.S. Horstmann. Scala for the Impatient. Addison-Wesley 2012</li></ul>','\n',char(10)),'Written assignment with written feedback','80% invigilated, closed book  2 hours20% coursework<br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,1);
INSERT INTO modules VALUES('CS3810','','Half Unit Project',3,'CS',-1,-1,-1,-1,15,'','','','','','','','','ACTIVE',1,0);
INSERT INTO modules VALUES('CS3870','','Advanced Algorithms and Complexity',3,'CS',-1,100,0,0,15,'CS1811; CS1812 or CS1813; CS1860; CS2860',replace('The main aim of this course is to build on the knowledge students previously obtained about algorithms and complexity, and introduce them to more advanced topics, with an empahsis on graphs and algorithm design. Content includes:<br />\nGraphs and graph algorithms: directed and undirected graphs; directed acyclic graphs and acyclic orderings; connectivity in directed graphs; applications of graph algorithms. <br />\nAlgorithm design paradigms and their applications: amortised analysis; dynamic programming; divide and conquer; greedy algorithms; backtracking search.<br />\nNP-completeness: basic notions and their interpretation; problem reductions and completeness; ways of dealing with NP-complete problems, including heuristic approaches, exact algorithms, and tractable special cases.','\n',char(10)),replace('By the end of this course a student should be able to:<ul><li>implement and reason about fundamental algorithms for a range of problems</li>\n<li>describe and apply various algorithm design strategies for the construction of efficient algorithms</li>\n<li>understand the significance of NP-complete problems and know ways to deal with them, such as heuristic approaches</li>\n</ul>','\n',char(10)),'Lecture based delivery, guided independent study. Normally 3 hours of lectures per week.',replace('<ul><li>T.H. Cormen, C.E. Leiserson, R.L. Rivest and C. Stein, Introduction to Algorithms, 2nd Ed., MIT Press, Cambridge MA, 2001.</li>\n<li>G. Gutin, Advanced Algorithms, Lecture Notes.</li>\n</ul>','\n',char(10)),'Verbal feedback during lectures. Written feedback from mandatory formative assessment','100% Invigilated, closed book exam.',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,0);
INSERT INTO modules VALUES('CS3920','','Machine Learning',3,'CS',-1,80,0,20,15,'A-level Mathematics','The aim of the course is to acquaint the students with several key methods and techniques of machine learning.  In particular, it will cover the following topics. Nearest neighbours for classification and regression; interesting distances. Conformal prediction and conformalizing nearest neighbours. Ridge regression and Lasso. Inductive conformal predictors and cross-conformal predictors. Support vector machines for classification and regression. Kernel trick and its applications to the algorithms covered so far. Practically useful kernels. Conformalized versions.',replace('<ul><li>Demonstrate knowledge of the theoretical background in machine learning methods.</li>\n<li>Have an understanding of the main advantages and limitations of various approaches to machine learning and specific machine-learning algorithms.</li>\n<li>Be able to implement versions of several machine-learning algorithms.</li>\n<li>Have an understanding of some ways to apply the ideas and algorithms of machine learning in industry, medicine and other fields.</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by laboratory classes.Normally 3 hours of lectures/labs per week.  Guided independent study',replace('<ul>\n<li>Andreas C. Mueller and Sarah Guido (2016) Introduction to Machine Learning with Python. O''Reilly Media</li>\n<li>Vineeth N. Balasubramanian et al. (2014) Conformal Prediction for Reliable Machine Learning. Elsevier</li>\n<li>Gareth James et al. “An introduction to Statistical learning” Springer, 2013</li>\n<li>Trevor Hastie et al. “The elements of Statistical learning”, Springer, 2009</li>\n<li>John Shawe-Taylor and Nello Cristianini: Kernel Methods for Pattern Analysis, Cambridge University Press, 2004: ISBN-10: 0521813972</li>\n<li>Tom M. Mitchell (1997) Machine Learning. McGraw-Hill</li>\n</ul>','\n',char(10)),'In lectures / labs,  Immediate help and verbal feedback','80% exam<br />20% Coursework<br /><br />Details of coursework submission deadlines will be published on the course website at the start of term',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are permitted','\n',char(10)),'ACTIVE',0,1);
INSERT INTO modules VALUES('CS3930','','Computational Finance',3,'CS',-1,80,0,20,15,'A-level Mathematics','To understand the key role played by the advent of derivatives, financial instruments which facilitate managing financial risks.  To understand pricing derivatives (and associated strategies of dynamic hedging) using advanced computational models are required.',replace('By the end of this course a student should be able to:<ul><li>demonstrate an understanding of mathematical and computational models of underlying and derivative securities;</li>\n<li>master techniques for pricing derivatives and for dynamic hedging;</li>\n<li>apply these models and techniques for creating computer programs.</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by practical classes.Normally 3 hours of lectures and laboratory classes per week.',replace('<ul><li>John Hull, Options, Futures and Other Derivatives, 6th edition, Prentice-Hall, 2007.                    </li>\n<li> ISBN-10: 0131977059 (earlier editions starting from the 2nd are acceptable)</li>\n<li>Paul Wilmott Introduces Quantitative Finance, John Wiley, 2001. ISBN-10: 0471498629</li>\n<li>Paul Wilmott, Sam Howison, and Jeff Dewynne, The Mathematics of Financial Derivatives: A Student Introduction, Cambridge University Press, 1995. ISBN-10: 0521497892</li>\n</ul>','\n',char(10)),'Return of grades and written comments on courseof grades and written comments on courswork projecte  submission of courseworkwork project','80% Invigilated, closed book    2 hours – Calculators are permitted20% Coursework<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term ',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are permitted','\n',char(10)),'ACTIVE',0,0);
INSERT INTO modules VALUES('CS3940','','Intelligent Agents and Multi-agent Systems',3,'CS',-1,70,0,30,15,'None',replace('The aims of this course include introducing the students to the concept and design of an agent and multi-agent system, and the main applications for which they are appropriate. In addition, it presents a contemporary platform for implementing agents and multi-agent systems.  Course contents include: <br />\nIntroduction: agents and objects, expert systems, distributed systems; typical application areas for agent systems. <br />\nIntelligent Agents: abstract architectures for agents; tasks for agents, the design of intelligent agents - reasoning agents, agents as reactive systems; hybrid agents (e.g., PRS); layered agents (e.g., Interrap). <br />\nMulti-Agent Systems: classifying multi-agent interactions - cooperative versus non-cooperative; zero-sum and other interactions; cooperation - the Prisoner’s dilemma and Axelrod’s experiments; interactions between self-interested agents: auctions systems; negotiation; argumentation;  interaction languages and protocols: speech acts, KQML/KIF, the FIPA framework, ontologies, coordination languages; interactions between benevolent agents: cooperative distributed problem solving (CDPS), partial global planning; coherence and coordination;  applications of intelligent agents and multi-agent systems.','\n',char(10)),replace('By the end of this course a student should be able to:<ul><li>understand the notion of an agent and understand the characteristics of applications that lend themselves to an agent-oriented solution</li>\n<li>understand the key issues associated with constructing agents capable of intelligent autonomous action</li>\n<li>understand the key issues in designing societies of agents that can effectively cooperate in order to solve problems</li>\n<li>understand the main application areas of agent-based solutions, and be able to develop a meaningful agent-based system</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by tutorial sessions.Normally 3 hours of sessions per week.',replace('<ul><li>M. Wooldridge: An Introduction to MultiAgent Systems. John Wiley &amp; Sons (2nd edition) 2009: ISBN 978-0-470-51946-2</li>\n<li>G. Weiss, editor: Multi-Agent Systems, A Modern Approach to Distributed Artificial Intelligence. The MIT Press, 1999:  ISBN-10: 0262232030</li>\n<li>J. Ferber: Multi-Agent Systems. Addison-Wesley, 1999: ISBN-10: 0201360489</li>\n<li>M. Singh and M. Huhns: Readings in Agents. Morgan-Kaufmann Publishers, 1997: ISBN-10: 1558604952</li>\n</ul>','\n',char(10)),'Verbal feedback provided through the tutorial sessions.','70% Invigilated, closed book      2  hours<br />30% Coursework<br /><br />Details of coursework submission deadlines will be published on the course website at the start of term',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,0);
INSERT INTO modules VALUES('CS3945','','Semantic Web',3,'CS',-1,-1,-1,-1,15,'C1840 or CS2841 (or equivalent)',replace('The Web, as it exists today, primarily supports human understanding and the interpretation of the vast information space it encompasses. However the Web was originally designed with a goal to support not only human-human communication but also as one that would enable automated machine processing of data with minimal human intervention. The Semantic Web is Tim Berners-Lee''s vision of a machine understandable and unambiguously computer interpretable Web. The rationale behind such a system is that most of the data currently posted on the web is buried in HTML files suitable for human reading and not for computers to manipulate meaningfully. The semantic Web, an extension of the current web, can be thought of as a globally linked database where information is given well-defined meaning using metadata for better enabling computers and humans to work in close cooperation. The realisation of a Semantic Web will thus make machine reasoning more ubiquitous and powerful, creating an environment where intelligent software agents can roam, carrying out sophisticated tasks for their users.\n\nThough the original motivation of the semantic web was to constitute the next generation of the WWW, the standards and technologies developed in the process have been found useful in specific realm enterprises as well. From this perspective the Semantic Web can be viewed as a semantically-rich data model that is more expressive than the usual relational data model used in standard databases systems, and is also more adequate to distributed and incomplete resources.\n\nThis course is about the notions, concepts, technologies and modelling techniques that constitute the Semantic Web, whose key distinguishing characteristics will be the support for and use of semantics in new, more effective, more intelligent, ways of managing information and supporting applications.','\n',char(10)),replace('By the end of the course students should be able to:<ol><li>explain fundamental concepts, and standards of the semantic web</li><li>demonstrate a deep understanding of the use of standards such as RDF, RDFS and OWL for modeling different scenarios and reasoning</li><li>demonstrate a deep understanding of underlying logical theory behind the semantic web, for example Description Logic</li></ol>\n\n','\n',char(10)),replace('22 hours lectures\n5 hours laboratory classes','\n',char(10)),replace('Semantic Web for the Working Ontologist (Effective Modeling in RDFS and OWL) 2nd Edition, By Dean Allemang, James Hendler, Elsevier / Morgan Kaufmann, July 2011. \n\nA Semantic Web Primer (Cooperative Information Systems), 3rd Ed., by Grigoris Antoniou (Author), Paul Groth (Author) et al., 2012.\n\nSemantic Web Programming, John Hebeler, Matthew Fisher, Ryan Blace, Andrew Perez-Lopez, Wiley Publishing, Inc, 2009','\n',char(10)),'Lab Sessions',replace('Set Exercises (1200 Minutes) - 20% \nExamination (120 Minutes) - 80%','\n',char(10)),'','ACTIVE',0,0);
INSERT INTO modules VALUES('IY3821','','Full Unit Project in Information Security',3,'CS',10,0,0,100,30,'','','','','','','','','ACTIVE',1,0);
INSERT INTO modules VALUES('IY3606','','Smart Cards/Token Security and Applications',3,'CS',-1,-1,-1,-1,15,'IY2760 or equivalent',replace('Students will have developed a mastery of the topic of smart cards and token security. \nCourse contents:\nIntroduction to Smart Cards/Chips &amp; RFID/NFC; Assets for Cyber Security\nSmart Cards – Trusted Production Environment			\nOperating systems, Interoperability and Security			\nApplications &amp; Security for Mobile Communications, USIM/SIM, Services and Clouds\nSmart Cards for Secure Banking &amp; Finance			\nSmart Cards in eIDs/Passports - &amp; RFIDs/NFC explained	\nAdvances in Smart Chips/Tokens, and Transport System Case Study	\nCommon Criteria and Smart Cards			\nSecurity Attacks, Countermeasures and Testing for Smart Cards/RFIDs/NFC\nApplication Development Environments for JAVA and SIM Toolkit	\nComparing Alternative Security Tokens/Environments; including TPM and TEE','\n',char(10)),replace('<ul>\n<li>identify constituent components, analyse strengths and weaknesses, identify new applications of smart cards/security tokens and their use as assets in cyber security; identify the steps in the manufacturing/personalisation processes, analyse and evaluate potential risks and compare security safeguards</li>\n<li>identify and compare the systems in use, analyse the strengths and weaknesses and evaluate interoperability and security issues; analyse the range of capabilities of SIM/USIM cards in Smartphones and apply them to new service ideas, evaluate the possible range of services and security measures</li>\n<li>understand the main standards and applications of smart cards for banking and finance, compare with earlier card solutions and analyse strengths and weaknesses of approaches; analyse the key role of the smart card/RFID for passports, IDs and satellite TV, evaluate the security measures that have protected past and current cards,</li>\n<li>identify and describe new technologies, including NFC, TPM, TEE; and apply them to new applications and evaluate the likely suitability/success of approach; explain how common criteria may affect smart card design/development, analyse the different approaches and compare with less formal methods</li>\n<li>identify and describe the classes of attack and notable methods within each class, analyse countermeasures and evaluate practicality of attacks and the effects on cyber security; identify, compare and  evaluate	different methods of developing applications for smart cards, and understand the development cycle and the use of practical tools</li>\n<li>analyse the issues concerning smart card lifecycle management, and evaluate and compare methods of local and remote card management</li>\n</ul>','\n',char(10)),'Lecture based delivery. Normally 3 hour of lectures per week.',replace('<ul><li>Keith Mayes, Konstantinos Markantonakis, “Smart Cards, Tokens, Security and</li>\n<li>Applications”, Springer-Verlag New York, January 2008, ISBN: 0387721975</li>\n<li>W. Rankl and W. Effing – “Smart card handbook” 2nd edition John Wiley 1997</li>\n<li>Klaus Finkenzeller, “The RFID Handbook”, John Wiley and Sons 2003</li>\n<li>Zhiqun Chen, “Java Card Technology for Smart Cards”, Addison- Wesley 2000.</li>\n<li>Keith Mayes, Konstantinos Markantonakis, “Secure Smart Embedded Devices, Platforms and Applications”, Springer-Verlag New York, 2013, ISBN 978-1-4614-7914-7</li>\n</ul>','\n',char(10)),'Oral feedback during lectures.','100% Exam 2 hours calculators not permitted, individual.','','ACTIVE',0,0);
INSERT INTO modules VALUES('IY3609','','Digital Forensics',3,'CS',-1,-1,-1,-1,15,'IY2760 or equivalent',replace('Introduction to forensic science, steps from collecting data to preserving evidence, and a framework for digital forensic evidence collection and processing.\nFundamentals of host forensics for Microsoft Windows, including kernel architecture, device driver architecture, registry, auditing, and security architecture, file system handling, and reconstruction of file and directory structures on the FAT and NTFS file system families.\nFundamentals of host forensics for Unix derivatives using the Linux operating system as an exemplar, including kernel and device driver architecture, security and audit mechanisms, file systems and pseudo file systems, and the reconstruction of file and directory structures using UFS and Ext2/3fs as exemplars.\nFoundations of network forensics from data capturing and collection to network file systems and supplementary protocols as well as selected application-layer protocols and techniques used for identifying and reverse-engineering protocols used on networks.	\nIntroduction to malware including anti-forensics and propagation techniques.\nIntroduction to steganographic techniques for images, video, textual data, and audio as well as steganalytical techniques for selected media types and approaches to traitor tracing.\nA survey of non-standard storage mechanisms from retention characteristics to mobile and smart phones and vehicular systems as well as network-based search and storage mechanisms.','\n',char(10)),replace('<ul>\n<li>understand the concepts of audit and indirect activity records retained by operating systems, particularly in file systems, and  how to retrieve such information</li>\n<li>understand selected network protocols and the collection and derivation of evidence leading to the reconstruction of system and user activity based on network trace information</li>\n<li>understand infiltration and anti-forensics techniques used particularly by malicious software</li>\n<li>apply steganographic and particularly steganalytical methods for different types of media</li>\n<li>understand the retention characteristics of storage systems and non-standard devices such as mobile/smart phones, cloud computing, and vehicular systems</li>\n</ul>','\n',char(10)),'Lecture based delivery. Normally 3 hour of lectures per week.',replace('<ul><li>K.J. Jones, R. Bejtlich, C. W. Rose: Real Digital Forensics. Addison-Wesley, 2006</li>\n<li>B. Carrier: File System Forensic Analysis. Addison-Wesley, 2005</li>\n<li>D. P. Bovet, M. Cesati: Understanding the Linux Kernel, 3rd ed. O’Reilly, 2006</li>\n<li>M. Russinovich, D.A. Soiomon, A. Ionescu: Windows Internals, 5th ed. Microsoft Press, 2008</li>\n</ul>','\n',char(10)),'Oral feedback during lectures.','100% Exam 2 hours calculators not permitted, individual.','','ACTIVE',0,0);
INSERT INTO modules VALUES('IY3612','','Cyber Security',3,'CS',-1,-1,-1,-1,15,'IY2760 or equivalent',replace('Week 1: Introduction\nWeek 2: Networks and dependencies\nWeek 3: Critical infrastructures and interdependencies\nWeek 4: Security of Cyber-Physical Systems\nWeek 5: Control systems security\nWeek 6: Advanced persistent threats\nWeek 7: Attack modelling techniques\nWeek 8: System assurance\nWeek 9: Incident response mechanisms\nWeek 10: Offensive cyber operations\nWeek 11: Future challenges','\n',char(10)),replace('<ul>\n<li>have an understanding of network robustness and failures, together with key underlying theoretical concepts</li>\n<li>understand critical (information) infrastructures, vulnerabilities, and their dependencies</li>\n<li>appreciate the specific security problems of cyber-physical including SCADA systems and selected infrastructure</li>\n<li>understand complex attacks, analytical models for such attacks, and assurance mechanisms</li>\n</ul>','\n',char(10)),'Lecture based delivery. Normally 3 hour of lectures per week.',replace('<ul><li>J Lopez, R Setola, S Wolthusen (edsCritical Information Infrastructures Vol. 7130 of Lecture Notes in Computer Science. Springer-Verlag, 2012</li>\n</ul>','\n',char(10)),'Oral feedback during lectures.','100% Exam 2 hours calculators not permitted, individual.','','ACTIVE',0,0);
INSERT INTO modules VALUES('IY3660','','Applications of Cryptography',3,'CS',33,80,0,20,15,'IY2760','The aim of this module is to explain the fundamentals behind cryptography and how it is deployed in real systems.',replace('On successful completion of this course, students will be able to:<ul><li>Appreciate the full range of security services that can be provided by cryptography</li>\n<li>Compare a number of different cryptographic mechanisms that can be used to provide these security services</li>\n<li>Explain the full nature of the architecture within which cryptography is deployed in a security system</li>\n<li>Identify appropriate cryptographic standards that should be followed when implementing cryptography</li>\n<li>Explain the rationale for the design decisions taken in a number of widely deployed cryptographic systems</li>\n</ul>','\n',char(10)),'Up to 3-4 hours of lectures and laboratory sessions per week.',replace('<ul><li>D.R. Stinson, Cryptography: Theory and Practice, CRC Press</li>\n<li>K.M. Martin: Everyday Cryptography, OUP.</li>\n<li>A. Dent and C.J. Mitchell: A users’ Guide to Cryptography Standards, Artech House</li>\n<li>C. Paar and J. Pelzl, Understanding Cryptography, Springer</li>\n<li>J. Katz and Y. Lindell, Introduction to Modern Cryptography, CRC Press</li>\n<li>N. Ferguson, B. Schneier and T. Kohno, Cryptography Engineering, Wiley</li>\n</ul>','\n',char(10)),'Verbal feedback will be provided during laboratory sessions.','80% invigilated, closed book exam. 20% coursework.<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,1);
INSERT INTO modules VALUES('IY3840','','Malicious Software',3,'CS',33,70,0,30,15,'IY2760 and IY2840',replace('Cybercrime has become both more widespread and harder to battle. Researchers and anecdotal experience show that the cybercrime scene is becoming increasingly organized and consolidated, with strong links also to traditional criminal networks. Modern attacks are indeed stealthy and often profit oriented.\nMalicious software (malware) is the traditional way in which cybercriminals infect user and enterprise hosts to gain access to their private, financial, and intellectual property data. Once stolen, such information can enable more sophisticated attacks, generate illegal revenue, and allow for cyber-espionage.\nBy mixing a practical, hands-on approach with the theory and techniques behind the scene, the course discusses the current academic and underground research in the field, trying to answer the foremost question about malware and underground economy, namely, "Should we care?".\nStudents will learn how traditional and mobile malware work, how they are analyzed and detected, peering through the underground ecosystem that drives this profitable but illegal business. Understanding how malware operates is of paramount importance to form knowledgeable experts, teachers, researchers, and practitioners able to fight back. Besides, it allows us to gather intimate knowledge of the systems and the threats, which is a necessary step to successfully devise novel, effective, and practical mitigation techniques.','\n',char(10)),replace('On successful completion of this course, students will be able to:<ul><li>Comprehend what malicious software is</li>\n<li>Understand the malware landscape of the early days and what efforts and challenges the AV industry was facing to fight malware threats; (basic) static analysis to analyze and detect malware; (basic) assembly and reverse engineering notions are provided</li>\n<li>Explain dynamic analysis. Packing and algorithmic-agnostic unpacking is introduced as an initial step toward full dynamic analysis; sandboxes and limits of dynamic analysis and sandboxes.</li>\n<li>Describe and explain the underground economy and cybercrime that surrounds malicious software</li>\n<li>Demonstrate a critical appreciation of some of the newer research trends that are likely to influence software security work in the coming years</li>\n</ul>','\n',char(10)),'Up to 3-4 hours of lectures and laboratory sessions per week.',' ','Verbal feedback will be provided during laboratory sessions.','60% invigilated, closed book exam. 40% coursework.<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term','','ACTIVE',0,1);
INSERT INTO modules VALUES('CS3480','','Software Language Engineering',3,'CS',-1,80,0,20,15,'CS1811; CS1812 or CS1813; CS2810 or CS2815',' ',replace('<ul><li>understand domain specific language design and implementation</li>\n<li>learn the significance of DSL’s and meta-modelling in advanced software engineering</li>\n<li>design and implement small specialised languages</li>\n</ul>','\n',char(10)),'Up to 3 hours of lectures and laboratory sessions per week.',replace('<ul><li>Software Language Engineering: Creating Domain-Specific Languages Using Metamodels, Anneke Kleppe,Addison-Wesley Professional, 2008, ISBN-10:0-321-55345-4</li>\n<li>Metamodelling for software engineering Cesar Gonzalex-Perez, Brian Henderson-Sellers, wiley Agust 2008, ISBN 978-0-470-03036-3</li>\n</ul>','\n',char(10)),'Verbal feedback will be provided during laboratory sessions.','80% invigilated, closed book  2 hours exam.<br />20% coursework.<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,1);
INSERT INTO modules VALUES('CS4001','','Year in Industry',4,'CS',6,0,0,100,30,'','','','','','','','','ACTIVE',0,NULL);
INSERT INTO modules VALUES('CS4200','','On-line Machine Learning ',4,'CS',-1,80,0,20,15,'Working knowledge of a programming language with good data manipulation and visualisation capabilities, such as MATLAB, R, or Python.','The course addresses the on-line framework of machine learning in which the learning system learns and issues predictions or decisions in real time, perhaps in a changing environment. The course teaches protocols, methods and applications of on-line learning.',replace('<ul><li>understand and evaluate probabilistic and non-probabilistic on-line learning protocols;</li>\n<li>demonstrate advanced understanding of the prediction with expert advice and reinforcement learning frameworks;</li>\n<li>demonstrate advanced knowledge of methods of Markov models, time series, prediction with expert advice and reinforcement learning;</li>\n<li>analyse the properties of on-line learning algorithms;</li>\n<li>apply on-line algorithms to real-world data and evaluate the results.</li>\n</ul>','\n',char(10)),'Lecture based delivery support by practical classes, guided independent study.Normally 4-5 hour of lectures / practical classes per week.',replace('<ul><li>C. Bishop, Pattern Recognition and Machine Learning, Springer, 2006.</li>\n<li>D. Barber, Bayesian Reasoning and Machine Learning, Cambridge, 2012.</li>\n<li>R. H. Shumway and D. S. Stoffer Time Series Analysis and Its Applications With R Examples, 3rd ed., Springer 2011.</li>\n<li>N. Cesa-Bianchi and G. Lugosi. Prediction, Learning, and Games. Cambridge University Press, 2006.</li>\n<li>R.S.Sutton and A.G.Barto. Reinforcement learning: an introduction, MIT Press, 1998.</li>\n</ul>','\n',char(10)),'Oral feedback in practical classes / lab sessions. Written feedback on coursework assignment.','80% examination<br />20% coursework<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are permitted','\n',char(10)),'ACTIVE',0,2);
INSERT INTO modules VALUES('CS4250','','Visualisation and Exploratory Analysis',4,'CS',-1,-1,-1,-1,15,'','','','','','','','','ACTIVE',0,1);
INSERT INTO modules VALUES('CS4504','','Business Intelligence Systems, Infrastructures and Technologies',4,'CS',-1,60,0,40,15,'CS2855',replace('Business Intelligence (BI) refers to the skills, processes, methodologies, technologies, applications, and practices used in order to leverage (gathering, storing, analyzing) an organization''s internal and external information assets to support and improve decision-making. With the advent of Big-Data there is considerably increased demand for skills and knowledge, both conceptual and technological, that can be effectivelly applied to support this new era of Big-Data based decision-making.<br />\n<br />\nThis course aims to provide students with \n(a) a broad understanding of the information assets and the conceptual and technical architectures of information and business intelligence systems in modern organizations <br />\n(b) the necessary background knowledge of, and skills to design, implement and evaluate business intelligence systems and technologies.  <br /><br />\nCourse Content includes the following topics: <br />\nIntroduction to Information Systems &amp; Business Intelligence: Overview of Information Systems and BI Systems, Information Systems and BI Technical Architectures (Logical &amp; Physical aspects), Acquisition models and Business cases.<br />\nData Warehousing and Dimensional Modelling (Defintions, Concepts, Architectures, Design Processes, Implementation Aspects)<br />\nBI Applications: OLAP, Reports, Dashboards, Data Mining, Visualization and UI design<br />\nPractical Sessions (Surgeries, Labs) on Dimensional Modelling, Reports and Dashboards using BI tools.  ','\n',char(10)),replace('By the end of the course students should be able to:\n<ul><li>demonstrate a holistic view of business intelligence systems and their role in the IT environment of modern organizations</li>\n<li>understand end evaluate the concepts, terminology and architectures of Data Warehouses and BI solutions</li>\n<li>understand Data Modelling concepts and provide design solutions using Dimensional Modeling</li>\n<li>know the important elements of business intelligence applications such as Data Analysis, Data Mining and Dashboards; understand and evaluate BI Visualization aspects and the relationship of BI solutions to CRM and ERP systems</li>\n<li>use industrial business intelligence tools</li>\n</ul>','\n',char(10)),'The course will be taught in weekly sessions over the course of a term.',replace('Core reading material:\n<ul><li>R. Sherman: "Business Intelligence Guidebook, From Data Integration to Analytics", 1st edition, 2014.</li>\n<li>E.Turban, R.Sharda, D.Delen, D. King: “Business Intelligence: A Managerial Approach”, 2nd edition, 2011.</li>\n<li>R.Kimball, M. Ross:  “The Data Warehouse Toolkit, The Complete Guide to  Dimensional Modeling”, 2nd edition, 2001.</li></ul>','\n',char(10)),'The lecturers will provide oral feedback during practical sessions and written feedback to coursework.','The assessment of this course involves one examination counting for 60% of the total mark and practical coursework carrying the remaining 40%.',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,0);
INSERT INTO modules VALUES('CS4950','','Deep Learning',4,'CS',-1,80,0,20,15,'CS2900',replace('The aim of the course is to give students an introduction to deep learning that covers neural network optimisation by gradient descent from first principles, and which also gives a broader introduction to a range of advanced architectures, with hands-on implementation.<br />\n<br />\nThe course starts by considering models of artificial neural networks for supervised learning, and introduces notions of activation function, loss function, and computation of loss-gradients using back-propagation with the chain rule. Neural network learning with back-propagation and different gradient descent algorithms will be covered in detail, and visualised in lab-sessions. Next, the ''disappearing gradient'' problem in deep architectures will be raised, and methods for resolving this problem will be discussed. A range of deep architectures will be described for discriminative learning, generative learning and learning of representations, and for reinforcement learning.  Students will implement a deep architecture using a toolkit in a project assignment at the end of the course. \n    ','\n',char(10)),replace('By the end of this course a student should be able to:<ul><li> Demonstrate an advanced understanding of the notions of an artificial neural network, and of learning by minimising a loss function, using training, validation, and test data sets.</li>\n<li>Master computation of loss-gradients for different neural network architectures, and of  a range of algorithms for optimisation by gradient descent, as applied in neural networks.  </li>\n<li>Demonstrate a good comparative understanding of  a range of deep learning architectures.</li>\n<li>Master the basic techniques necessary for gradient optimisation of deep networks, and of some diagnostics needed for determining whether gradient descent is working correctly. </li>\n<li>Apply deep learning algorithms to real-world data and evaluate the results.</li>\n<li>Implement and run deep learning algorithms using appropriate tool-kits.</li>\n</ul>','\n',char(10)),'Lecture based delivery supported by laboratory sessions.<br />Normally 4 hours of sessions per week.<br />',replace('<ul><li>Deep Learning, by Ian Goodfellow, Yoshua Bengio, and Aaron Courville, MIT Press Dec 2016 (already available on web)</li>\n<li>The course will make extensive use of notes, handouts, and freely available material on the web , which is abundant and rapidly changing.</li>\n</ul>','\n',char(10)),'Verbal feedback will be given during the laboratory sessions.','80% Exam<br />20% Coursework<br /><br />Details of coursework submission deadlines will be published on the course website at the start of term',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,2);
INSERT INTO modules VALUES('IY4500','','MSci Project in Information Security',4,'CS',10,0,0,100,60,'','','','','','','','','ACTIVE',1,0);
INSERT INTO modules VALUES('IY4501','','Security Management',4,'CS',33,100,0,0,15,'Cannot be taken by students who took IY3501',replace('This course will explain the need for effective security management, identify the main elements of security management, and consider the ways in which organisations implement security management.  The list of topics may vary slightly to reflect developments in the subject but typically will include:<ul><li>What is information security management and is it necessary?</li>\n<li>The role of standards in information security management, with emphasis on the ISO/IEC 27000 series.</li>\n<li>Security controls and ISO/IEC 27002.</li>\n<li>Information security risk management.</li>\n<li>Legal and regulatory aspects of information security.</li>\n<li>Internal control, audit and security.</li>\n<li>Incident management and disaster recovery.</li>\n<li>Staff management.</li>\n<li>Procedural issues.</li>\n<li>Failures in information security management.</li>\n<li>Case studies in information security management</li> </ul> ','\n',char(10)),replace('<ul>\n<li>analyse information security risks, strategies and methods</li>\n<li>evaluate security management requirements</li>\n<li>define security treatments to meet identified requirements</li>\n<li>perform ongoing security functions, including internal and external audit</li> </ul>','\n',char(10)),'Lecture based delivery. Normally 3 hour of lectures per week.',replace('<ul>\n<li>Andy Taylor (ed.), David Alexander, Amanda Finch and David Sutton, Information Security Management Principles, 2nd edition, BCS, 2013.</li>\n<li>Steve Purser, A Practical Guide to Managing Information Security, Artech House, 2004.</li>\n<li>ISO/IEC 27000 series standards.</li> </ul>','\n',char(10)),'Feedback on formative coursework.','100% Exam.','','ACTIVE',0,0);
INSERT INTO modules VALUES('IY4523','','Secure Business Architectures',4,'CS',30,100,0,0,15,'',replace('The high level aim of this course is to discuss the appropriate system design and business response to technical/architectural decisions which impact the security of the organisation’s information. \nThe content of the course will include: \nIntroduce the concept of a security development lifecycle \nAn overview of the basics of Risk Assessment \nElaborate on the Governance, Risk and Compliance issues discussed in the Security Management module \nOutsourcing/Cloud Computing architectures \nIdentity Management \nThe Payment Card Industry – Data Security Standard \nSupply Chain Security \nBig Data \n','\n',char(10)),replace('<ul>\n<li>understand, and be able to apply, the concept of a “security lifecycle” in relation to specific security architectures</li>\n<li>understand, and be able to outline the high-level components of a Risk Assessment and apply these components to candidate security architectures.</li>\n<li>appreciate the Governance, Risk and Compliance issues related to business architectures</li>\n<li>apply these to a number of architectures, such as: Identity Management; Outsourcing; PCI-DSS; Supply Chain</li>\n</ul>','\n',char(10)),'Lecture based delivery. Normally 3 hour of lectures per week.','The course will not follow any individual text book, but is likely to make use of: international standards; industry white papers and research reports; case studies using common industry architectures.','Oral feedback during lectures.','100% Exam 2 hours calculators not permitted, individual.','','ACTIVE',0,0);
INSERT INTO modules VALUES('IY4606','','Smart Cards/Token Security and Applications',4,'CS',-1,-1,-1,-1,15,'IY2760 or equivalent; Cannot be taken by students who took IY3606.',replace('Students will have developed a mastery of the topic of smart cards and token security. \nCourse contents:\nIntroduction to Smart Cards/Chips &amp; RFID/NFC; Assets for Cyber Security\nSmart Cards – Trusted Production Environment			\nOperating systems, Interoperability and Security			\nApplications &amp; Security for Mobile Communications, USIM/SIM, Services and Clouds\nSmart Cards for Secure Banking &amp; Finance			\nSmart Cards in eIDs/Passports - &amp; RFIDs/NFC explained	\nAdvances in Smart Chips/Tokens, and Transport System Case Study	\nCommon Criteria and Smart Cards			\nSecurity Attacks, Countermeasures and Testing for Smart Cards/RFIDs/NFC\nApplication Development Environments for JAVA and SIM Toolkit	\nComparing Alternative Security Tokens/Environments; including TPM and TEE','\n',char(10)),replace('<ul>\n<li>identify constituent components, analyse strengths and weaknesses, identify new applications of smart cards/security tokens and their use as assets in cyber security; identify the steps in the manufacturing/personalisation processes, analyse and evaluate potential risks and compare security safeguards</li>\n<li>identify and compare the systems in use, analyse the strengths and weaknesses and evaluate interoperability and security issues; analyse the range of capabilities of SIM/USIM cards in Smartphones and apply them to new service ideas, evaluate the possible range of services and security measures</li>\n<li>understand the main standards and applications of smart cards for banking and finance, compare with earlier card solutions and analyse strengths and weaknesses of approaches; analyse the key role of the smart card/RFID for passports, IDs and satellite TV, evaluate the security measures that have protected past and current cards</li>\n<li>identify and describe new technologies, including NFC, TPM, TEE; and apply them to new applications and evaluate the likely suitability/success of approach; explain how common criteria may affect smart card design/development, analyse the different approaches and compare with less formal methods</li>\n<li>identify and describe the classes of attack and notable methods within each class, analyse countermeasures and evaluate practicality of attacks and the effects on cyber security; identify, compare and  evaluate	different methods of developing applications for smart cards, and understand the development cycle and the use of practical tools</li>\n<li>analyse the issues concerning smart card lifecycle management, and evaluate and compare methods of local and remote card management</li>\n</ul>','\n',char(10)),'Lecture based delivery. Normally 3 hour of lectures per week.',replace('<ul><li>Keith Mayes, Konstantinos Markantonakis, “Smart Cards, Tokens, Security and</li>\n<li>Applications”, Springer-Verlag New York, January 2008, ISBN: 0387721975</li>\n<li>W. Rankl and W. Effing – “Smart card handbook” 2nd edition John Wiley 1997</li>\n<li>Klaus Finkenzeller, “The RFID Handbook”, John Wiley and Sons 2003</li>\n<li>Zhiqun Chen, “Java Card Technology for Smart Cards”, Addison- Wesley 2000.</li>\n<li>Keith Mayes, Konstantinos Markantonakis, “Secure Smart Embedded Devices, Platforms and Applications”, Springer-Verlag New York, 2013, ISBN 978-1-4614-7914-7</li>\n</ul>','\n',char(10)),'Oral feedback during lectures.','100% Exam 2 hours calculators not permitted, individual.','','ACTIVE',0,0);
INSERT INTO modules VALUES('IY4609','','Digital Forensics',4,'CS',-1,-1,-1,-1,15,'IY2760 or equivalent; Cannot be taken by students who took IY3609.',replace('Introduction to forensic science, steps from collecting data to preserving evidence, and a framework for digital forensic evidence collection and processing.\nFundamentals of host forensics for Microsoft Windows, including kernel architecture, device driver architecture, registry, auditing, and security architecture, file system handling, and reconstruction of file and directory structures on the FAT and NTFS file system families.\nFundamentals of host forensics for Unix derivatives using the Linux operating system as an exemplar, including kernel and device driver architecture, security and audit mechanisms, file systems and pseudo file systems, and the reconstruction of file and directory structures using UFS and Ext2/3fs as exemplars.\nFoundations of network forensics from data capturing and collection to network file systems and supplementary protocols as well as selected application-layer protocols and techniques used for identifying and reverse-engineering protocols used on networks.	\nIntroduction to malware including anti-forensics and propagation techniques.\nIntroduction to steganographic techniques for images, video, textual data, and audio as well as steganalytical techniques for selected media types and approaches to traitor tracing.\nA survey of non-standard storage mechanisms from retention characteristics to mobile and smart phones and vehicular systems as well as network-based search and storage mechanisms.','\n',char(10)),replace('<ul>\n<li>understand the concepts of audit and indirect activity records retained by operating systems, particularly in file systems, and  how to retrieve such information</li>\n<li>understand selected network protocols and the collection and derivation of evidence leading to the reconstruction of system and user activity based on network trace information</li>\n<li>understand infiltration and anti-forensics techniques used particularly by malicious software</li>\n<li>apply steganographic and particularly steganalytical methods for different types of media</li>\n<li>understand the retention characteristics of storage systems and non-standard devices such as mobile/smart phones, cloud computing, and vehicular systems</li>\n</ul>','\n',char(10)),'Lecture based delivery. Normally 3 hour of lectures per week.',replace('<ul><li>K.J. Jones, R. Bejtlich, C. W. Rose: Real Digital Forensics. Addison-Wesley, 2006</li>\n<li>B. Carrier: File System Forensic Analysis. Addison-Wesley, 2005</li>\n<li>D. P. Bovet, M. Cesati: Understanding the Linux Kernel, 3rd ed. O’Reilly, 2006</li>\n<li>M. Russinovich, D.A. Soiomon, A. Ionescu: Windows Internals, 5th ed. Microsoft Press, 2008</li>\n</ul>','\n',char(10)),'Oral feedback during lectures.','100% Exam 2 hours calculators not permitted, individual.','','ACTIVE',0,0);
INSERT INTO modules VALUES('IY4612','','Cyber Security',4,'CS',-1,-1,-1,-1,15,'IY2760 or equivalent; Cannot be taken by students who took IY3612.',replace('Week 1: Introduction\nWeek 2: Networks and dependencies\nWeek 3: Critical infrastructures and interdependencies\nWeek 4: Security of Cyber-Physical Systems\nWeek 5: Control systems security\nWeek 6: Advanced persistent threats\nWeek 7: Attack modelling techniques\nWeek 8: System assurance\nWeek 9: Incident response mechanisms\nWeek 10: Offensive cyber operations\nWeek 11: Future challenges','\n',char(10)),replace('<ul>\n<li>have an understanding of network robustness and failures, together with key underlying theoretical concepts</li>\n<li>understand critical (information) infrastructures, vulnerabilities, and their dependencies</li>\n<li>appreciate the specific security problems of cyber-physical including SCADA systems and selected infrastructure</li>\n<li>understand complex attacks, analytical models for such attacks, and assurance mechanisms</li>\n</ul>','\n',char(10)),'Lecture based delivery. Normally 3 hour of lectures per week.',replace('<ul><li>J Lopez, R Setola, S Wolthusen (edsCritical Information Infrastructures Vol. 7130 of Lecture Notes in Computer Science. Springer-Verlag, 2012</li>\n</ul>','\n',char(10)),'Oral feedback during lectures.','100% Exam 2 hours calculators not permitted, individual.','','ACTIVE',0,0);
INSERT INTO modules VALUES('IY4610','','Security Testing Theory and Practice',4,'CS',30,100,0,0,15,'IY2760','To give students a mastery of Security testing theory and practice',replace('<ul>\n<li>Understand  the legal aspects of carrying out a penetration test and an approach to preparing and managing such an audit.</li>\n<li>Understand, at a deep level,  network protocols; computer system architectures; and application systems.</li>\n<li>Understand  the vulnerabilities in existing protocols, systems, and applications.</li>\n<li>Understand  the security technologies designed to mitigate these vulnerabilities.  </li>\n<li>Understand how these vulnerabilities may be exploited in practice to penetrate a system.</li>\n</ul>','\n',char(10)),'Lecture based delivery.Normally 3 hour of lectures per week.',replace('<ul><li>T. Wilhelm, Professional Penetration Testing, Syngress, 2010.</li>\n<li>S. McClure et al., Hacking Exposed 7: Network Security Secrets and Solutions. McGraw-Hill, 2012.</li>\n<li>A Harper et al., Gray Hat Hacking, 3rd ed. McGraw Hill, 2011.</li>\n<li>R. Stevens, TCP/IP Illustrated, Volume 1: The Protocols, Addison-Wesley, 1994.</li>\n<li>D. Stuttard, M.Pinto. The Web Application Hacker’s Handbook: Finding and Exploiting</li>\n<li>Security Flaws. John Wiley &amp; Sons, 2011. 2nd edition.</li>\n<li>M. Dowd et al., The Art of Software Security Assessment: Identifying and Preventing</li>\n<li>Software Vulnerabilities. Addison Wesley, 2006.</li>\n</ul>','\n',char(10)),'Oral feedback during lectures.','100% Exam 2 hours calculators not permitted, individual.','','ACTIVE',0,0);
INSERT INTO modules VALUES('CS4234','','Large-scale Data Storage and Processing',4,'CS',-1,70,0,30,15,'CS1830','The main aims of this course are for students to study the underlying principles of storage and processing massive collections of data, typical of today''s Big Data systems, and to gain hands-on experience in using large and unstructured data sets for analysis and prediction. The topics covered include techniques and paradigms for querying and processing massive data sets (Spark, MapReduce, Hadoop, data warehousing, SQL for data analytics, stream processing), fundamentals of scalable data storage (NoSQL data bases such as MongoDB, Cassandra, HBase), working with dynamic web data (data acquisition, data formats), elements of cloud computing, and applications to real world data analytics and data mining problems (sentiment analysis, social network mining).',replace('<ul><li>Knowledge and understanding of core concepts, theories and principles of large scale data storage and processing frameworks</li>\n<li>Sound evaluation of opportunities and challenges related to leveraging those frameworks for building massive scale analytics solutions, and an ability to make recommendations to resolve these challenges</li>\n<li>Proficient knowledge and use of at least one large scale data store systems, and at least one massive scale processing framework</li>\n<li>Ability to design, develop, and evaluate an end to end analytics solution combining large scale data storage and processing frameworks</li>\n<li>Knowledge of cloud computing as a platform for Big Data analytics</li>\n</ul>','\n',char(10)),'Lecture based delivery and laboratory classes, guided independent study.Normally 4 hours of sessions per week.<br />',replace('<ul><li>Rajaraman, Leskovec, Ullman, Mining of Massive Datasets, Available for free from http://infolab.stanford.edu/~ullman/mmds.htm</li>\n<li>White, Hadoop: The Definitive Guide, O''Reilly, ISBN-10: 1449311520</li>\n<li>Lin, Dyer, Data-Intensive Text Processing with MapReduce, Synthesis Lectures on Human Language Technologies, 2010, 177 pages, (doi:10.2200/S00274ED1V01Y201006HLT007)</li>\n<li>Chodorow, Dirolf, MongoDB: The Definitive Guide, O''Reilly, ISBN-10: 1449344682</li>\n<li>Miner, Shook, MapReduce Design Patterns, O''Reilly, ISBN-10: 1449327176</li>\n<li>Pramod J. Sadalage, Martin Fowler (2012), NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot Persistence, Addison-Wesley Professional; 1st edition (August 18, 2012)</li>\n<li>Learning Spark: Lightning-Fast Big Data Analysis, by Karau, Konwinski, Wendell, and Zaharia: https://www.amazon.co.uk/Learning-Spark-Lightning-Fast-Data-Analysis/dp/1449358624</li>\n</ul>','\n',char(10)),'Verbal feedback will be provided during laboratory sessions.','70% exam<br />30% coursework<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,2);
INSERT INTO modules VALUES('CS4100','','Data Analysis',4,'CS',-1,80,0,20,15,' ','The course teaches fundamental facts and skills in data analysis, including machine learning, data mining and statistics',replace('<ul><li>Develop, validate, evaluate, and use effectively machine learning models and statistical models</li>\n<li>Apply methods and techniques such as clustering, regression, decision trees, and neural networks</li>\n<li>More generally, extract value and insight from data</li>\n</ul>','\n',char(10)),'Lecture based delivery support by lab session, guided independent study.Normally 3-5 hours of lectures / practical classes and workshops per week.<br />',replace('<ul><li>Hastie, Tibshirani, and Friedman, “The elements of Statistical Learning” second edition, Springer new York 2009.</li>\n<li>Duda, hart, and Stork, “Pattern Classification”, second edition Wiley new York 2000.</li>\n</ul>','\n',char(10)),'Oral feedback in lab sessionsWritten feedback on three programming coursework assignments ','<br />20% coursework and 80% exam<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term<br />',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are permitted','\n',char(10)),'ACTIVE',0,1);
INSERT INTO modules VALUES('CS4821','','MSci Project',4,'CS',10,0,0,100,60,'CS2800 or equivalent',replace('The aim of this project is to further the students'' knowledge of a particular computer science topic and to give them the opportunity of demonstrating their ability of working individually, whilst appling advanced scientific and software/hardware techniques to solving a problem. \nThe content of each project is individual. The rules for choosing a project and designing an own project are detailed in the Project Handbook.\n','\n',char(10)),replace('By the end of the course students should be able to:<ol><li>develop an advanced understanding of complex ideas and identify solutions to a problem</li><li>apply advanced scientific and software/hardware techniques to solving a problem</li><li>analyse the solution to a problem and evaluate the associated results</li><li>demonstrate a mastery of planning, organising and presenting the project work both in written form and orally</li><li>develop an advanced understanding of legal, social, ethical and professional issues</li></ol>\n\n','\n',char(10)),replace('1 hour lectures\n3-5 hours project supervision\n2 hours demonstration\n2 hours workshops\n590 hours guided independent study','\n',char(10)),replace('C. W. Dawson: The Essence of Computing Projects, A Student''s Guide, Prentice Hall, 2000: ISBN-10: 013021972X\n\nM. Berndtsson, J. Hansson, B. Olsson, B. Lundell: Planning and Implementing your Final Year Project - with Success!: A Guide for Students in Computer Science and Information Systems, Springer-Verlag, 2002: ISBN-10: 1852333324\n\nRichard Epstein: The case of the Killer Robot, John Wiley & Sons, 1997: ISBN 978-0471138235.','\n',char(10)),'Supervisory meetings and comments on draft report.','100% Project','','ACTIVE',1,0);
INSERT INTO modules VALUES('CS4822','','MSci Project in Artificial Intelligence',4,'CS',10,0,0,100,60,'CS2800 or equivalent',replace('The aim of this project is to further the students'' knowledge of a particular artificial intelligence topic and to give them the opportunity of demonstrating their ability of working individually, whilst appling advanced scientific and software/hardware techniques to solving a problem. \nThe content of each project is individual. The rules for choosing a project and designing an own project are detailed in the Project Handbook.','\n',char(10)),replace('By the end of the course students should be able to:<ol><li>develop an advanced understanding of complex ideas relating to AI and identify solutions to an AI problem</li><li>apply advanced scientific and software/hardware techniques to solving an AI problem</li><li>analyse the solution to a problem and evaluate the associated results</li><li>demonstrate a mastery of planning, organising and presenting the project work both in written form and orally</li><li>develop an advanced understanding of legal, social, ethical and professional issues</li></ol>\n\n','\n',char(10)),'1 hour of lectures, 3-5 hours of supervisions, and 2 hours of demonstrations, 2 hours of workshops.',replace('C. W. Dawson: The Essence of Computing Projects, A Student''s Guide, Prentice Hall, 2000: ISBN-10: 013021972X\n\nM. Berndtsson, J. Hansson, B. Olsson, B. Lundell: Planning and Implementing your Final Year Project - with Success!: A Guide for Students in Computer Science and Information Systems, Springer-Verlag, 2002: ISBN-10: 1852333324\n\nRichard Epstein: The case of the Killer Robot, John Wiley & Sons, 1997: ISBN 978-0471138235.','\n',char(10)),'Supervisory meetings and comments on draft reports.','100% Project','','ACTIVE',1,0);
INSERT INTO modules VALUES('CS4825','','MSci Team Project',4,'CS',20,0,0,100,60,'CS2815 and CS3821',replace('The main aim of this course is to give extensive experience to students in working in projects for real clients, as part of a team and operating as a company. \nTeams of students will: work in the context of a company where they have specific responsibilities; engage with real clients and determine their requirements for a significant piece of software; devise, estimate, design, implement, test, document and critically evaluate software; present their work and communicate their findings to the client.','\n',char(10)),replace('By the end of the course students should be able to:<ol><li>Have a mastery of how to work within a small software company and deliver software within required user specifications.</li><li>Have an ability to apply the practical and analytical skills as a software engineer.</li><li>Exhibit the ability to work co-operatively to deliver a significant piece of work.</li><li>Synthesise information, ideas and practices to provide a quality solution together with an evaluation of that solution.</li><li>Show awareness of wider customer contexts and the identification of problems that such contexts might deliver.</li><li>Exhibit critical self-evaluation of the process of developing a major piece of software.</li></ol>\n','\n',char(10)),replace('1 hour lectures\n12 hours supervision\n5 hours demonstrations\n2 hours workshops\n580 hours guided independent study','\n',char(10)),'Running an Agile Software Development Project, Mike Holcombe, ISBN-10: 0470136693.',replace('Supervision meetings\nComments on draft report','\n',char(10)),'100% Project','','ACTIVE',0,0);
INSERT INTO modules VALUES('MT1710','','Calculus',1,'Maths',47,90,0,10,15,'','','','','','','','','ACTIVE',0,NULL);
INSERT INTO modules VALUES('MT1720','','Functions of Several Variables',1,'Maths',44,90,0,10,15,'','','','','','','','','ACTIVE',0,NULL);
INSERT INTO modules VALUES('MT1810','','Number Systems',1,'Maths',44,90,0,10,15,'','','','','','','','','ACTIVE',0,NULL);
INSERT INTO modules VALUES('MT1820','','Matrix Algebra',1,'Maths',44,90,0,10,15,'','','','','','','','','ACTIVE',0,NULL);
INSERT INTO modules VALUES('MT2630','','Graphs and Optimsation',2,'Maths',33,100,0,0,15,'','','','','','','','','ACTIVE',0,NULL);
INSERT INTO modules VALUES('MT2800','','Linear Algebra and a Group Project',2,'Maths',50,80,10,10,15,'','','','','','','','','ACTIVE',0,NULL);
INSERT INTO modules VALUES('MT2220','','Vector Analysis and Fluids',2,'Maths',-1,-1,-1,-1,-1,'','','','','','','','','ACTIVE',0,NULL);
INSERT INTO modules VALUES('MT2320','','Probability',2,'Maths',-1,-1,-1,-1,-1,'','','','','','','','','ACTIVE',0,NULL);
INSERT INTO modules VALUES('MT2860','','Groups and Group Functions',2,'Maths',-1,-1,-1,-1,-1,'','','','','','','','','ACTIVE',0,NULL);
INSERT INTO modules VALUES('MT3130','','Complexity Theory',3,'Maths',-1,-1,-1,-1,-1,'','','','','','','','','ACTIVE',0,'');
INSERT INTO modules VALUES('MT3110','','Number Theory',3,'Maths',-1,-1,-1,-1,-1,'','','','','','','','','ACTIVE',0,NULL);
INSERT INTO modules VALUES('MT3000','','Mathematics Project',3,'Maths',-1,-1,-1,-1,-1,'','','','','','','','','ACTIVE',1,NULL);
INSERT INTO modules VALUES('CS4860','','Advanced Distributed Systems',4,'CS',-1,70,0,30,15,' ',replace('The course will cover fundamental principles of building modern distributed systems, for example in the context of the Internet of Things. The specific emphasis will be on the two central components of the IoT reference architecture: cloud infrastructure and wireless networking. \nThe course will discuss major challenges found in these environments (such as massive scales, wide distribution, decentralisation, unreliable communication links, component failures and network partitions) and general approaches for dealing with these challenges. \nThe topics covered will include:\nabstract models (such as the synchronous and asynchronous distributed computing models, models for wireless networks);\nalgorithmic techniques (such as distributed coordination, fault-tolerant design of distributed algorithms, synchronization techniques);\npractical case studies.<br />\nThe students will also have an opportunity to apply the studied material for implementing various components of a realistic distributed system through a series of formative coursework assignments, lab practicals, and a final project. \n','\n',char(10)),replace('<ul><li>Display a mastery of core concepts, theories and principles of distributed systems</li>\n<li>Demonstrate knowledge of algorithmic techniques for solving problems in a distributed environment</li>\n<li>Explain the practical aspects of implementing various components of a distributed system</li>\n<li>Implement various components of a realistic distributed system</li>\n</ul>','\n',char(10)),'Normally 4 hrs per week of lectures and laboratory sessions.',replace('<ul><li>Nancy A. Lynch: Distributed Algorithms. The Morgan Kaufmann Series in Data Management Systems (1996). ISBN-13: 978-1558603486</li>\n<li>Hagit Attiya, Jennifer Welch: Distributed Computing: Fundamentals, Simulations and Advanced Topics. John Wiley &amp; Sons; 2 edition (11 Mar. 2004). ISBN-13: 978-0471453246</li>\n<li>Christian Cachin, Rachid Guerraoui, Luís Rodrigues: Introduction to Reliable and Secure Distributed Programming. Springer 2 edition (11 Feb. 2011).  ASIN: B008R61LBG</li>\n<li>Maurice Herlihy, Nir Shavit: The Art of Multiprocessor Programming. Morgan Kaufmann; Revised edition edition (2012). ISBN-13: 978-0123973375</li>\n</ul>','\n',char(10)),'Oral feedback in laboratory sessions.','70% invigilated, closed book  2 hours exam. 30% coursework.<br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,2);
INSERT INTO modules VALUES('CS3250','','Visualisation and Exploratory Analysis',3,'CS',-1,80,0,20,15,' ','The course aims to teach the principles and arts of statistical visualisation and exploratory analysis of data.',replace('By the end of the course students should be able to:<ul><li>Have some of the skills and wisdom that are needed for open-ended exploratory analysis of data, and for the analytical presentation of the results of statistical analyses</li>\n<li>Understand and be able to construct linear projections of multivariate data; they should also have experience in using some non-linear dimension reduction methods</li>\n<li>have some practical experience of using standard graph visualisation methods and evaluation of results</li>\n<li>Be aware of the dangers of data snooping, through practical experience of this</li>\n<li>Be able to make reasoned choices in representational mode, glyph design, and colour design for presentation graphics</li>\n</ul>','\n',char(10)),'Lecture based delivery,  laboratory classes,  guided independent studyNormally 3 hours of lectures / laboratory per week',replace('<ul><li>Visualising data, by William S. Cleveland</li>\n<li>The elements of graphing data by William s. Cleveland</li>\n<li>The visual display of quantitative data, by Edward Tufle</li>\n<li>Envisioning information by Edward Tufle</li>\n</ul>','\n',char(10)),'Verbal feedback during laboratory sessions.<br />','80% invigilated, closed book, 2 hours exam<br /><br />20% coursework<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,1);
INSERT INTO modules VALUES('CS1830','','Computing laboratory (games)',1,'CS',-1,0,0,100,15,'None','During this course, students learn some basic concepts of 2D game design and apply them to the development of simple games. To achieve that goal, they learn about 2D graphics (sprites and spritesheets), animations (loops and sequences) and motion (position, velocity, acceleration). All those concepts require vectors, which are also extensively covered throughout the course. Furthermore, the course introduces basic concepts of game physics, such as collisions gravity and ballistics. The development should follow an object-oriented approach, and that topic is an important component of the course.',replace('By the end of this course a student should be able to:<ul><li>Write simple 2D games program</li>\n<li>Understand the role of vectors in game development</li>\n<li>Produce state diagrams and use them in the development of simple games</li>\n<li>Use 2D gaming graphics: sprites, spritesheets and animations</li>\n<li>Understand and program gaming physics: collision detection and handling, gravity and ballistics</li>\n</ul>','\n',char(10)),'Teacher led laboratory classes and self-driven project work. Up to 4 hours of lectures and laboratory classes per week.',replace('<ul><li>“Essential Mathematics for Games and Interactive Applications” by James M. Van Verth and Lars M. Bishop</li>\n<li>Ian Millington – Artificial Intelligence for Games</li>\n<li>Ian Millington – Games Physics Engine Development</li>\n<li>David Eberly – Game Physics</li>\n<li>Christer Ericsson – Real Time Collision Detection</li>\n<li>Extra textbooks are available at the following web sites:</li>\n<li>http://programarcadegames.com</li>\n<li>http://inventwithpython.com </li>\n</ul>','\n',char(10)),'Practical skills assessment – in Lab assessment. Verbal feedback on progress will be given during the laboratory sessions.','100% Coursework:<br />Details of coursework submission deadlines will be published on the department website at the start of term.','','DORMANT',0,3);
INSERT INTO modules VALUES('CS1820','','Computing laboratory (robotics)',1,'CS',-1,0,0,100,15,'None','To provide a practical approach to programming and the building of computer systems.<br /><br />To introduce elementary robotics concepts<br /><br />To reinforce the earning of elementary programming',replace('By the end of this course a student should be able to:<br /><ul><li>Programme a mobile robot to execute pre-defined movements</li>\n<li>Understand the operation of basic sensors</li>\n<li>Understand the essentials of real time event-driven programming</li>\n</ul>','\n',char(10)),'Teacher led laboratory classes and self-driven, scripted group project work.Up to 4 hours of lectures and laboratory classes per week.<br /><br />',replace('<ul><li>J. Kelly: LEGO Mindstorms NXT-G Programming Guide, Technology in Action Press, 2007, ISBN 10: 1590598717</li>\n<li>Brian Bagnell: Maximum Lego NXT: Building Robots with Java Brains, Variant Press 2007, ISBN 10: 0973864915</li>\n</ul>','\n',char(10)),'Five formative worksheets. Verbal feedback on progress will be given during the laboratory sessions.','25% individual report on group project<br />75% coursework<br />Details of coursework submission deadlines will be published on the department website at the start of term','','DORMANT',0,2);
INSERT INTO modules VALUES('CS2865','','Mathematical Structures',2,'DC',38,90,0,10,15,'None','The aim of this module is to provide (1) insights and skills in rigor and formal reasoning in a way that allows reasoning about behaviour, correctness and performance in a programming environment; and (2) basic knowledge of the formal structures for program data representation. The course content includes: structures such as sets, relations, functions and cardinality; recursion and proof by induction; graphs; basic probability and statistics.',replace('By the end of this course a student should be able to:<ul><li>reason about sets, relations, functions and cardinality</li>\n<li>reason about recursive definitions and prove results by induction</li>\n<li>represent problems and reason about them using graphs</li>\n<li>understand basic probability and statistics suitable for use in studying artificial intelligence and information security\n</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by small group tutorials.Normally 3 hours of lectures per week.<br />',replace('<ul><li>Rosen: Discrete Mathematics And Its Applications, McGraw Hill, 2006, ISBN 0071244743</li>\n<li>Ross and Wright: Discrete Mathematics, Prentice Hall, 2003, ISBN 0130652474</li>\n<li>D. Velleman, “How To Prove It”, Cambridge University Press, 2006</li>\n</ul>','\n',char(10)),'Individual discussion of non-assessed tutorial exercises and discussion of assessed worksheets in small group tutorials.','90% invigilated, closed book     1.5hrs<br />10% coursework<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term','','ACTIVE',0,0);
INSERT INTO modules VALUES('CS2890','','Software Design',2,'DC',34,40,0,60,15,'None','The course addresses concepts required for performing software design activities. Core course content aims at interpreting requirements, identifying software components, documenting software design and understanding the various stages of software development, as well as techniques with a focus on software design.',replace('<ul><li>Identify common software requirements and how these map to software components.  They will be able to recognise how these requirements have been discharged in existing systems and critique their effectiveness.</li>\n<li>Understand several techniques and notations that make it possible to document software design.  They will understand that Software Engineering supports communication of design ideas and this will allow them to see how Software Engineering is a team activity.</li>\n<li>Understand the importance of the several activities of a professional software engineer.  This will include techniques from agile software development, but will focus on requirements acquisition and software design.</li>\n<li>Apply several techniques to design software based on user requirements.  They will be able to judge the appropriateness of designs produced using these techniques, both formally and informally.</li>\n<li>Analyse and critique the design of existing software.  This will include the User Experience of software as a measure of its fitness for purpose.</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by laboratory classes. Normally 3-4 hours of lectures and laboratory classes per week. <br />',replace('<ul><li>Shari Pfleeger and Joanne Atlee, Software Engineering: Theory and Practice, Prentice Hall, 4th edition, 2010.</li>\n<li>Martin Fowler, UML distilled: a brief guide to the standard object modelling language, Addison-Wesley, 3rd edition, 2004.</li>\n</ul>','\n',char(10)),'Oral feedback during lab sessions.','40% Invigilated closed book 1.5 hours exam and 60% coursework (several pieces including group and individual work)<br /><br />Details of coursework submission deadlines will be published on the course website at the start of term','','ACTIVE',0,2);
INSERT INTO modules VALUES('DC3760','','Introduction to Information Security',3,'DC',33,80,0,20,15,'',' ',replace('On successful completion of this course, students will be able to:<ul><li>Identify, through the case studies how information security may be influenced by real world design and implementation decisions.</li>\n<li>Appreciate the different cryptographic algorithms, their use, advantages and disadvantages</li>\n<li>Apply the above identified cryptographic primitives in the review and evaluation of cryptographic protocols.</li>\n<li>Identify, through the case studies how information security may be influenced by real world design and implantation decisions.</li>\n<li>Appreciate the rational decisions in the design of a number tokens and secure elements</li>\n</ul>','\n',char(10)),'33 hours of lectures. The coursework is designed to allow students to apply their knowledge to applications with which they are familiar.',replace('<ul><li>The main recommended text for this course is:</li>\n<li>D. Gollmann, Computer Security, John Wiley &amp; Sons, 2005 (2nd edition).</li>\n<li>Useful background:</li>\n<li>C.P. Pfleeger and S. L. Pfleeger, Security in Computing, Prentice Hall, 2006 (4th edition).</li>\n<li>D. Saloman: Elements of Computer Security, Springer 2010</li>\n<li>K. Martin: Everyday Crytography, Oxford University Press 2012</li>\n</ul>','\n',char(10)),'In class verbal feedback.','80% invigilated, closed book  2 hours exam. 20% coursework.<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term','','ACTIVE',0,0);
INSERT INTO modules VALUES('CS2846','','Human-Computer Interaction',2,'CT',44,40,0,60,15,'CS1840 or CS2841','This course introduces human-computer interaction aspects and challenges, and addresses the approaches that can be used to create interfaces matching users'' needs and expectations.',replace('By the end of this course a student should be able to:<ul><li>demonstrate an understanding of what HCI is, its principles, challenges, and teamwork development aspects</li>\n<li>build prototypes using different media and technologies</li>\n<li>evaluate the usability and suitability of user interfaces</li>\n<li>undertake HCI tests, namely Web experiments</li>\n<li>explain how perception and cognition influence HCI</li>\n</ul>','\n',char(10)),'Up to 4 hours of lectures and laboratory classes per week<br />',replace('<ul><li>Alan Dix et al, Human Computer Interaction. 2003.</li>\n<li>Yvonne Rogers et al, Interaction Design: Beyond Human Computer Interaction. 2011.</li>\n<li>Jakob Nielsen, Prioritizing Web usability. 2006.</li>\n<li>Don Norman, The Design of Everyday Things: Revised and Expanded Edition. 2013.</li>\n<li>Eric Freeman. Head First HTML5 Programming. 2011.</li>\n<li>Jon Duckett, JavaScript and jQuery: Interactive Front-End Web Development. 2014.</li>\n</ul>','\n',char(10)),'Verbal feedback on progress will be given during the weekly laboratory sessions','60% coursework.<br />40%     Invigilated, closed book.   2 hours  exam.<br /><br />Details of coursework submission deadlines will be published on the course webside at the start of term<br />',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,4);
INSERT INTO modules VALUES('CS2847','','Human-Computer Interaction',2,'DC',44,40,0,60,15,'CS1840 or CS2841','This course introduces human-computer interaction aspects and challenges, and addresses the approaches that can be used to create interfaces matching users'' needs and expectations.',replace('By the end of this course a student should be able to:<ul><li>demonstrate an understanding of what HCI is, its principles, challenges, and teamwork development aspects</li>\n<li>build prototypes using different media and technologies</li>\n<li>evaluate the usability and suitability of user interfaces</li>\n<li>undertake HCI tests, namely Web experiments</li>\n<li>explain how perception and cognition influence HCI</li>\n</ul>','\n',char(10)),'Up to 4 hours of lectures and laboratory classes per week<br />',replace('<ul><li>Alan Dix et al, Human Computer Interaction. 2003.</li>\n<li>Yvonne Rogers et al, Interaction Design: Beyond Human Computer Interaction. 2011.</li>\n<li>Jakob Nielsen, Prioritizing Web usability. 2006.</li>\n<li>Don Norman, The Design of Everyday Things: Revised and Expanded Edition. 2013.</li>\n<li>Eric Freeman. Head First HTML5 Programming. 2011.</li>\n<li>Jon Duckett, JavaScript and jQuery: Interactive Front-End Web Development. 2014.</li>\n</ul>','\n',char(10)),'Verbal feedback on progress will be given during the weekly laboratory sessions','60% coursework.<br />40%     Invigilated, closed book.   2 hours  exam.<br /><br />Details of coursework submission deadlines will be published on the course webside at the start of term<br />',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,4);
INSERT INTO modules VALUES('CS3824','','Project in Computing Technologies',3,'CT',10,0,0,100,60,'','','','','','','','','ACTIVE',1,0);
INSERT INTO modules VALUES('CS4920','','Machine Learning',4,'CS',-1,-1,-1,-1,15,'A-level Mathematics','The aim of the course is to acquaint the students with several key methods and techniques of machine learning.  In particular, it will cover the following topics. Nearest neighbours for classification and regression; interesting distances. Conformal prediction and conformalizing nearest neighbours. Ridge regression and Lasso. Inductive conformal predictors and cross-conformal predictors. Support vector machines for classification and regression. Kernel trick and its applications to the algorithms covered so far. Practically useful kernels. Conformalized versions.',replace('<ul><li>Demonstrate knowledge of the theoretical background in machine learning methods.</li>\n<li>Have an understanding of the main advantages and limitations of various approaches to machine learning and specific machine-learning algorithms.</li>\n<li>Be able to implement versions of several machine-learning algorithms.</li>\n<li>Have an understanding of some ways to apply the ideas and algorithms of machine learning in industry, medicine and other fields.</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by laboratory classes.Normally 3 hours of lectures/labs per week.  Guided independent study',replace('<ul>\n<li>Andreas C. Mueller and Sarah Guido (2016) Introduction to Machine Learning with Python. O''Reilly Media</li>\n<li>Vineeth N. Balasubramanian et al. (2014) Conformal Prediction for Reliable Machine Learning. Elsevier</li>\n<li>Gareth James et al. “An introduction to Statistical learning” Springer, 2013</li>\n<li>Trevor Hastie et al. “The elements of Statistical learning”, Springer, 2009</li>\n<li>John Shawe-Taylor and Nello Cristianini: Kernel Methods for Pattern Analysis, Cambridge University Press, 2004: ISBN-10: 0521813972</li>\n<li>Tom M. Mitchell (1997) Machine Learning. McGraw-Hill</li>\n</ul>','\n',char(10)),'In lectures / labs,  Immediate help and verbal feedback','80% exam<br />20% Coursework<br /><br />Details of coursework submission deadlines will be published on the course website at the start of term',replace('Time allowed: 2 hours\nAnswer THREE questions\nNo credit will be given for attempting any further questions\nCalculators are permitted','\n',char(10)),'ACTIVE',0,1);
INSERT INTO modules VALUES('CS1823','','Programming in Practice',1,'CS',66,0,0,100,30,'None','Students in this course will apply programming concepts from the the very basic (variables, control flow, loops, methods) up to advanced concepts (event driven programming, embedded programming) and best practices. The course will follow a blended learning model incorporating lectures, practical exercises, project work and online assessment. ',replace('1. program independently to solve a given problem. \n\n2. know how to write an individual technical report.. \n\n3. know how to present a project, both at a practical demonstration and in a formal short presentation. \n\n4. have been introduced to a programming environment for a particular event driven or embedded domain such as microprocessor coding, robotics coding, game development or interactive web development. \n\n5. work effectively in a group on a significant programming project. ','\n',char(10)),replace('11 weekly lectures = 11 hours\n15 weekly laboratory classes = 15 hours\n20 twice-weekly practical classes = 40 hours','\n',char(10)),replace('Cay S. Horstmann: Big Java, 4th Edition, Wiley, 2010, ISBN 987-0-470-55309-1 \n\nhttps://inventwithpython.com/ \n\nIan Millington – Artificial Intelligence for Games  \n\nDavid Eberly – Game Physics \n\nChrister Ericsson – Real Time Collision Detection \n\nJ. Kelly: LEGO Mindstorms NXT-G Programming Guide, Technology in Action Press, 2007, ISBN 10: 1590598717 \n\nBrian Bagnell: Maximum Lego NXT: Building Robots with Java Brains, Variant Press 2007, ISBN 10: 097386491 \n\n ','\n',char(10)),'55 laboratory checkpoints (mandatory formative assessment)',replace('Team project 40%\nIndividual assignments 60%\n\nDetails of coursework submission deadlines will be published on the department website at the start of term','\n',char(10)),'','ACTIVE',0,3);
INSERT INTO modules VALUES('DC1821','','Programming Fundamentals',1,'DC',66,0,0,100,30,'None','Students in this course will apply programming concepts from the the very basic (variables, control flow, loops, methods) up to advanced concepts (event driven programming, embedded programming) and best practices. The course will follow a blended learning model incorporating lectures, practical exercises, project work and online assessment. ',replace('1. be able to program independently to solve a given problem. \n\n2. know how to write an individual technical report.. \n\n3. know how to present a project, both at a practical demonstration and in a formal short presentation. \n\n4. have been introduced to a programming environment for a particular event driven or embedded domain such as microprocessor coding, robotics coding, game development or interactive web development. \n\n5. work in a group on an I.T. project. ','\n',char(10)),replace('11 weekly lectures = 11 hours\n15 weekly laboratory classes = 15 hours\n20 twice-weekly practical classes = 40 hours','\n',char(10)),replace('Cay S. Horstmann: Big Java, 4th Edition, Wiley, 2010, ISBN 987-0-470-55309-1 \n\nhttps://inventwithpython.com/ \n\nIan Millington – Artificial Intelligence for Games  \n\nDavid Eberly – Game Physics \n\nChrister Ericsson – Real Time Collision Detection \n\nJ. Kelly: LEGO Mindstorms NXT-G Programming Guide, Technology in Action Press, 2007, ISBN 10: 1590598717 \n\nBrian Bagnell: Maximum Lego NXT: Building Robots with Java Brains, Variant Press 2007, ISBN 10: 097386491 \n\n ','\n',char(10)),'55 laboratory checkpoints (mandatory formative assessment)',replace('Team project 40%\nIndividual assignments 60%\n\nDetails of coursework submission deadlines will be published on the department website at the start of term','\n',char(10)),'','ACTIVE',0,3);
INSERT INTO modules VALUES('DC2845','','Data Analytics and Visualisation',2,'DC',-1,80,0,20,15,' ',' ',' ',' ',' ',' ',' ',' ','WITHDRAWN',0,1);
INSERT INTO modules VALUES('CS1803','','Introduction to Programming',1,'DC',-1,40,0,60,15,'None','The goal of this course is to provide:an overall look at the world of programming;knowledge of how computers can be used to solve problems;a hands-on approach to fundamental programming skills.','1. understand variables, types and simple data structures (strings, sets, lists and dictionaries) 2. use control flow mechanisms such as conditionals, while loops and for loops 3. use functions and recursion 4. perform I/O both from and to the command line and files 5. implement simple algorithms 6. understand key concepts about objects, namely classes and inheritance ','The total number of notional learning hours associated with course are 150. These will normally be broken down as follows:<br/>44 hour(s) of Laboratory classes across 11 week(s)<br/>106 hour(s) of Guided Independent Study',replace('<ul><li>Herbert Schildt: Java: a Beginner’s Guide, 4th Edition, McGraw-Hill, 2007, ISBN 0072263849</li>\n<li>Cay S. Horstmann: Big Java, 4th Edition, Wiley, 2010, ISBN 987-0-470-55309-1</li>\n</ul>','\n',char(10)),'Laboratory Sessions','Project Output - 60%<br/>Set Exercise - 40%','','DORMANT',0,3);
INSERT INTO modules VALUES('CS1831','','Computing laboratory (games)',1,'DC',-1,-1,-1,-1,15,'None','During this course, students learn some basic concepts of 2D game design and apply them to the development of simple games. To achieve that goal, they learn about 2D graphics (sprites and spritesheets), animations (loops and sequences) and motion (position, velocity, acceleration). All those concepts require vectors, which are also extensively covered throughout the course. Furthermore, the course introduces basic concepts of game physics, such as collisions gravity and ballistics. The development should follow an object-oriented approach, and that topic is an important component of the course.',replace('By the end of this course a student should be able to:<ul><li>Write simple 2D games program</li>\n<li>Understand the role of vectors in game development</li>\n<li>Produce state diagrams and use them in the development of simple games</li>\n<li>Use 2D gaming graphics: sprites, spritesheets and animations</li>\n<li>Understand and program gaming physics: collision detection and handling, gravity and ballistics</li>\n</ul>','\n',char(10)),'Teacher led laboratory classes and self-driven project work. Up to 4 hours of lectures and laboratory classes per week.',replace('<ul><li>“Essential Mathematics for Games and Interactive Applications” by James M. Van Verth and Lars M. Bishop</li>\n<li>Ian Millington – Artificial Intelligence for Games</li>\n<li>Ian Millington – Games Physics Engine Development</li>\n<li>David Eberly – Game Physics</li>\n<li>Christer Ericsson – Real Time Collision Detection</li>\n<li>Extra textbooks are available at the following web sites:</li>\n<li>http://programarcadegames.com</li>\n<li>http://inventwithpython.com </li>\n</ul>','\n',char(10)),'Practical skills assessment – in Lab assessment. Verbal feedback on progress will be given during the laboratory sessions.','100% Coursework:<br />100% coursework.<br /><br />Details of coursework submission deadlines will be published on the department website at the start of term.','','DORMANT',0,3);
INSERT INTO modules VALUES('CS2841','','Internet Services',2,'DC',40,90,0,10,15,'None','The course introduces the basics of how the Internet works and its key protocols. With that foundation, it then addresses the technologies used for web development, including scripting languages and their potential. Web Services and related technologies are also introduced as well as the basics of network security.',replace('By the end of this course a student should be able to:<ul><li>understand the basics of how the Internet works</li>\n<li>understand key Internet protocols</li>\n<li>carry out web development tasks involving current web technologies</li>\n<li>use scripting languages to add dynamic aspects to web sites/applications</li>\n<li>understand the fundamentals of Web Services and network security</li>\n</ul>','\n',char(10)),'Lecture based delivery, supported by laboratory classes, guided independent study. Up to 3 hours of lectures and laboratory classes per week<br />',replace('<ul><li>J.F. Kurose and K.W. Ross: Computer Networking: A Top-Down Approach , Pearson, 6th edition, international edition, 2013  </li>\n</ul>','\n',char(10)),'Verbal feedback on progress will be given during the weekly laboratory sessions','10% coursework <br />90%     Invigilated, closed book.   1.5hours  exam.<br /><br />Details of coursework submission deadlines will be published on the course webside at the start of term<br />',replace('Time allowed: 1 1/2 hours\nAnswer ALL questions\nCalculators are NOT permitted','\n',char(10)),'ACTIVE',0,1);
INSERT INTO modules VALUES('DC3811','','Team Project in HCI',3,'DC',40,0,0,100,15,'None',replace('The course is practice-led, and exposes students to a medium scale agile software development project in the context of a team. HCI is embedded in this process, being a crucial requirement from day one. Students taking this course will design software with the aim of providing good user experience. Other course content/exercised skills include: communication, managing risks and conflicts, practical experience of standard industrial software engineering agile project management, use of version control in a team, IDEs, etc.\n','\n',char(10)),replace('By the end of the course students should be able to:\n<ol>\n<li>work in a team to produce a substantial product using software engineering techniques, with a focus on HCI.</li>\n<li>apply managerial discipline and a professional attitude.</li>\n<li>design software to provide good user experience and with usability as one of its main concerns.</li>\n<ol>','\n',char(10)),replace('Lectures 1-2hrs per week for 10 weeks = 18\n hrs total\nLaboratory classes 2hrs per week for 11 weeks = 22 hrs total\nGuided Independent Study = 114 hrs total','\n',char(10)),replace('<ul><li>Richard Whitehead: Leading a Software Development Team, Addison Wesley, 2001 ISBN 10: 0201675269</li>\n<li>Cay S. Horstmann: Big Java,4th Edition, Wiley, 2010, ISBN 978 0470553091</li>\n<li>Ken Schwaber: Agile Software Development with Scrum.  Pearson Prentice Hall 2002.    ISBN 978 0132074896\nAlan Dix et al, Human Computer Interaction. 2003</li>\n<li>Yvonne Rogers et al, Interaction Design: Beyond Human Computer Interaction. 2011.</li>\n<li>Jakob Nielsen, Prioritizing Web usability. 2006.</li>\n<li>Don Norman, The Design of Everyday Things: Revised and Expanded Edition. 2013.</li>\n</ul>','\n',char(10)),'Oral feedback in laboratory sessions - Oral','Project - 100% - Guideline time for completion 80 hours','','ACTIVE',0,2);
INSERT INTO modules VALUES('CS3580','','Advanced Data Communications',3,'CS',33,100,0,0,15,'CS1840',replace('To cover a range of important topics in modern data communications including text, image, audio and video transfer over networking infrastructures and recent trends in network management and network security<br/>\nIntroduction:  layering, abstraction, and standards. The ISO/OSI reference model. The Internet reference model.<br/>\nMultimedia communications: multimedia information representation, coding and compression, applications and standards, quality of service (QoS) requirements.<br/>\nInternet: IP addressing, routeing algorithms and routeing protocols, RIP, OSPF, the Internet multicast model, scheduling and queue management.<br/>\nSecurity in communication networks: security issues, security mechanisms, secure protocols.<br/>\nNetwork management: network management issues, infrastructure and framework for Internet management.\n','\n',char(10)),replace('By the end of this course a student should be able to:\n <ul><li>explain how multimedia communications work</li><li>describe coding and compressing algorithms for text, image and video</li><li>describe Internet technologies in terms of supporting QoS</li><li>demonstrate an understanding of most common security terms and concepts</li><li>describe modern network security mechanisms and their applications</li><li>explain Internet network management issues and possible solutions</li></ul>','\n',char(10)),replace('Lecture based delivery<br/>\nNormally 3 hours of lectures per week.','\n',char(10)),'<ul><li>James F. Kurose and Keith W. Ross: Computer Networking: a top-down approach featuring the Internet, Addison-Wesley: ISBN-10: 0321227352</li><li>Fred Halsall: Multimedia Communications: applications, networks, protocols and standards, Addison-Wesley</li><li>William Stallings: Cryptography and Network Security: principles and practice, Prentice Hall: ISBN-10: 0131873164</li></ul>','Return of marked zero-weighted assignments.','100% Exam.','Closed Book. Two hours.',NULL,0,0);
INSERT INTO modules VALUES('CS4580','','Advanced Data Communications',4,'CS',33,100,0,0,15,'CS1840',replace('The course teaches important topics in modern data communications including text, image, audio and video transfer over networking infrastructures and recent trends in QoS management, network security and network management.<br/>\nIntroduction: layering, abstraction, and standards.  The ISO/OSI reference model. The internet reference model<br/>\nMultimedia communications: multimedia information representation coding and compression, applications and standards, quality of service (QoS) requirements<br/>\nInternet technologies: IP addressing, routeing algorithms and routeing protocols, RIP, OSPF, the internet multicast model, scheduling and queue management<br/>\nSecurity in communication networks: security issues, security mechanisms, secure protocols.<br/>\nNetwork management: network management issues, infrastructure and framework for internet management\n','\n',char(10)),'<ul><li>Show advanced understanding of multimedia communications</li><li>Evaluate coding and compressing algorithms for text, audio, image and video</li><li>Analyse internet technologies in terms of supporting quality of service</li><li>Examine modern network security mechanisms and their applications</li><li>Evaluate internet network management issues and explain possible solutions</li></ul>','Lecture based delivery, guided independent study.',replace('<ul><li>James F. Kurose and Keith W. Ross: Computer Networking : a top-down approach featuring the internet, Addison-Wesley: ISBN: 10:0321227352</li>\n<li>Fred Halsall: multimedia communications: applications, networks, protocols and standards, Addison-Wesley</li>\n<li>William Stallings: Cryptography and network security: principles and practice, prentice Hall: ISBN-10 0131873164</li></ul>','\n',char(10)),'Written feedback on problem solving assignments.','100% Exam.','100% invigilated, closed book     2hrs – calculators are NOT permitted.',NULL,0,0);
INSERT INTO modules VALUES('CS4220','','Digital Audio and Applications',4,'CS',44,60,40,0,15,NULL,'Digital audio has many applications, ranging from music production to audio enhancement, or from noise cancellation in mobile phones to automatic music generations for games. These applications share common features that will be covered in this course. Starting with the fundamentals of sound (nature, transmission, volume), students will then learn how to convert sound to and from the digital domain. Once in the digital domain, audio can be manipulated using algorithms from Digital Signal Processing. The course covers some basic DSP algorithms, engaging the students both in audio analysis (amplitude, frequency, pan, etc.) and audio synthesis (additive , FM, etc.). By the end of this course, students should be able to write simple applications that analyse, manipulate and generate sound. ',replace('By the end of the course students should be able to:<ol><li>master digital audio and  the fundamentals of AD/DA conversion</li><li>program Fourier analysis to synthesize and transform sounds in the frequency domain</li><li>demonstrate an understanding of  lossy and losseless compression algorithms</li><li>program digital signal processing (post-processing and effects)</li><li>develop applications for digital audio (music production, noise cancellation, audio enhancement, automatic music generation)</li><li>acquire a basic knowledge of sound perception and  psychoacoustics</li></ol>\n\n','\n',char(10)),'Laboratory sessions, normally 4 hours per week.',NULL,'Lab Sessions','Project - 40% Examination (120 Minutes) - 60%',NULL,NULL,0,4);
INSERT INTO modules VALUES('CS4563',NULL,'Technology Entrepreneurship',4,'CS',22,0,50,50,15,'','This course gives an introduction into how technology start-ups work, and an insight into how to work for one. It takes students through the venture’s life cycle and explores issues that are unique to entrepreneurs starting science and technology-based ventures. It also provides students with a theoretical as well as practical outlook on issues faced by technology ventures/entrepreneurs. After this course, students should also be able to pitch an idea to potential investors.',replace('By the end of the course students should be able to:<ol><li>Develop and think about technology-based ideas for the future.</li><li>Understand the issues and challenges facing technology entrepreneurs.</li><li>Assess and evaluate a technology venture.</li><li>Understand the formation, development, growth and exit stages of technology ventures in detail.</li><li>Have an in-depth and critical understanding of the entrepreneurial process in the context of technology ventures.</li><li>Have a systematic understanding, critical awareness and knowledge of current issues in technology entrepreneurship.</li></ol>\n','\n',char(10)),'Lecture based delivery, normally 2 hours per week.',replace('Allen, K. 2009. Entrepreneurship for Scientists and Engineers (International ed.): Pearson Prentice Hall. \n\nDorf, R. C. & Byers, T. H. 2010. Technology Ventures From Idea to Enterprise (3rd ed.): McGraw Hill. \n\nBessant, J. & Tidd, J. 2007. Innovation and entrepreneurship: John Wiley & Sons. \n\nBurns, R. L. (Ed.). 2005. The business of healthcare innovation: Cambridge University Press. \n\nGeorge, G. & Bock, A. 2009. Inventing entrepreneurs: Technology innovators and their entrepreneurial journey: Prentice Hall. \n\nOakey, R. 2012. High-technology entrepreneurship. Routledge. \nPearce, R. & Barnes, S. 2006. Raising venture capital: Wiley. \nSeifert, R. W., Leleux, B. F., & Tucci, C. 2008. Nurturing science-based ventures: An international case perspective: Springer. \nShane, S. 2009. Technology strategy for managers and entrepreneurs: Pearson Prentice Hall. \n\nTouhill, C. J., Touhill, G. J., & O’Riordan, T. A. 2008. Commercialization of Innovative Technologies: Wiley Inter-science.','\n',char(10)),'Discussions during presentations',replace('Project 50%\nPresentation 50%','\n',char(10)),NULL,NULL,0,0);
INSERT INTO modules VALUES('CS4980','','Autonomous Intelligent Systems',4,'CS',44,70,0,30,15,'CS2910','This specialist course focuses on acquiring a deep understanding of the principles and techniques that are needed to design and build autonomous intelligent systems (AISs). The course will start with an introduction to AISs and real-world examples of them. It will then cover knowledge representation and engineering techniques based on formal logic. The course will then tackle autonomous decision making techniques, from AI planning to probabilistic reasoning and Markov Decision Processes. The course will then cover reinforcement learning and techniques for cooperation and coordination both between artificial agents and between them and human beings. All these topics will be discussed both from a theoretical point of view, during the lectures, and from a practical point of view, during the labs.',replace('By the end of the course students should be able to:<ol><li>Have an advanced understanding of the principles and techniques to design and build autonomous intelligent systems</li><li>Use of knowledge representation languages to build models of core components of an autonomous intelligent system</li><li>Use a high-level programming language (e.g. Python) to efficiently implement algorithms for building autonomous intelligent systems</li><li>Design and build prototypes of autonomous intelligent systems to tackle real-world problems</li><li>Use tools to tackle the new problems in the area of autonomous intelligent systems</li></ol>\n','\n',char(10)),replace('22 hours lectures\n22 hours laboratory classes','\n',char(10)),replace('Artificial Intelligence: A Modern Approach (Third edition) by Stuart Russell and Peter Norvig\n\nScientific papers on the different topics covered by the course','\n',char(10)),'Verbal feedback on lab, class activities, and project.',replace('70% Exam\n30% Project','\n',char(10)),NULL,NULL,0,2);
INSERT INTO modules VALUES('CS4990','','Natural Language Processing',4,'CS',44,70,0,30,15,'CS2900',replace('The aim of this course is to teach the necessary background knowledge and practical techniques - especially deep learning -  needed to apply natural language processing to large, real-life text-based projects. A brief survey of computational linguistic theory will include notions of syntax, semantics, and pragmatics. Practical techniques for preparing and pre-processing text will be taught in lab sessions. Typical commercial applications of NLP will be surveyed, with practical examples. Standard NLP techniques covered will include: topic modelling and LDA, and construction of word-embeddings. \nRecent recurrent deep learning architectures for text processing will be covered in depth, using examples from the research literature.  \n','\n',char(10)),replace('By the end of the course students should be able to:<ol><li>Have an advanced understanding of theory of syntax, semantics, and pragmatics</li><li>Have an advanced understanding techniques for basic processing of text corpora</li><li>Have an advanced understanding typical natural language processing tasks</li><li>Implement modern deep learning methods of natural language processing.</li></ol>\n','\n',char(10)),replace('22 hours lectures\n22 hours laboratories','\n',char(10)),replace('Natural Language Processing in Action: understanding, analysing, and generating text with Python, by Hobson and Cole, Springer 2017\n\nDeep Learning with Natural Language Processing by Li Deng and Yang Liu, Springer, July 2018-06-14\n\nThe Handbook of Computational Linguistics and Natural Language Processing (Blackwell Handbooks in Linguistics) by Alexander Clark, 2012\n\nApplied Text Analysis with Python, by Bengfort and Bilbro, O''Reilly 2018','\n',char(10)),'Verbal feedback on lab and class activites and project.',replace('70% Exam\n30% Project','\n',char(10)),NULL,NULL,0,2);
INSERT INTO modules VALUES('CS4490','','Computational Optimisation',4,'CS',30,90,0,10,15,'CS2860',replace('This course will provide students with advanced understanding of fundamental models of computational optimisation (CO) and important algorithms for solving CO problems; enable students to analyse CO algorithms using theoretical and computational methods; and discuss and compare available software packages for solving CO problems.\n\nCourse content:\n\nLinear programming (LP) model. Formulating problems as LP problems.\n\nGraphical solution. Simplex method.\n\nDuality in LP. Decomposition of LP problems. LP software.\n\nInteger Programming (IP). IP models. Branch-and-Bound algorithm.\n\nCO problems. Polynomial-time algorithms. Greedy-type algorithms. Construction heuristics and local search for the TSP.\n\nTheoretical and computational analysis of heuristics and meta-heuristics.','\n',char(10)),replace('By the end of the course students should be able to:<ol><li>understand and evaluate fundamental models of computational optimization (CO)</li><li>examine and apply the fundamental algorithms for solving CO problems</li><li>apply theoretical and computational methods to analyse CO algorithms</li><li>further develop algorithmic and mathematical skills</li></ol>\n','\n',char(10)),'Lecture based delivery.','M.W. Carter, C.C. Price, Operations Research: A Practical Introduction, CRC, 2001 (001.424 CAR)',NULL,replace('10% Coursework\n90% Examination','\n',char(10)),NULL,NULL,0,0);
INSERT INTO modules VALUES('CS4945','','Semantic Web',4,'CS',27,80,0,20,15,'C1840 or CS2841 (or equivalent)',replace('The Web, as it exists today, primarily supports human understanding and the interpretation of the vast information space it encompasses. However the Web was originally designed with a goal to support not only human-human communication but also as one that would enable automated machine processing of data with minimal human intervention. The Semantic Web is Tim Berners-Lee''s vision of a machine understandable and unambiguously computer interpretable Web. The rationale behind such a system is that most of the data currently posted on the web is buried in HTML files suitable for human reading and not for computers to manipulate meaningfully. The semantic Web, an extension of the current web, can be thought of as a globally linked database where information is given well-defined meaning using metadata for better enabling computers and humans to work in close cooperation. The realisation of a Semantic Web will thus make machine reasoning more ubiquitous and powerful, creating an environment where intelligent software agents can roam, carrying out sophisticated tasks for their users.\n\nThough the original motivation of the semantic web was to constitute the next generation of the WWW, the standards and technologies developed in the process have been found useful in specific realm enterprises as well. From this perspective the Semantic Web can be viewed as a semantically-rich data model that is more expressive than the usual relational data model used in standard databases systems, and is also more adequate to distributed and incomplete resources.\n\nThis course is about the notions, concepts, technologies and modelling techniques that constitute the Semantic Web, whose key distinguishing characteristics will be the support for and use of semantics in new, more effective, more intelligent, ways of managing information and supporting applications.','\n',char(10)),replace('By the end of the course students should be able to:<ol><li>demonstrate a mastery of the fundamental concepts, and standards of the semantic web</li><li>demonstrate an advanced understanding of the use of standards such as RDF, RDFS and OWL for modeling different scenarios and reasoning</li><li>demonstrate an advanced understanding of underlying logical theory behind the semantic web, for example Description Logic</li></ol>\n\n','\n',char(10)),replace('22 hours lectures\n5 hours laboratories','\n',char(10)),replace('Semantic Web for the Working Ontologist (Effective Modeling in RDFS and OWL) 2nd Edition, By Dean Allemang, James Hendler, Elsevier / Morgan Kaufmann, July 2011. \n\nA Semantic Web Primer (Cooperative Information Systems), 3rd Ed., by Grigoris Antoniou (Author), Paul Groth (Author) et al., 2012.\n\nSemantic Web Programming, John Hebeler, Matthew Fisher, Ryan Blace, Andrew Perez-Lopez, Wiley Publishing, Inc, 2009\n','\n',char(10)),'Oral feedback in lab sessions.',replace('80% Exam\n20% Coursework','\n',char(10)),NULL,NULL,0,1);
INSERT INTO modules VALUES('CS4910','','Running a Small Business',4,'CS',33,80,0,20,15,NULL,replace('The main aim of this course is to give a good background to students on how to run a small company. \n\nCourse content:\n\nIntroduction – types of Businesses, Organizational Functions/Structures, Business Processes fundamentals. \n\nStarting a Business – Business Plan, Budgeting and Investment Valuation Methods (e.g. ROI, TCO, NPV), Fund-raising aspects. \n\nBasics of Strategy and Planning – e.g. Definitions, SWOT Analysis, Porter’s 5 forces, types/elements of plans.  \n\nBusiness Financial Management – Basics of Accounting, Assets/Liabilities, CAPEX/OPEX, Balance Sheet, P&L, Cash Management, Financial Ratios.\n\nCapital Raising and the role/services of Banks – e.g. Financial Intermediation, Trade Finance, Payments, Loans, Financial Markets and Instruments.\n\nBasics of Information Systems – Overview & Landscape, underlying Technology elements, Architectural paradigms, Acquisition methods.\n\nERP and Human Resources Management Processes and Systems \n\nCustomer Relationship Management and Marketing concepts, CRM Systems\n\nFundamentals of Managing Oneself and Others – e.g. Leadership, Planning, Time and Stress Management, Negotiation, Goal-setting. \n\nRisk Management and Business Continuity elements\n\n','\n',char(10)),replace('By the end of the course students should be able to:<ol><li>Understand and explain fundamental concepts, terminology and processes of a business and its operating environment.</li><li>Apply basic strategy and financial management techniques.</li><li>Understand, analyze and compare types of Information Systems, architectural paradigms, acquisition models and key software applications of a modern business.</li><li>Comprehend the theoretical foundations of leadership and people management and be able to appraise their applicability in practice.</li><li>Explain and where appropriate apply the principles of Risk Management.</li></ol>\n','\n',char(10)),'Lecture based delivery.',replace('Good small business guide, 7th Edition: How to start and grow your own business, ISBN-10: 1408159597\nMichael Blackstaff, Finance for IT Decision Makers: A Practical Handbook, BCS, ISBN: 1780171226, 2012.\nK.C Laudon, J.P Laudon, Management Information Systems: Managing the Digital Firm, Pearson, ISBN-10: 0133898164.\nHBR''s 10 Must Reads for New Managers, Harvard Business Review, ISBN-10: 1633693023, 2017.\nHBR''s 10 Must Reads on Managing Yourself, Harvard Business Review, ISBN-10: 1422157997, 2011. \nHBR’s 10 Must Reads on Managing People, Harvard Business Review, ISBN-10: 1422158012, 2011.\nAdditional readings and handouts will be provided on specific topics, e.g. on Banks and Financial Services, Risk Management, Leadership, Negotiations, Time Management. \n','\n',char(10)),NULL,replace('80% Exam\n20% Report','\n',char(10)),NULL,NULL,0,0);
INSERT INTO modules VALUES('CS4915','','Standards, IP and Technology',4,'CS',33,70,10,20,15,NULL,'This course covers a number of topics under Standards (e.g. CMMI and ISO9000/9001), Intellectual Property (IP) and Technology, and their impact in computer science and software engineering. This includes aspects within IP, software licensing, standards processes and their implications, and multiple software engineering related technologies. Students will be expected to introduce or recap any topic based on reading materials handed out. The main aims of the course are to expose students to the overall environment in which the software industry operates, and to give them an understanding on the implications of standards and IP to the work of a computer scientist and software engineer.',replace('By the end of the course students should be able to:<ol><li>Demonstrate an understanding of standards, intellectual property and technologies in software engineering.</li><li>Critically assess software licenses.</li><li>Explain how standards are arrived at and the processes necessary to achieve consensus within a community.</li></ol>\n','\n',char(10)),'Lecture based delivery.','Students will be given online reading materials relevant to each topic.','Discussions in presentations',replace('70% Exam\n20% Report\n10% Presentation','\n',char(10)),NULL,NULL,0,0);
INSERT INTO modules VALUES('CS4870','','Wireless Sensor and Actuator Networks',4,'CS',44,50,0,50,15,'CS3840',replace('The course will combine formal lectures that will focus on the algorithms and the protocols behind wireless sensor and actuator networks and lab classes that will focus on how to build wireless sensor and actuator networks for a variety of applications.\n\nThe lectures will cover critical design factors for WSANs, the protocal stack, models and algorithms for WSANs, routing protocols and more advanced open research problems, such as topology control and mobility. \n\nThe practical classes will cover how to design and build wireless sensor networks and intelligent interactive devices with the ZigBee wireless networking protocol.  ','\n',char(10)),replace('By the end of the course students should be able to:<ul><li>Design, build, and test wireless sensor and actuator networks for a variety of application setups</li><li>Explore the design space and conduct trade-off analysis between performance and resources</li><li>Design and implement simple protocols and algorithms for wireless sensor and actuator networks</li><li>Think critically about open research problems</li></ul>\n\n','\n',char(10)),replace('29 hours lectures\n4 hours seminars\n11 hours laboratory classes','\n',char(10)),replace('Building Wireless Sensor Networks, Robert Faludi (without kit)\n\nAlgorithms and protocols for wireless sensor networks, Azzedine Boukerche.\n','\n',char(10)),'Feedback during lab sessions',replace('50% Project\n50% Exam','\n',char(10)),NULL,'WITHDRAWN',0,1);
CREATE TABLE IF NOT EXISTS "people" (
	"id"	TEXT,
	"name"	TEXT,
	"email"	TEXT,
	PRIMARY KEY("id")
);
INSERT INTO people VALUES('AJ','Adrian Johnstone','a.johnstone@rhul.ac.uk');
INSERT INTO people VALUES('NB','Nuno Barreiro','nuno.barreiro@rhul.ac.uk');
INSERT INTO people VALUES('JK','Johannes Kinder','johannes.kinder@rhul.ac.uk');
INSERT INTO people VALUES('DC','Dave Cohen','d.cohen.work@googlemail.com');
INSERT INTO people VALUES('JF','José Fiadeiro','Jose.Fiadeiro@rhul.ac.uk');
INSERT INTO people VALUES('CM','Carlos Matos','carlos.matos@rhul.ac.uk');
INSERT INTO people VALUES('HS','Hugh Shanahan','hugh@cs.rhul.ac.uk');
INSERT INTO people VALUES('IT','Iddo Tzameret','Iddo.Tzameret@rhul.ac.uk');
INSERT INTO people VALUES('EQ','Elizabeth Quaglia','Elizabeth.Quaglia@rhul.ac.uk');
INSERT INTO people VALUES('PK','Peter Komisarczuk','Peter.Komisarczuk@rhul.ac.uk');
INSERT INTO people VALUES('GK','Giorgios Koutsoukos','Giorgios.Koutsoukos@rhul.ac.uk');
INSERT INTO people VALUES('ES','Elizabeth Scott','eas@cs.rhul.ac.uk');
INSERT INTO people VALUES('ZYL','Zhiyuan Luo','zhiyuan@cs.rhul.ac.uk');
INSERT INTO people VALUES('GG','Gregory Gutin','gutin@cs.rhul.ac.uk');
INSERT INTO people VALUES('VV','Volodya Vovk','V.Vovk@rhul.ac.uk');
INSERT INTO people VALUES('KS','Kostas Stathis','kostas.stathis@rhul.ac.uk');
INSERT INTO people VALUES('KP','Kenny Paterson','Kenny.Paterson@rhul.ac.uk');
INSERT INTO people VALUES('DK','Daniel O''Keeffe','Daniel.OKeeffe@rhul.ac.uk');
INSERT INTO people VALUES('MH','Matthew Hague','matthew.hague@rhul.ac.uk');
INSERT INTO people VALUES('ZHL','Zhaohui Luo','zhaohui.luo@rhul.ac.uk');
INSERT INTO people VALUES('BP','Bertram Poettering','bertram.poettering@rhul.ac.uk');
INSERT INTO people VALUES('AP','Alberto Paccanaro','alberto@cs.rhul.ac.uk');
INSERT INTO people VALUES('MW','Magnus Wahlstrom','Magnus.Wahlstrom@rhul.ac.uk');
INSERT INTO people VALUES('YK','Yuri Kalnishkan','yuri.kalnishkan@rhul.ac.uk');
INSERT INTO people VALUES('GC','Gregory Chockler','gregory.chockler@rhul.ac.uk');
INSERT INTO people VALUES('CW','Chris Watkins','chrisw@cs.rhul.ac.uk');
CREATE TABLE assessment_components (
  mod_code text,
  name text,
  pcnt text,
  foreign key (mod_code) references modules(mod_code)
);
INSERT INTO assessment_components VALUES('CS1803','Practical Examination','40');
INSERT INTO assessment_components VALUES('CS1803','Coursework','30');
INSERT INTO assessment_components VALUES('CS1803','Coursework','30');
INSERT INTO assessment_components VALUES('CS1811','Examination','90');
INSERT INTO assessment_components VALUES('CS1811','Programming exercises','10');
INSERT INTO assessment_components VALUES('CS1812','Examination','90');
INSERT INTO assessment_components VALUES('CS1812','Programming exercises','10');
INSERT INTO assessment_components VALUES('CS1813','Examination','60');
INSERT INTO assessment_components VALUES('CS1813','Project','40');
INSERT INTO assessment_components VALUES('CS1820','Individual report','25');
INSERT INTO assessment_components VALUES('CS1820','Coursework','75');
INSERT INTO assessment_components VALUES('CS1830','Group project','40');
INSERT INTO assessment_components VALUES('CS1830','Individual assignments','60');
INSERT INTO assessment_components VALUES('CS1831','Group project','40');
INSERT INTO assessment_components VALUES('CS1831','Individual assignments','60');
INSERT INTO assessment_components VALUES('CS1840','Examination','90');
INSERT INTO assessment_components VALUES('CS1840','Set exercises','10');
INSERT INTO assessment_components VALUES('CS1860','Examination','90');
INSERT INTO assessment_components VALUES('CS1860','Worksheets','10');
INSERT INTO assessment_components VALUES('CS1870','Examination','90');
INSERT INTO assessment_components VALUES('CS1870','Coursework','10');
INSERT INTO assessment_components VALUES('CS1890','Examination','40');
INSERT INTO assessment_components VALUES('CS1890','Coursework','60');
INSERT INTO assessment_components VALUES('CS2800','Examination','60');
INSERT INTO assessment_components VALUES('CS2800','Coursework','40');
INSERT INTO assessment_components VALUES('CS2810','Project','100');
INSERT INTO assessment_components VALUES('CS2815','Project','100');
INSERT INTO assessment_components VALUES('CS2841','Examination','90');
INSERT INTO assessment_components VALUES('CS2841','Set exercises','10');
INSERT INTO assessment_components VALUES('CS2845','Examination','80');
INSERT INTO assessment_components VALUES('CS2845','Coursework','10');
INSERT INTO assessment_components VALUES('CS2845','Coursework','10');
INSERT INTO assessment_components VALUES('CS2847','Examination','40');
INSERT INTO assessment_components VALUES('CS2847','Project','60');
INSERT INTO assessment_components VALUES('CS2850','Examination','80');
INSERT INTO assessment_components VALUES('CS2850','Set exercises','20');
INSERT INTO assessment_components VALUES('CS2855','Examination','70');
INSERT INTO assessment_components VALUES('CS2855','Project','20');
INSERT INTO assessment_components VALUES('CS2855','Set exercises','10');
INSERT INTO assessment_components VALUES('CS2860','Examination','90');
INSERT INTO assessment_components VALUES('CS2860','Set exercises','10');
INSERT INTO assessment_components VALUES('CS2865','Examination','90');
INSERT INTO assessment_components VALUES('CS2865','Worksheets','10');
INSERT INTO assessment_components VALUES('CS2890','Examination','40');
INSERT INTO assessment_components VALUES('CS2890','Coursework','50');
INSERT INTO assessment_components VALUES('CS2890','Individual assignment','10');
INSERT INTO assessment_components VALUES('CS2900','Examination','70');
INSERT INTO assessment_components VALUES('CS2900','Set exercises','30');
INSERT INTO assessment_components VALUES('CS2910','Examination','70');
INSERT INTO assessment_components VALUES('CS2910','Set exercises','30');
INSERT INTO assessment_components VALUES('IY2760','Examination','80');
INSERT INTO assessment_components VALUES('IY2760','Coursework','20');
INSERT INTO assessment_components VALUES('IY2840','Examination','70');
INSERT INTO assessment_components VALUES('IY2840','Set exercises','30');
INSERT INTO assessment_components VALUES('CS3001','Coursework','100');
INSERT INTO assessment_components VALUES('CS3003','Examination','50');
INSERT INTO assessment_components VALUES('CS3003','Set exercises','10');
INSERT INTO assessment_components VALUES('CS3003','Reports','40');
INSERT INTO assessment_components VALUES('CS3110','Examination','90');
INSERT INTO assessment_components VALUES('CS3110','Coursework','10');
INSERT INTO assessment_components VALUES('CS3220','Examination','60');
INSERT INTO assessment_components VALUES('CS3220','Project','40');
INSERT INTO assessment_components VALUES('CS3250','Examination','80');
INSERT INTO assessment_components VALUES('CS3250','Assignments','20');
INSERT INTO assessment_components VALUES('CS3470','Examination','85');
INSERT INTO assessment_components VALUES('CS3470','Coursework','15');
INSERT INTO assessment_components VALUES('CS3480','Examination','80');
INSERT INTO assessment_components VALUES('CS3480','Assignments','20');
INSERT INTO assessment_components VALUES('CS3490','Examination','90');
INSERT INTO assessment_components VALUES('CS3490','Worksheets','10');
INSERT INTO assessment_components VALUES('CS3510','Examination','80');
INSERT INTO assessment_components VALUES('CS3510','Coursework','20');
INSERT INTO assessment_components VALUES('CS3760','Examination','80');
INSERT INTO assessment_components VALUES('CS3760','Set exercises','20');
INSERT INTO assessment_components VALUES('CS3810','Coursework','100');
INSERT INTO assessment_components VALUES('CS3821','Coursework','100');
INSERT INTO assessment_components VALUES('CS3822','Coursework','100');
INSERT INTO assessment_components VALUES('IY3821','Coursework','100');
INSERT INTO assessment_components VALUES('CS3846','Examination','40');
INSERT INTO assessment_components VALUES('CS3846','Coursework','60');
INSERT INTO assessment_components VALUES('CS3870','Examination','100');
INSERT INTO assessment_components VALUES('CS3920','Examination','80');
INSERT INTO assessment_components VALUES('CS3920','Set exercises','20');
INSERT INTO assessment_components VALUES('CS3930','Examination','80');
INSERT INTO assessment_components VALUES('CS3930','Coursework','20');
INSERT INTO assessment_components VALUES('CS3940','Examination','70');
INSERT INTO assessment_components VALUES('CS3940','Project','30');
INSERT INTO assessment_components VALUES('CS3945','Examination','80');
INSERT INTO assessment_components VALUES('CS3945','Set exercises','20');
INSERT INTO assessment_components VALUES('CS4001','Coursework','100');
INSERT INTO assessment_components VALUES('CS4100','Examination','80');
INSERT INTO assessment_components VALUES('CS4100','Set exercises','20');
INSERT INTO assessment_components VALUES('CS4200','Examination','80');
INSERT INTO assessment_components VALUES('CS4200','Set exercises','20');
INSERT INTO assessment_components VALUES('CS4234','Examination','70');
INSERT INTO assessment_components VALUES('CS4234','Project','30');
INSERT INTO assessment_components VALUES('CS4504','Examination','60');
INSERT INTO assessment_components VALUES('CS4504','Project','40');
INSERT INTO assessment_components VALUES('CS4821','Project','100');
INSERT INTO assessment_components VALUES('CS4822','Project','100');
INSERT INTO assessment_components VALUES('CS4825','Project','100');
INSERT INTO assessment_components VALUES('CS4860','Examination','70');
INSERT INTO assessment_components VALUES('CS4860','Project','30');
INSERT INTO assessment_components VALUES('CS4950','Examination','80');
INSERT INTO assessment_components VALUES('CS4950','Project','10');
INSERT INTO assessment_components VALUES('CS4950','Set exercises','10');
INSERT INTO assessment_components VALUES('IY4500','Project','100');
CREATE TABLE IF NOT EXISTS "non_condonable_modules" (
	"ucas_code"	TEXT,
	"mod_code"	TEXT,
	FOREIGN KEY("mod_code") REFERENCES "modules"("mod_code"),
	FOREIGN KEY("ucas_code") REFERENCES "programmes"("ucas_code")
);
INSERT INTO non_condonable_modules VALUES('G400','CS1811');
INSERT INTO non_condonable_modules VALUES('G400','CS1812');
INSERT INTO non_condonable_modules VALUES('G400','CS1822');
INSERT INTO non_condonable_modules VALUES('G400','CS2800');
INSERT INTO non_condonable_modules VALUES('G400','CS2810');
INSERT INTO non_condonable_modules VALUES('G4G7','CS1811');
INSERT INTO non_condonable_modules VALUES('G4G7','CS1812');
INSERT INTO non_condonable_modules VALUES('G4G7','CS1822');
INSERT INTO non_condonable_modules VALUES('G4G7','CS2800');
INSERT INTO non_condonable_modules VALUES('G4G7','CS2810');
INSERT INTO non_condonable_modules VALUES('G407','CS1811');
INSERT INTO non_condonable_modules VALUES('G407','CS1812');
INSERT INTO non_condonable_modules VALUES('G407','CS1822');
INSERT INTO non_condonable_modules VALUES('G407','CS2800');
INSERT INTO non_condonable_modules VALUES('G407','CS2810');
INSERT INTO non_condonable_modules VALUES('G464','CS1811');
INSERT INTO non_condonable_modules VALUES('G464','CS1812');
INSERT INTO non_condonable_modules VALUES('G464','CS1822');
INSERT INTO non_condonable_modules VALUES('G464','CS2800');
INSERT INTO non_condonable_modules VALUES('G464','CS2810');
INSERT INTO non_condonable_modules VALUES('G464','CS1813');
INSERT INTO non_condonable_modules VALUES('G464','CS2815');
INSERT INTO non_condonable_modules VALUES('GG41','CS1811');
INSERT INTO non_condonable_modules VALUES('GG41','CS1812');
INSERT INTO non_condonable_modules VALUES('GG41','CS1822');
INSERT INTO non_condonable_modules VALUES('GG41','CS2800');
INSERT INTO non_condonable_modules VALUES('GG41','CS2810');
INSERT INTO non_condonable_modules VALUES('G4N2','CS1811');
INSERT INTO non_condonable_modules VALUES('G4N2','CS1812');
INSERT INTO non_condonable_modules VALUES('G4N2','CS2800');
INSERT INTO non_condonable_modules VALUES('G4N2','CS2810');
INSERT INTO non_condonable_modules VALUES('G403','CS1811');
INSERT INTO non_condonable_modules VALUES('G403','CS1812');
INSERT INTO non_condonable_modules VALUES('G403','CS1822');
INSERT INTO non_condonable_modules VALUES('G403','CS2800');
INSERT INTO non_condonable_modules VALUES('G403','CS2810');
INSERT INTO non_condonable_modules VALUES('G403','CS4821');
INSERT INTO non_condonable_modules VALUES('G402','CS1811');
INSERT INTO non_condonable_modules VALUES('G402','CS1812');
INSERT INTO non_condonable_modules VALUES('G402','CS1822');
INSERT INTO non_condonable_modules VALUES('G402','CS2800');
INSERT INTO non_condonable_modules VALUES('G402','CS2810');
INSERT INTO non_condonable_modules VALUES('G402','CS3001');
INSERT INTO non_condonable_modules VALUES('G404','CS1811');
INSERT INTO non_condonable_modules VALUES('G404','CS1812');
INSERT INTO non_condonable_modules VALUES('G404','CS1822');
INSERT INTO non_condonable_modules VALUES('G404','CS2800');
INSERT INTO non_condonable_modules VALUES('G404','CS2810');
INSERT INTO non_condonable_modules VALUES('G404','CS4821');
INSERT INTO non_condonable_modules VALUES('G404','CS4001');
INSERT INTO non_condonable_modules VALUES('GG47','CS1811');
INSERT INTO non_condonable_modules VALUES('GG47','CS1812');
INSERT INTO non_condonable_modules VALUES('GG47','CS1822');
INSERT INTO non_condonable_modules VALUES('GG47','CS2800');
INSERT INTO non_condonable_modules VALUES('GG47','CS2810');
INSERT INTO non_condonable_modules VALUES('GG47','CS4822');
INSERT INTO non_condonable_modules VALUES('G4G8','CS1811');
INSERT INTO non_condonable_modules VALUES('G4G8','CS1812');
INSERT INTO non_condonable_modules VALUES('G4G8','CS1822');
INSERT INTO non_condonable_modules VALUES('G4G8','CS2800');
INSERT INTO non_condonable_modules VALUES('G4G8','CS2810');
INSERT INTO non_condonable_modules VALUES('G4G8','CS3001');
INSERT INTO non_condonable_modules VALUES('GG74','CS1811');
INSERT INTO non_condonable_modules VALUES('GG74','CS1812');
INSERT INTO non_condonable_modules VALUES('GG74','CS1822');
INSERT INTO non_condonable_modules VALUES('GG74','CS2800');
INSERT INTO non_condonable_modules VALUES('GG74','CS2810');
INSERT INTO non_condonable_modules VALUES('GG74','CS4822');
INSERT INTO non_condonable_modules VALUES('GG74','CS4001');
INSERT INTO non_condonable_modules VALUES('G500','CS1811');
INSERT INTO non_condonable_modules VALUES('G500','CS1812');
INSERT INTO non_condonable_modules VALUES('G500','CS1822');
INSERT INTO non_condonable_modules VALUES('G500','CS2800');
INSERT INTO non_condonable_modules VALUES('G500','CS2810');
INSERT INTO non_condonable_modules VALUES('G500','IY4500');
INSERT INTO non_condonable_modules VALUES('G406','CS1811');
INSERT INTO non_condonable_modules VALUES('G406','CS1812');
INSERT INTO non_condonable_modules VALUES('G406','CS1822');
INSERT INTO non_condonable_modules VALUES('G406','CS2800');
INSERT INTO non_condonable_modules VALUES('G406','CS2810');
INSERT INTO non_condonable_modules VALUES('G406','CS3001');
INSERT INTO non_condonable_modules VALUES('G502','CS1811');
INSERT INTO non_condonable_modules VALUES('G502','CS1812');
INSERT INTO non_condonable_modules VALUES('G502','CS1822');
INSERT INTO non_condonable_modules VALUES('G502','CS2800');
INSERT INTO non_condonable_modules VALUES('G502','CS2810');
INSERT INTO non_condonable_modules VALUES('G502','IY4500');
INSERT INTO non_condonable_modules VALUES('G502','CS4001');
INSERT INTO non_condonable_modules VALUES('G461','CS1811');
INSERT INTO non_condonable_modules VALUES('G461','CS1812');
INSERT INTO non_condonable_modules VALUES('G461','CS1822');
INSERT INTO non_condonable_modules VALUES('G461','CS2800');
INSERT INTO non_condonable_modules VALUES('G461','CS2810');
INSERT INTO non_condonable_modules VALUES('G461','CS1813');
INSERT INTO non_condonable_modules VALUES('G461','CS2815');
INSERT INTO non_condonable_modules VALUES('G461','CS4825');
INSERT INTO non_condonable_modules VALUES('G462','CS1811');
INSERT INTO non_condonable_modules VALUES('G462','CS1812');
INSERT INTO non_condonable_modules VALUES('G462','CS1822');
INSERT INTO non_condonable_modules VALUES('G462','CS2800');
INSERT INTO non_condonable_modules VALUES('G462','CS2810');
INSERT INTO non_condonable_modules VALUES('G462','CS1813');
INSERT INTO non_condonable_modules VALUES('G462','CS2815');
INSERT INTO non_condonable_modules VALUES('G462','CS3001');
INSERT INTO non_condonable_modules VALUES('G463','CS1811');
INSERT INTO non_condonable_modules VALUES('G463','CS1812');
INSERT INTO non_condonable_modules VALUES('G463','CS1822');
INSERT INTO non_condonable_modules VALUES('G463','CS2800');
INSERT INTO non_condonable_modules VALUES('G463','CS2810');
INSERT INTO non_condonable_modules VALUES('G463','CS1813');
INSERT INTO non_condonable_modules VALUES('G463','CS2815');
INSERT INTO non_condonable_modules VALUES('G463','CS4825');
INSERT INTO non_condonable_modules VALUES('G463','CS4001');
INSERT INTO non_condonable_modules VALUES('comptech','CS3824');
CREATE TABLE IF NOT EXISTS "core_modules" (
	"ucas_code"	TEXT,
	"mod_code"	TEXT,
	"alternative"	TEXT,
	FOREIGN KEY("alternative") REFERENCES "modules"("mod_code"),
	FOREIGN KEY("mod_code") REFERENCES "modules"("mod_code"),
	FOREIGN KEY("ucas_code") REFERENCES "programmes"("ucas_code")
);
INSERT INTO core_modules VALUES('G400','CS1811','');
INSERT INTO core_modules VALUES('G400','CS1812','CS1813');
INSERT INTO core_modules VALUES('G400','CS1822','CS1821');
INSERT INTO core_modules VALUES('G400','CS1840','');
INSERT INTO core_modules VALUES('G400','CS1860','');
INSERT INTO core_modules VALUES('G400','CS1870','');
INSERT INTO core_modules VALUES('G400','CS1890','');
INSERT INTO core_modules VALUES('G400','CS2800','');
INSERT INTO core_modules VALUES('G400','CS2810','');
INSERT INTO core_modules VALUES('G400','CS2850','');
INSERT INTO core_modules VALUES('G400','CS2855','');
INSERT INTO core_modules VALUES('G400','CS2860','');
INSERT INTO core_modules VALUES('G400','IY2760','');
INSERT INTO core_modules VALUES('G400','CS3821','');
INSERT INTO core_modules VALUES('G4G7','CS1811','');
INSERT INTO core_modules VALUES('G4G7','CS1812','CS1813');
INSERT INTO core_modules VALUES('G4G7','CS1822','CS1821');
INSERT INTO core_modules VALUES('G4G7','CS1840','');
INSERT INTO core_modules VALUES('G4G7','CS1860','');
INSERT INTO core_modules VALUES('G4G7','CS1870','');
INSERT INTO core_modules VALUES('G4G7','CS1890','');
INSERT INTO core_modules VALUES('G4G7','CS2800','');
INSERT INTO core_modules VALUES('G4G7','CS2810','');
INSERT INTO core_modules VALUES('G4G7','CS2850','');
INSERT INTO core_modules VALUES('G4G7','CS2855','');
INSERT INTO core_modules VALUES('G4G7','CS2860','');
INSERT INTO core_modules VALUES('G4G7','IY2760','');
INSERT INTO core_modules VALUES('G4G7','CS3822','');
INSERT INTO core_modules VALUES('G407','CS1811','');
INSERT INTO core_modules VALUES('G407','CS1812','CS1813');
INSERT INTO core_modules VALUES('G407','CS1822','CS1821');
INSERT INTO core_modules VALUES('G407','CS1840','');
INSERT INTO core_modules VALUES('G407','CS1860','');
INSERT INTO core_modules VALUES('G407','CS1870','');
INSERT INTO core_modules VALUES('G407','CS1890','');
INSERT INTO core_modules VALUES('G407','CS2800','');
INSERT INTO core_modules VALUES('G407','CS2810','');
INSERT INTO core_modules VALUES('G407','CS2850','');
INSERT INTO core_modules VALUES('G407','CS2855','');
INSERT INTO core_modules VALUES('G407','CS2860','');
INSERT INTO core_modules VALUES('G407','IY2760','');
INSERT INTO core_modules VALUES('G407','IY2840','');
INSERT INTO core_modules VALUES('G407','IY3501','');
INSERT INTO core_modules VALUES('G407','IY3660','');
INSERT INTO core_modules VALUES('G407','IY3821','');
INSERT INTO core_modules VALUES('G407','IY3840','');
INSERT INTO core_modules VALUES('G464','CS1811','');
INSERT INTO core_modules VALUES('G464','CS1813','');
INSERT INTO core_modules VALUES('G464','CS1822','CS1821');
INSERT INTO core_modules VALUES('G464','CS1840','');
INSERT INTO core_modules VALUES('G464','CS1860','');
INSERT INTO core_modules VALUES('G464','CS1870','');
INSERT INTO core_modules VALUES('G464','CS1890','');
INSERT INTO core_modules VALUES('G464','CS2800','');
INSERT INTO core_modules VALUES('G464','CS2815','');
INSERT INTO core_modules VALUES('G464','CS2850','');
INSERT INTO core_modules VALUES('G464','CS2855','');
INSERT INTO core_modules VALUES('G464','CS2860','');
INSERT INTO core_modules VALUES('G464','IY2760','');
INSERT INTO core_modules VALUES('G464','IY2840','');
INSERT INTO core_modules VALUES('G464','CS3821','');
INSERT INTO core_modules VALUES('G464','CS3846','');
INSERT INTO core_modules VALUES('G464','IY3840','');
INSERT INTO core_modules VALUES('GG41','CS1811','');
INSERT INTO core_modules VALUES('GG41','CS1812','CS1813');
INSERT INTO core_modules VALUES('GG41','CS1840','');
INSERT INTO core_modules VALUES('GG41','CS1890','');
INSERT INTO core_modules VALUES('GG41','MT1710','');
INSERT INTO core_modules VALUES('GG41','MT1720','');
INSERT INTO core_modules VALUES('GG41','MT1810','');
INSERT INTO core_modules VALUES('GG41','MT1820','');
INSERT INTO core_modules VALUES('GG41','CS2800','');
INSERT INTO core_modules VALUES('GG41','CS2810','');
INSERT INTO core_modules VALUES('GG41','CS2860','');
INSERT INTO core_modules VALUES('GG41','MT2630','');
INSERT INTO core_modules VALUES('GG41','MT2800','');
INSERT INTO core_modules VALUES('G4N2','CS1811','');
INSERT INTO core_modules VALUES('G4N2','CS1812','CS1813');
INSERT INTO core_modules VALUES('G4N2','CS1840','');
INSERT INTO core_modules VALUES('G4N2','CS1860','');
INSERT INTO core_modules VALUES('G4N2','CS1890','');
INSERT INTO core_modules VALUES('G4N2','CS2800','');
INSERT INTO core_modules VALUES('G4N2','CS2810','');
INSERT INTO core_modules VALUES('G4N2','CS2855','');
INSERT INTO core_modules VALUES('G4N2','CS2860','');
INSERT INTO core_modules VALUES('G4N2','IY2760','');
INSERT INTO core_modules VALUES('G403','CS1811','');
INSERT INTO core_modules VALUES('G403','CS1812','CS1813');
INSERT INTO core_modules VALUES('G403','CS1822','CS1821');
INSERT INTO core_modules VALUES('G403','CS1840','');
INSERT INTO core_modules VALUES('G403','CS1860','');
INSERT INTO core_modules VALUES('G403','CS1870','');
INSERT INTO core_modules VALUES('G403','CS1890','');
INSERT INTO core_modules VALUES('G403','CS2800','');
INSERT INTO core_modules VALUES('G403','CS2810','');
INSERT INTO core_modules VALUES('G403','CS2850','');
INSERT INTO core_modules VALUES('G403','CS2855','');
INSERT INTO core_modules VALUES('G403','CS2860','');
INSERT INTO core_modules VALUES('G403','IY2760','');
INSERT INTO core_modules VALUES('G403','CS4821','');
INSERT INTO core_modules VALUES('G402','CS1811','');
INSERT INTO core_modules VALUES('G402','CS1812','CS1813');
INSERT INTO core_modules VALUES('G402','CS1822','CS1821');
INSERT INTO core_modules VALUES('G402','CS1840','');
INSERT INTO core_modules VALUES('G402','CS1860','');
INSERT INTO core_modules VALUES('G402','CS1870','');
INSERT INTO core_modules VALUES('G402','CS1890','');
INSERT INTO core_modules VALUES('G402','CS2800','');
INSERT INTO core_modules VALUES('G402','CS2810','');
INSERT INTO core_modules VALUES('G402','CS2850','');
INSERT INTO core_modules VALUES('G402','CS2855','');
INSERT INTO core_modules VALUES('G402','CS2860','');
INSERT INTO core_modules VALUES('G402','IY2760','');
INSERT INTO core_modules VALUES('G402','CS3001','');
INSERT INTO core_modules VALUES('G402','CS3821','');
INSERT INTO core_modules VALUES('G404','CS1811','');
INSERT INTO core_modules VALUES('G404','CS1812','CS1813');
INSERT INTO core_modules VALUES('G404','CS1822','CS1821');
INSERT INTO core_modules VALUES('G404','CS1840','');
INSERT INTO core_modules VALUES('G404','CS1860','');
INSERT INTO core_modules VALUES('G404','CS1870','');
INSERT INTO core_modules VALUES('G404','CS1890','');
INSERT INTO core_modules VALUES('G404','CS2800','');
INSERT INTO core_modules VALUES('G404','CS2810','');
INSERT INTO core_modules VALUES('G404','CS2850','');
INSERT INTO core_modules VALUES('G404','CS2855','');
INSERT INTO core_modules VALUES('G404','CS2860','');
INSERT INTO core_modules VALUES('G404','IY2760','');
INSERT INTO core_modules VALUES('G404','CS4001','');
INSERT INTO core_modules VALUES('G404','CS4821','');
INSERT INTO core_modules VALUES('GG47','CS1811','');
INSERT INTO core_modules VALUES('GG47','CS1812','CS1813');
INSERT INTO core_modules VALUES('GG47','CS1822','CS1821');
INSERT INTO core_modules VALUES('GG47','CS1840','');
INSERT INTO core_modules VALUES('GG47','CS1860','');
INSERT INTO core_modules VALUES('GG47','CS1870','');
INSERT INTO core_modules VALUES('GG47','CS1890','');
INSERT INTO core_modules VALUES('GG47','CS2800','');
INSERT INTO core_modules VALUES('GG47','CS2810','');
INSERT INTO core_modules VALUES('GG47','CS2850','');
INSERT INTO core_modules VALUES('GG47','CS2855','');
INSERT INTO core_modules VALUES('GG47','CS2860','');
INSERT INTO core_modules VALUES('GG47','IY2760','');
INSERT INTO core_modules VALUES('GG47','CS4822','');
INSERT INTO core_modules VALUES('G4G8','CS1811','');
INSERT INTO core_modules VALUES('G4G8','CS1812','CS1813');
INSERT INTO core_modules VALUES('G4G8','CS1822','CS1821');
INSERT INTO core_modules VALUES('G4G8','CS1840','');
INSERT INTO core_modules VALUES('G4G8','CS1860','');
INSERT INTO core_modules VALUES('G4G8','CS1870','');
INSERT INTO core_modules VALUES('G4G8','CS1890','');
INSERT INTO core_modules VALUES('G4G8','CS2800','');
INSERT INTO core_modules VALUES('G4G8','CS2810','');
INSERT INTO core_modules VALUES('G4G8','CS2850','');
INSERT INTO core_modules VALUES('G4G8','CS2855','');
INSERT INTO core_modules VALUES('G4G8','CS2860','');
INSERT INTO core_modules VALUES('G4G8','IY2760','');
INSERT INTO core_modules VALUES('G4G8','CS3001','');
INSERT INTO core_modules VALUES('G4G8','CS3822','');
INSERT INTO core_modules VALUES('GG74','CS1811','');
INSERT INTO core_modules VALUES('GG74','CS1812','CS1813');
INSERT INTO core_modules VALUES('GG74','CS1822','CS1821');
INSERT INTO core_modules VALUES('GG74','CS1840','');
INSERT INTO core_modules VALUES('GG74','CS1860','');
INSERT INTO core_modules VALUES('GG74','CS1870','');
INSERT INTO core_modules VALUES('GG74','CS1890','');
INSERT INTO core_modules VALUES('GG74','CS2800','');
INSERT INTO core_modules VALUES('GG74','CS2810','');
INSERT INTO core_modules VALUES('GG74','CS2850','');
INSERT INTO core_modules VALUES('GG74','CS2855','');
INSERT INTO core_modules VALUES('GG74','CS2860','');
INSERT INTO core_modules VALUES('GG74','IY2760','');
INSERT INTO core_modules VALUES('GG74','CS4001','');
INSERT INTO core_modules VALUES('GG74','CS4822','');
INSERT INTO core_modules VALUES('G500','CS1811','');
INSERT INTO core_modules VALUES('G500','CS1812','CS1813');
INSERT INTO core_modules VALUES('G500','CS1822','CS1821');
INSERT INTO core_modules VALUES('G500','CS1840','');
INSERT INTO core_modules VALUES('G500','CS1860','');
INSERT INTO core_modules VALUES('G500','CS1870','');
INSERT INTO core_modules VALUES('G500','CS1890','');
INSERT INTO core_modules VALUES('G500','CS2800','');
INSERT INTO core_modules VALUES('G500','CS2810','');
INSERT INTO core_modules VALUES('G500','CS2850','');
INSERT INTO core_modules VALUES('G500','CS2855','');
INSERT INTO core_modules VALUES('G500','CS2860','');
INSERT INTO core_modules VALUES('G500','IY2760','');
INSERT INTO core_modules VALUES('G500','IY2840','');
INSERT INTO core_modules VALUES('G500','IY3660','');
INSERT INTO core_modules VALUES('G500','IY3840','');
INSERT INTO core_modules VALUES('G500','IY4500','');
INSERT INTO core_modules VALUES('G500','IY4501','');
INSERT INTO core_modules VALUES('G500','IY4523','');
INSERT INTO core_modules VALUES('G500','IY4610','');
INSERT INTO core_modules VALUES('G406','CS1811','');
INSERT INTO core_modules VALUES('G406','CS1812','CS1813');
INSERT INTO core_modules VALUES('G406','CS1822','CS1821');
INSERT INTO core_modules VALUES('G406','CS1840','');
INSERT INTO core_modules VALUES('G406','CS1860','');
INSERT INTO core_modules VALUES('G406','CS1870','');
INSERT INTO core_modules VALUES('G406','CS1890','');
INSERT INTO core_modules VALUES('G406','CS2800','');
INSERT INTO core_modules VALUES('G406','CS2810','');
INSERT INTO core_modules VALUES('G406','CS2850','');
INSERT INTO core_modules VALUES('G406','CS2855','');
INSERT INTO core_modules VALUES('G406','CS2860','');
INSERT INTO core_modules VALUES('G406','IY2760','');
INSERT INTO core_modules VALUES('G406','IY2840','');
INSERT INTO core_modules VALUES('G406','CS3001','');
INSERT INTO core_modules VALUES('G406','IY3501','');
INSERT INTO core_modules VALUES('G406','IY3660','');
INSERT INTO core_modules VALUES('G406','IY3821','');
INSERT INTO core_modules VALUES('G406','IY3840','');
INSERT INTO core_modules VALUES('G502','CS1811','');
INSERT INTO core_modules VALUES('G502','CS1812','CS1813');
INSERT INTO core_modules VALUES('G502','CS1822','CS1821');
INSERT INTO core_modules VALUES('G502','CS1840','');
INSERT INTO core_modules VALUES('G502','CS1860','');
INSERT INTO core_modules VALUES('G502','CS1870','');
INSERT INTO core_modules VALUES('G502','CS1890','');
INSERT INTO core_modules VALUES('G502','CS2800','');
INSERT INTO core_modules VALUES('G502','CS2810','');
INSERT INTO core_modules VALUES('G502','CS2850','');
INSERT INTO core_modules VALUES('G502','CS2855','');
INSERT INTO core_modules VALUES('G502','CS2860','');
INSERT INTO core_modules VALUES('G502','IY2760','');
INSERT INTO core_modules VALUES('G502','IY2840','');
INSERT INTO core_modules VALUES('G502','IY3660','');
INSERT INTO core_modules VALUES('G502','IY3840','');
INSERT INTO core_modules VALUES('G502','CS4001','');
INSERT INTO core_modules VALUES('G502','IY4500','');
INSERT INTO core_modules VALUES('G502','IY4501','');
INSERT INTO core_modules VALUES('G502','IY4523','');
INSERT INTO core_modules VALUES('G502','IY4610','');
INSERT INTO core_modules VALUES('G461','CS1811','');
INSERT INTO core_modules VALUES('G461','CS1813','');
INSERT INTO core_modules VALUES('G461','CS1822','CS1821');
INSERT INTO core_modules VALUES('G461','CS1840','');
INSERT INTO core_modules VALUES('G461','CS1860','');
INSERT INTO core_modules VALUES('G461','CS1870','');
INSERT INTO core_modules VALUES('G461','CS1890','');
INSERT INTO core_modules VALUES('G461','CS2800','');
INSERT INTO core_modules VALUES('G461','CS2815','');
INSERT INTO core_modules VALUES('G461','CS2850','');
INSERT INTO core_modules VALUES('G461','CS2855','');
INSERT INTO core_modules VALUES('G461','CS2860','');
INSERT INTO core_modules VALUES('G461','IY2760','');
INSERT INTO core_modules VALUES('G461','IY2840','');
INSERT INTO core_modules VALUES('G461','CS3821','');
INSERT INTO core_modules VALUES('G461','CS3846','');
INSERT INTO core_modules VALUES('G461','IY3840','');
INSERT INTO core_modules VALUES('G461','CS4825','');
INSERT INTO core_modules VALUES('G462','CS1811','');
INSERT INTO core_modules VALUES('G462','CS1813','');
INSERT INTO core_modules VALUES('G462','CS1822','CS1821');
INSERT INTO core_modules VALUES('G462','CS1840','');
INSERT INTO core_modules VALUES('G462','CS1860','');
INSERT INTO core_modules VALUES('G462','CS1870','');
INSERT INTO core_modules VALUES('G462','CS1890','');
INSERT INTO core_modules VALUES('G462','CS2800','');
INSERT INTO core_modules VALUES('G462','CS2815','');
INSERT INTO core_modules VALUES('G462','CS2850','');
INSERT INTO core_modules VALUES('G462','CS2855','');
INSERT INTO core_modules VALUES('G462','CS2860','');
INSERT INTO core_modules VALUES('G462','IY2760','');
INSERT INTO core_modules VALUES('G462','IY2840','');
INSERT INTO core_modules VALUES('G462','CS3001','');
INSERT INTO core_modules VALUES('G462','CS3821','');
INSERT INTO core_modules VALUES('G462','CS3846','');
INSERT INTO core_modules VALUES('G462','IY3840','');
INSERT INTO core_modules VALUES('G463','CS1811','');
INSERT INTO core_modules VALUES('G463','CS1813','');
INSERT INTO core_modules VALUES('G463','CS1822','CS1821');
INSERT INTO core_modules VALUES('G463','CS1840','');
INSERT INTO core_modules VALUES('G463','CS1860','');
INSERT INTO core_modules VALUES('G463','CS1870','');
INSERT INTO core_modules VALUES('G463','CS1890','');
INSERT INTO core_modules VALUES('G463','CS2800','');
INSERT INTO core_modules VALUES('G463','CS2815','');
INSERT INTO core_modules VALUES('G463','CS2850','');
INSERT INTO core_modules VALUES('G463','CS2855','');
INSERT INTO core_modules VALUES('G463','CS2860','');
INSERT INTO core_modules VALUES('G463','IY2760','');
INSERT INTO core_modules VALUES('G463','IY2840','');
INSERT INTO core_modules VALUES('G463','CS3821','');
INSERT INTO core_modules VALUES('G463','CS3846','');
INSERT INTO core_modules VALUES('G463','IY3840','');
INSERT INTO core_modules VALUES('G463','CS4001','');
INSERT INTO core_modules VALUES('G463','CS4825','');
INSERT INTO core_modules VALUES('comptech','CS1811',NULL);
INSERT INTO core_modules VALUES('comptech','CS1812','CS1813');
INSERT INTO core_modules VALUES('comptech','CS1821','CS1822');
INSERT INTO core_modules VALUES('comptech','CS1840',NULL);
INSERT INTO core_modules VALUES('comptech','CS1860',NULL);
INSERT INTO core_modules VALUES('comptech','CS1890',NULL);
INSERT INTO core_modules VALUES('comptech','CS1870',NULL);
INSERT INTO core_modules VALUES('comptech','CS2800',NULL);
INSERT INTO core_modules VALUES('comptech','CS2847',NULL);
INSERT INTO core_modules VALUES('comptech','CS2850',NULL);
INSERT INTO core_modules VALUES('comptech','CS2855',NULL);
INSERT INTO core_modules VALUES('comptech','CS2910',NULL);
INSERT INTO core_modules VALUES('comptech','IY2760',NULL);
INSERT INTO core_modules VALUES('comptech','CS3824',NULL);
INSERT INTO core_modules VALUES('comptech','CS2810',NULL);
CREATE TABLE IF NOT EXISTS "non_options" (
	"ucas_code"	TEXT,
	"mod_code"	TEXT,
	FOREIGN KEY("ucas_code") REFERENCES "programmes"("ucas_code"),
	FOREIGN KEY("mod_code") REFERENCES "_alter0_modules"("mod_code")
);
INSERT INTO non_options VALUES('comptech','CS3846');
INSERT INTO non_options VALUES('comptech','CS2847');
INSERT INTO non_options VALUES(NULL,'CS1811');
INSERT INTO non_options VALUES(NULL,'CS1812');
INSERT INTO non_options VALUES(NULL,'CS1813');
INSERT INTO non_options VALUES(NULL,'CS1820');
INSERT INTO non_options VALUES(NULL,'CS1830');
INSERT INTO non_options VALUES(NULL,'CS2810');
INSERT INTO non_options VALUES(NULL,'CS2815');
INSERT INTO non_options VALUES(NULL,'CS1821');
INSERT INTO non_options VALUES(NULL,'CS1822');
INSERT INTO non_options VALUES(NULL,'CS1823');
INSERT INTO non_options VALUES(NULL,'CS3001');
INSERT INTO non_options VALUES(NULL,'CS4001');
INSERT INTO non_options VALUES(NULL,'CS3810');
INSERT INTO non_options VALUES(NULL,'CS3821');
INSERT INTO non_options VALUES(NULL,'CS3822');
INSERT INTO non_options VALUES(NULL,'IY3821');
INSERT INTO non_options VALUES(NULL,'CS4822');
INSERT INTO non_options VALUES(NULL,'CS4825');
INSERT INTO non_options VALUES(NULL,'IY4500');
CREATE TABLE IF NOT EXISTS "module_variants" (
	"major_code"	TEXT,
	"minor_code"	TEXT,
	FOREIGN KEY("minor_code") REFERENCES "modules"("mod_code"),
	FOREIGN KEY("major_code") REFERENCES "modules"("mod_code")
);
INSERT INTO module_variants VALUES('CS1860','CS2865');
INSERT INTO module_variants VALUES('CS1890','CS2890');
INSERT INTO module_variants VALUES('IY2760','DC3760');
INSERT INTO module_variants VALUES('CS3821','CS3822');
INSERT INTO module_variants VALUES('CS3821','IY3821');
INSERT INTO module_variants VALUES('CS4821','CS4822');
INSERT INTO module_variants VALUES('CS4821','IY4500');
INSERT INTO module_variants VALUES('CS3821','CS3822');
INSERT INTO module_variants VALUES('CS3821','IY3821');
INSERT INTO module_variants VALUES('CS4821','CS4822');
INSERT INTO module_variants VALUES('CS3846','CS2846');
INSERT INTO module_variants VALUES('CS3846','CS2847');
INSERT INTO module_variants VALUES('CS1830','CS1831');
INSERT INTO module_variants VALUES('CS2810','CS2815');
INSERT INTO module_variants VALUES('CS1840','CS2841');
INSERT INTO module_variants VALUES('CS2810','DC3811');
INSERT INTO module_variants VALUES('CS1822','CS1821');
INSERT INTO module_variants VALUES('CS1822','DC1821');
INSERT INTO module_variants VALUES('CS3001','CS4001');
INSERT INTO module_variants VALUES('CS3220','CS4220');
INSERT INTO module_variants VALUES('CS3490','CS4490');
INSERT INTO module_variants VALUES('IY3501','IY4501');
INSERT INTO module_variants VALUES('CS3920','CS4920');
INSERT INTO module_variants VALUES('CS3945','CS4945');
INSERT INTO module_variants VALUES('IY3606','IY4606');
INSERT INTO module_variants VALUES('IY3609','IY4609');
INSERT INTO module_variants VALUES('IY3612','IY4612');
INSERT INTO module_variants VALUES('CS3250','CS4250');
INSERT INTO module_variants VALUES('CS3580','CS4580');
CREATE TABLE IF NOT EXISTS "coursework" (
	"mod_code"	TEXT,
	"title"	TEXT,
	"term"	TEXT,
	"percent"	TEXT,
	"deadline"	TEXT,
	"feedback_deadline"	TEXT,
	"comment"	TEXT,
	"anonymous"	BOOLEAN,
	"mark_type"	TEXT,
	"exempt_extension"	BOOLEAN,
	"substantial"	BOOLEAN,
	"set_order"	INTEGER
);
INSERT INTO coursework VALUES('CS1803','Individual project 1','1','15%','2018-11-06','2018-11-27','Online submission',0,'G',0,1,1);
INSERT INTO coursework VALUES('CS1803','Individual project 2','1','15%','2018-11-22','2018-12-13','Online submission',0,'G',0,1,2);
INSERT INTO coursework VALUES('CS1803','Group project','1','30%','2018-12-14','2019-01-22','Online submission',0,'G',1,0,3);
INSERT INTO coursework VALUES('CS1811','Assignment 1','1','5%','2018-11-12','2018-12-03','Online submission',0,'G',0,0,1);
INSERT INTO coursework VALUES('CS1811','Midterm test','1','MFA','2018-12-04','','Invigilated test during lecture slot',0,'N',0,0,2);
INSERT INTO coursework VALUES('CS1811','Assignment 2','1','5%','2018-12-13','2019-01-21','Online submission',0,'G',0,0,3);
INSERT INTO coursework VALUES('CS1811','Laboratory exercises','1','MFA','','','Mandatory lab exercises - see Moodle for details',0,'',0,0,4);
INSERT INTO coursework VALUES('CS1820','Robots and Remotes','1','MFA','2018-10-18','-','Practical Lab Assessment',0,'-',0,0,1);
INSERT INTO coursework VALUES('CS1820','Making robots behave','1','MFA','2018-10-25','-','Practical Lab Assessment',0,'-',0,0,2);
INSERT INTO coursework VALUES('CS1820','Robot senses','1','MFA','2018-11-01','-','Practical Lab Assessment',0,'-',0,0,3);
INSERT INTO coursework VALUES('CS1820','Navigation and threads','1','MFA','2018-11-08','-','Practical Lab Assessment',0,'-',0,0,4);
INSERT INTO coursework VALUES('CS1820','Behaviour programming','1','MFA','2018-11-15','-','Practical Lab Assessment',0,'-',0,0,5);
INSERT INTO coursework VALUES('CS1820','Draft course report','1','MFA','2018-11-30','-','Practical Lab Assessment',0,'-',0,0,6);
INSERT INTO coursework VALUES('CS1820','Group project presentation','1','15%','Last week of term','First week of term 2','',0,'G',0,0,7);
INSERT INTO coursework VALUES('CS1820','Group project demo','1','10%','TBC','TBC','',0,'G',0,0,8);
INSERT INTO coursework VALUES('CS1820','Individual final course report','1','75%','2018-12-14','2019-01-22','Moodle submission',0,'G',1,1,9);
INSERT INTO coursework VALUES('CS1860','Five worksheets','1','MFA','','','Present solutions in advisee tutorials',0,'',0,0,1);
INSERT INTO coursework VALUES('CS1860','Assignment 1','1','5%','2018-11-09','2018-11-30','Moodle submission of scanned work in PDF format',0,'N',0,0,2);
INSERT INTO coursework VALUES('CS1860','Assignment 2','1','5%','2018-12-10','2019-01-16','Moodle submission of scanned work in PDF format',0,'N',0,0,3);
INSERT INTO coursework VALUES('CS1890','Assignment 1','1','12%','2018-10-18','2018-11-08','Moodle submission',0,'G',0,0,1);
INSERT INTO coursework VALUES('CS1890','Assignment 2','1','5%','2018-10-25','2018-11-15','Moodle submission',0,'G',0,0,2);
INSERT INTO coursework VALUES('CS1890','Assignment 3','1','18%','2018-11-15','2018-12-06','Moodle submission',0,'G',0,0,3);
INSERT INTO coursework VALUES('CS1890','Assignment 4','1','25%','2018-12-06','2019-01-14','Moodle submission',0,'G',1,0,4);
INSERT INTO coursework VALUES('CS2800','Simple application','1','10%','2018-10-22','2018-11-05','Moodle submission',0,'G',0,1,1);
INSERT INTO coursework VALUES('CS2800','Reflective report','1','30%','2018-12-14','2019-01-22','Moodle submission plus SVN code deposition',0,'G',1,1,2);
INSERT INTO coursework VALUES('DC2845','Assignment 1','1','10%','2018-11-12','2018-11-26','Moodle submission',1,'G',1,1,1);
INSERT INTO coursework VALUES('DC2845','Coursework 2','1','10%','2018-12-14','2019-01-22','Moodle submission',1,'G',1,1,2);
INSERT INTO coursework VALUES('CS2850','Assignment 1','1','5%','2018-11-01','2018-11-15','Online submission',0,'G',0,0,1);
INSERT INTO coursework VALUES('CS2850','Assignment 2','1','5%','2018-11-21','2018-12-05','Online submission',0,'G',0,0,2);
INSERT INTO coursework VALUES('CS2850','Assignment 3','1','10%','2018-12-11','2019-01-17','Online submission',1,'G',1,1,3);
INSERT INTO coursework VALUES('CS2855','Assignment 1','1','5%','2018-11-02','2018-11-16','Online submission',1,'G',0,0,1);
INSERT INTO coursework VALUES('CS2855','Assignment 2','1','5%','2018-12-04','2019-01-10','Online submission',1,'G',0,0,2);
INSERT INTO coursework VALUES('CS2855','Mini-project','1','20%','2019-01-14','2019-01-28','Online submission',1,'G',1,0,3);
INSERT INTO coursework VALUES('IY2760','Assignment 1','1','5%','2018-10-17','2018-10-31','Moodle submission',0,'N',0,0,1);
INSERT INTO coursework VALUES('IY2760','Assignment 2','1','5%','2018-11-08','2018-11-22','Moodle submission',0,'N',0,0,2);
INSERT INTO coursework VALUES('IY2760','Assignment 3','1','5%','2018-11-15','2018-11-29','Moodle submission',0,'N',0,0,3);
INSERT INTO coursework VALUES('IY2760','Assignment 4','1','5%','2018-12-06','2019-01-14','Moodle submission',0,'N',1,0,1);
INSERT INTO coursework VALUES('CS3003','Assignment','1','10%','2018-10-30','2018-11-13','Moodle submission',1,'G',0,1,1);
INSERT INTO coursework VALUES('CS3003','Report 1','1','20%','2018-11-13','2018-11-27','Moodle submission',1,'G',0,1,2);
INSERT INTO coursework VALUES('CS3003','Report 2','1','20%','2018-12-03','2019-01-09','Moodle submission',1,'G',1,1,3);
INSERT INTO coursework VALUES('CS3220','Project 1','1','20%','2018-11-19','2018-12-03','Moodle submission',1,'G',0,1,1);
INSERT INTO coursework VALUES('CS3220','Project 2','1','20%','2018-12-14','2019-01-22','Moodle submission',1,'G',1,0,2);
INSERT INTO coursework VALUES('CS3470','Assignment 1','1','5%','2018-10-19','2018-11-02','Moodle submission of scanned work in PDF format',0,'N',0,0,1);
INSERT INTO coursework VALUES('CS3470','Assignment 2','1','5%','2018-11-09','2018-11-23','Moodle submission of scanned work in PDF format',0,'N',0,0,2);
INSERT INTO coursework VALUES('CS3470','Assignment 3','1','5%','2018-11-23','2018-12-07','Moodle submission of scanned work in PDF format',0,'N',0,0,3);
INSERT INTO coursework VALUES('CS3470','Assignment 4','1','5%','2018-12-10','2019-01-16','Moodle submission of scanned work in PDF format',0,'N',1,0,4);
INSERT INTO coursework VALUES('CS3490','Assignment 1','1','5%','2018-11-07','2018-11-21','Moodle submission of scanned work in PDF format',0,'-',0,0,1);
INSERT INTO coursework VALUES('CS3490','Assignment 2','1','5%','2018-12-04','2018-12-18','Moodle submission of scanned work in PDF format',0,'-',0,0,2);
INSERT INTO coursework VALUES('CS3821','Project Plan','1','5%','2018-10-05','','See details on projects booklet',0,'G',1,1,1);
INSERT INTO coursework VALUES('CS3821','Interim Review','1','25%','2018-12-07','','See details on projects booklet, including presentation date',0,'G',1,1,2);
INSERT INTO coursework VALUES('CS3821','Final Project submission','2','70%','2019-04-03','','See details on projects booklet, including demo days',0,'-',1,1,3);
INSERT INTO coursework VALUES('CS3810','Project Plan','1','10%','2018-10-05','','See details on projects booklet',0,'G',1,1,1);
INSERT INTO coursework VALUES('CS3810','Presentation (Term 1 Students)','1','10%','Last week of term 1','','See details on projects booklet',0,'G',1,1,2);
INSERT INTO coursework VALUES('CS3810','Final Project submission (Term 1 Students)','2','80%','2019-01-16','','See details on projects booklet',0,'-',1,1,3);
INSERT INTO coursework VALUES('CS3920','Assignment 1','1','6%','2018-10-29','2018-11-12','Online submission',1,'G',0,0,1);
INSERT INTO coursework VALUES('CS3920','Assignment 2','1','6%','2018-11-22','2018-12-06','Online submission',1,'G',0,0,2);
INSERT INTO coursework VALUES('CS3920','Assignment 3','1','6%','2018-12-12','2019-01-18','Online submission',1,'G',1,0,3);
INSERT INTO coursework VALUES('CS3920','Laboratory exercises','1','2%','','','Mandatory lab exercises - see Moodle for details',0,'',0,0,4);
INSERT INTO coursework VALUES('CS3940','Assignment','1','30%','2018-12-05','2019-01-11','Moodle submission',1,'G',1,1,1);
INSERT INTO coursework VALUES('CS4100','Assignment 1','1','6%','2018-11-15','2018-11-29','Online submission',0,'G',0,0,1);
INSERT INTO coursework VALUES('CS4100','Assignment 2','1','6%','2018-11-30','2018-12-14','Online submission',0,'G',0,0,2);
INSERT INTO coursework VALUES('CS4100','Assignment 3','1','6%','2018-12-17','2019-01-23','Online submission',0,'G',0,0,3);
INSERT INTO coursework VALUES('CS4100','Laboratory exercises','1','2%','','','Mandatory lab exercises - see Moodle for details',0,'',0,0,4);
INSERT INTO coursework VALUES('CS4825','Interim Review','1','30%','2018-12-07','','See details on projects booklet',0,'G',1,1,1);
INSERT INTO coursework VALUES('CS4825','Final Project submission','2','70%','2019-04-03','2019-05-08','See details on projects booklet',0,'-',1,1,2);
INSERT INTO coursework VALUES('CS4860','Project','1','30%','2018-12-04','2019-01-10','',0,'G',1,1,1);
INSERT INTO coursework VALUES('CS1812','Assignment 3','2','3 1/3%','2019-02-11','2019-03-04','Online submission',0,'G',1,0,1);
INSERT INTO coursework VALUES('CS1812','Assignment 4','2','3 1/3%','2019-03-04','2019-03-25','Online submission',0,'G',1,0,2);
INSERT INTO coursework VALUES('CS1812','Assignment 5','2','3 1/3%','2019-03-27','2019-04-30','Online submission',0,'G',1,0,4);
INSERT INTO coursework VALUES('CS1813','Prototype demonstration','2','MFA','2019-02-12','2019-03-05','Demonstration during lab session',0,'-',1,0,1);
INSERT INTO coursework VALUES('CS1813','Final application','2','22%','2019-03-04','2019-03-25','Moodle submission',0,'G',1,1,2);
INSERT INTO coursework VALUES('CS1813','Test report','2','18%','2019-03-26','2019-04-29','Moodle submission',0,'G',0,0,4);
INSERT INTO coursework VALUES('CS1830','Moodle quiz 1','2','5%','2019-02-01','2019-02-22','Moodle submission',0,'G',1,0,1);
INSERT INTO coursework VALUES('CS1830','Moodle quiz 2','2','5%','2019-02-15','2019-03-08','Moodle submission',0,'G',1,0,2);
INSERT INTO coursework VALUES('CS1830','Moodle quiz 3','2','5%','2019-03-01','2019-03-22','Moodle submission',0,'G',1,0,3);
INSERT INTO coursework VALUES('CS1830','Moodle quiz 4','2','5%','2019-03-15','2019-04-12','Moodle submission',0,'G',1,0,4);
INSERT INTO coursework VALUES('CS1830','Group project','2','40%','2019-03-25','2019-04-26','Moodle submission',0,'G',0,1,5);
INSERT INTO coursework VALUES('CS1830','Individual report for the group proj.','2','40%','2019-03-29','2019-05-02','Moodle submission',0,'G',0,1,6);
INSERT INTO coursework VALUES('CS1840','Assignment 1','2','5%','2019-02-19','2019-03-12','Moodle submission',0,'N',1,0,1);
INSERT INTO coursework VALUES('CS1840','Assignment 2','2','5%','2019-03-21','2019-04-24','Moodle submission',0,'N',1,0,2);
INSERT INTO coursework VALUES('CS1870','Assignment 1','2','5%','2019-02-26','2019-03-19','Moodle submission of scanned work in PDF format',0,'N',1,0,1);
INSERT INTO coursework VALUES('CS1870','Assignment 2','2','5%','2019-03-27','2019-04-30','Moodle submission of scanned work in PDF format',0,'N',1,0,2);
INSERT INTO coursework VALUES('CS2810','Sprint 1','2','8%','2019-02-01','2019-02-15','Git repository, task management, contribution in meetings',0,'G',1,1,1);
INSERT INTO coursework VALUES('CS2810','Sprint 2','2','8%','2019-02-15','2019-03-01','Git repository, task management, contribution in meetings',0,'G',1,1,2);
INSERT INTO coursework VALUES('CS2810','Sprint 3','2','8%','2019-03-01','2019-03-15','Git repository, task management, contribution in meetings',0,'G',1,1,3);
INSERT INTO coursework VALUES('CS2810','Sprint 4','2','8%','2019-03-15','2019-03-29','Git repository, task management, contribution in meetings',0,'G',1,1,4);
INSERT INTO coursework VALUES('CS2810','Sprint 5','2','8%','2019-03-29','2019-05-02','Git repository, task management, contribution in meetings',0,'G',1,1,5);
INSERT INTO coursework VALUES('CS2810','Group project (software and report)','2','50%','2019-03-29','2019-05-02','Git repository + Moodle',0,'G',1,1,6);
INSERT INTO coursework VALUES('CS2810','Individual report','2','10%','2019-03-29','2019-05-02','Git repository + Moodle',0,'G',0,0,7);
INSERT INTO coursework VALUES('CS2860','Assignment 1','2','5%','2019-02-21','2019-03-07','Moodle submission of scanned work in PDF format',0,'G',1,0,1);
INSERT INTO coursework VALUES('CS2860','Assignment 2','2','5%','2019-03-18','2019-04-15','Moodle submission of scanned work in PDF format',0,'G',1,0,2);
INSERT INTO coursework VALUES('CS2900','Assignment 1','2','10%','2019-02-07','2019-02-21','Online submission',1,'G',0,0,1);
INSERT INTO coursework VALUES('CS2900','Assignment 2','2','10%','2019-03-11','2019-03-25','Online submission',1,'G',0,0,2);
INSERT INTO coursework VALUES('CS2900','Assignment 3','2','10%','2019-04-10','2019-05-15','Online submission',1,'G',0,1,3);
INSERT INTO coursework VALUES('CS2910','Assignment 1','2','15%','2019-02-26','2019-03-12','Submission via submitCoursework',1,'G',0,0,1);
INSERT INTO coursework VALUES('CS2910','Assignment 2','2','15%','2019-03-27','2019-04-30','Submission via submitCoursework',1,'G',0,1,2);
INSERT INTO coursework VALUES('IY2840','Assignment 1','2','10%','2019-02-28','2019-03-14','Automatic online submission',1,'N',0,0,1);
INSERT INTO coursework VALUES('IY2840','Assignment 2','2','10%','2019-03-14','2019-03-28','Automatic online submission',1,'N',0,0,2);
INSERT INTO coursework VALUES('IY2840','Assignment 3','2','10%','2019-03-26','2019-04-29','Automatic online submission',1,'N',0,1,3);
INSERT INTO coursework VALUES('CS3110','Assignment 1','2','5%','2019-03-01','2019-03-15','Online submission',1,'G',1,0,1);
INSERT INTO coursework VALUES('CS3110','Assignment 2','2','5%','2019-03-28','2019-05-01','Online submission',1,'G',1,0,2);
INSERT INTO coursework VALUES('CS3250','Assignment 1','2','10%','2019-02-12','2019-02-26','Online submission',1,'G',0,0,1);
INSERT INTO coursework VALUES('CS3250','Assignment 2','2','10%','2019-03-20','2019-04-17','Online submission',1,'G',0,1,2);
INSERT INTO coursework VALUES('CS3480','Assignment 1','2','10%','2019-03-04','2019-03-18','Online submission',1,'G',0,0,1);
INSERT INTO coursework VALUES('CS3480','Assignment 2','2','10%','2019-03-29','2019-05-02','Online submission',1,'G',0,1,2);
INSERT INTO coursework VALUES('CS3510','Assignment 1','2','10%','2019-02-15','2019-03-01','Online submission',1,'N',0,0,1);
INSERT INTO coursework VALUES('CS3510','Assignment 2','2','10%','2019-03-07','2019-03-21','Online submission',1,'N',0,1,2);
INSERT INTO coursework VALUES('CS3810','Presentation (Term 2 Students)','2','10%','Last week of term 2','','Submission details on projects booklet',0,'G',1,0,4);
INSERT INTO coursework VALUES('CS3810','Final Project submission (Term 2 Students)','2','80%','2019-05-01','','Submission details on projects booklet',0,'-',1,1,5);
INSERT INTO coursework VALUES('CS3846','Group Project I','2','20%','2019-02-18','2019-03-04','Moodle submission',0,'G',1,1,1);
INSERT INTO coursework VALUES('CS3846','Individual Report I','2','10%','2019-02-27','2019-03-13','Moodle submission',0,'G',1,0,2);
INSERT INTO coursework VALUES('CS3846','Group Project II','2','20%','2019-03-22','2019-04-25','Moodle submission',0,'G',1,1,3);
INSERT INTO coursework VALUES('CS3846','Individual Report II','2','10%','2019-04-05','2019-05-10','Moodle submission',0,'G',0,0,4);
INSERT INTO coursework VALUES('CS3930','Project','2','20%','2019-03-14','2019-03-28','Online submission',1,'N',0,1,1);
INSERT INTO coursework VALUES('CS4200','Assignment','2','20%','2019-03-11','2019-03-25','Online submission',1,'N',0,1,1);
INSERT INTO coursework VALUES('CS4234','Assignment 1 (group proj. part 1)','2','1%','2019-02-04','2019-02-18','',1,'G',1,0,1);
INSERT INTO coursework VALUES('CS4234','Assignment 2 (group proj. part 2)','2','1%','2019-02-25','2019-03-11','',1,'G',1,0,2);
INSERT INTO coursework VALUES('CS4234','Assignment 3 (group proj. part 3)','2','MFA','2019-03-19','2019-04-16','',1,'G',1,0,3);
INSERT INTO coursework VALUES('CS4234','Assignment 4 (group proj. part 4)','2','18%','2019-04-29','2019-05-29','',0,'G',1,1,4);
INSERT INTO coursework VALUES('CS4234','Individual report for assignment 4','2','10%','2019-04-29','2019-05-29','',0,'G',0,0,5);
INSERT INTO coursework VALUES('CS4504','Project','2','40%','2019-03-04','2019-03-18','Moodle submission',1,'G',0,1,1);
INSERT INTO coursework VALUES('CS4821','Project Plan','1','5%','2018-10-05','','Submission details on projects booklet',0,'G',1,0,1);
INSERT INTO coursework VALUES('CS4821','December Review','1','25%','2018-12-07','','Submission details on projects booklet',0,'G',1,1,2);
INSERT INTO coursework VALUES('CS4821','Final Project submission','2','70%','2019-04-03','','Submission details on projects booklet',0,'-',1,1,3);
INSERT INTO coursework VALUES('CS4950','Assignment','2','10%','2019-02-18','2019-03-04','Moodle submission of scanned work in PDF format',0,'G',0,0,1);
INSERT INTO coursework VALUES('CS4950','Project','2','10%','2019-03-29','2019-05-02','',0,'G',0,1,2);
INSERT INTO coursework VALUES('CS1813','Presentation','2','-','2019-03-05','-','Presentation',0,'G',1,1,3);
INSERT INTO coursework VALUES('CS3870','Assignment 1','2','MFA','2019-02-13','2019-02-27','Moodle submission',0,'N',1,0,1);
INSERT INTO coursework VALUES('CS3870','Assignment 2','2','MFA','2019-03-13','2019-03-27','Moodle submission',0,'N',1,0,2);
CREATE TABLE IF NOT EXISTS "leaders" (
	"mod_code"	TEXT,
	"leader"	TEXT,
	"support"	TEXT
);
INSERT INTO leaders VALUES('CS1803','AJ','NB');
INSERT INTO leaders VALUES('CS1811','AJ',NULL);
INSERT INTO leaders VALUES('CS1820','DC','JK');
INSERT INTO leaders VALUES('CS1860','JF',NULL);
INSERT INTO leaders VALUES('CS1890','CM',NULL);
INSERT INTO leaders VALUES('CS2800','DC',NULL);
INSERT INTO leaders VALUES('DC2845','HS',NULL);
INSERT INTO leaders VALUES('CS2850','CM','JK');
INSERT INTO leaders VALUES('CS2855','IT',NULL);
INSERT INTO leaders VALUES('IY2760','EQ','PK');
INSERT INTO leaders VALUES('CS3003','GK',NULL);
INSERT INTO leaders VALUES('CS3220','NB',NULL);
INSERT INTO leaders VALUES('CS3470','ES',NULL);
INSERT INTO leaders VALUES('CS3580','ZYL',NULL);
INSERT INTO leaders VALUES('CS3490','GG',NULL);
INSERT INTO leaders VALUES('CS3821','DC','IT');
INSERT INTO leaders VALUES('CS3810','DC','IT');
INSERT INTO leaders VALUES('CS3810','DC','IT');
INSERT INTO leaders VALUES('CS3920','VV',NULL);
INSERT INTO leaders VALUES('CS3940','KS',NULL);
INSERT INTO leaders VALUES('IY3660','KP',NULL);
INSERT INTO leaders VALUES('CS4100','ZYL','VV');
INSERT INTO leaders VALUES('CS4580','ZYL','');
INSERT INTO leaders VALUES('CS4825','CM','');
INSERT INTO leaders VALUES('CS4821','DC','IT');
INSERT INTO leaders VALUES('CS4860','DK',NULL);
INSERT INTO leaders VALUES('CS1812','MH',NULL);
INSERT INTO leaders VALUES('CS1813','MH','CM');
INSERT INTO leaders VALUES('CS1830','NB','');
INSERT INTO leaders VALUES('CS1840','ZHL',NULL);
INSERT INTO leaders VALUES('CS1870','ES','');
INSERT INTO leaders VALUES('CS2810','CM','MH');
INSERT INTO leaders VALUES('CS2860','GG',NULL);
INSERT INTO leaders VALUES('CS2900','HS',NULL);
INSERT INTO leaders VALUES('CS2910','KS',NULL);
INSERT INTO leaders VALUES('IY2840','BP',NULL);
INSERT INTO leaders VALUES('CS3110','AP',NULL);
INSERT INTO leaders VALUES('CS3250','ZYL',NULL);
INSERT INTO leaders VALUES('CS3480','AJ',NULL);
INSERT INTO leaders VALUES('CS3510','ZHL',NULL);
INSERT INTO leaders VALUES('CS3810','DC','IT');
INSERT INTO leaders VALUES('CS3810','DC','IT');
INSERT INTO leaders VALUES('CS3846','NB','CM');
INSERT INTO leaders VALUES('CS3870','MW',NULL);
INSERT INTO leaders VALUES('CS3930','YK',NULL);
INSERT INTO leaders VALUES('CS4200','YK',NULL);
INSERT INTO leaders VALUES('CS4234','GC',NULL);
INSERT INTO leaders VALUES('CS4504','GK',NULL);
INSERT INTO leaders VALUES('CS4950','CW',NULL);
COMMIT;
