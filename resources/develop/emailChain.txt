Good morning Matthew, Carlos,
I 
I've had a look at the sqlite database provided by Matt for his prototype module registration system. We're in the process of figuring things out, but I just wanted to ask if you had any advice.

Mainly, it's mentioned there's a sqlite database for each starting year of university. As far as I can see, thinking about deployment .etc down the line, I have two options:

a) Redesign the data model so that it can all be kept in, say, one psql database (knowing that we'll probably have to do some redesigning and extending regardless)
b) Keep to the 'new database per year' choice

If we keep to option B, problems I'm envisaging (but not experienced enough to know about!) are things like: hosting multiple databases on, say, Heroku; querying each different database accordingly if necessary (we're using Django makes it easy to select which database you use for queries, but each has still has to be hosted somewhere); writing scripts which would allow the user to create a new database each academic year and how in-depth these scripts could be (eg Matt would be more than capable of doing it without a script but office staff might not) and probably other problems I haven't thought of.

At the moment our team is leaning towards option A - but I just thought I'd drop an email incase either of you had any advice, or if you think I'm jumping too far ahead! Either way, all we'll actually implement in this sprint is probably just a simple Module entity that can be queried and viewed in a web page - I'm just thinking of the future.

Cheers & all the best,
Tom

============================================================================================================================================================================


>   a) Redesign the data model so that it can all be kept in, say, one psql
>   database (knowing that we'll probably have to do some redesigning and
>   extending regardless)

The different years is because module specifications and coursework can
change over time. For the module choice system, it does not really need
to track what the spec of, say, CS2800 was five years ago. Just having
the most up to date information to display is enough. Hence i would
ignore the fact that there is a different database per year.

The only part that needs to have historical data is the option_rules
table, which has five years of data in there already.

>   b) Keep to the 'new database per year' choice
>
>   If we keep to option B, problems I'm envisaging (but not experienced
>   enough to know about!) are things like: hosting multiple databases on,
>   say, Heroku; querying each different database accordingly if necessary
>   (we're using Django makes it easy to select which database you use for
>   queries, but each has still has to be hosted somewhere); writing
>   scripts which would allow the user to create a new database each
>   academic year and how in-depth these scripts could be (eg Matt would be
>   more than capable of doing it without a script but office staff might
>   not) and probably other problems I haven't thought of.

I don't think you need to track this. Having one database with current
module specs and option_rules is enough. I imagine each year dropping
the database into the system, erasing the previous data.

Best,

Matt

============================================================================================================================================================================

Awesome - that's really helpful.

Thank you!

============================================================================================================================================================================
>   Awesome - that's really helpful.

I think i'm going to be less helpful now (typical client!).

On reflection, it's good to separate the DB format that i gave -- which
is just a collection of data in a form convenient for me to deal with
admin -- from the DB format of the module choice system. You'll want to
ignore, for example, the coursework table, and probably many columns of
the modules table. I would think of this DB as being "data i have". For
import to the module choice system, i could use my DB to create a CSV
for example (i can generate these with a saved SQL query, so it'll be
easy for me).

I realised that the module choice system will need two year's of specs
-- one for students choosing to change modules during the same year, and
one for students choosing their choices for next year. So your DB will
likely need to have multiple entries for different module years.

Interface-wise, i see three tasks for managing module/degree data:

1) Import module information for this/next year (summary, learning
objectives, anything else you think students would like to know).

2) Import the allocation of lecturers to modules for this/next year (not
necessarily available at the same time as the above).

3) Upload a set of degree specification rules.

The main mode should be some kind of CSV upload (e.g. upload a batch of
modules or a batch of rules, which will either add or update existing
data as appropriate). A secondary option would be to allow editing of
the data through an interface, but i'm not a fan of manual clicking for
this kind of stuff.

Best,

Matt